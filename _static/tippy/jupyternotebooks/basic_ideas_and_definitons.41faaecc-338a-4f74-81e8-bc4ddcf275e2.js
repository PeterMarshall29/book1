selector_to_html = {"a[href=\"glossary.html#term-String-Data-Type\"]": "<dt id=\"term-String-Data-Type\">String Data Type</dt><dd><p>Data consisting of a sequence of characters, bracketed by <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>. Requires inclusion of <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;string&gt;</span></code> and access via <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> namespace scope.</p></dd>", "a[href=\"#mathematical-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Mathematical Functions<a class=\"headerlink\" href=\"#mathematical-functions\" title=\"Permalink to this heading\">#</a></h2><p>To access additional mathematical functions, we can include the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;cmath&gt;</span></code> component of the standard library.</p><p>It may be necessary to use <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> to access these functions in some compilers - but not in \u2018Live Code\u2019 or in Visual Studio.</p>", "a[href=\"#exampleb4\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleb4\">\n<p class=\"admonition-title\">Code Example: Other Types </p>\n<section id=\"code_example-content\">\n<p>Correct the following code and add a line to print out all the named variables, separated by tabs.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Peter\"</span><span class=\"p\">;</span>\n<span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"n\">shoeSize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">10.5</span><span class=\"p\">;</span>\n<span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0e-8</span><span class=\"p\">;</span>\n<span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">middleInitial</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'J'</span><span class=\"p\">;</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/basic_ideas_and_definitons-code_explanation-12\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleb4\"> Code Example: Other Types </a></p>\n<section id=\"code_explanation-content\">\n<p>Single quotes denote a <a class=\"reference internal\" href=\"glossary.html#term-char\"><span class=\"xref std std-term\">char</span></a> type, which may only hold a single character.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Float</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code> are both used for <a class=\"reference internal\" href=\"glossary.html#term-Floating-Point-Numbers\"><span class=\"xref std std-term\">floating-point numbers</span></a> - \u2018double\u2019 means double-precision (using twice as many bits to represent the number in binary). You will only need to use <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code></p>\n<p>Scientific notation is formatted using a lower case <code class=\"docutils literal notranslate\"><span class=\"pre\">e</span></code> (or upper case <code class=\"docutils literal notranslate\"><span class=\"pre\">E</span></code>) between the mantissa and the exponent WITHOUT ANY SPACES!!</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#basic-arithmetic-operations\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Basic Arithmetic Operations<a class=\"headerlink\" href=\"#basic-arithmetic-operations\" title=\"Permalink to this heading\">#</a></h2><p>All programming languages carry out basic arithmetic operations. Normally we do not use a computer as a simple calculator, but most programmes carry out some arithmetic operations as part of their execution.</p>", "a[href=\"glossary.html#term-char\"]": "<dt id=\"term-char\">char</dt><dd><p>Type for representing individual characters. Character literals are enclosed by <code class=\"docutils literal notranslate\"><span class=\"pre\">'</span> <span class=\"pre\">'</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">char</span></code>is an integer type - each character has an associated integer value.</p></dd>", "a[href=\"glossary.html#term-Operators\"]": "<dt id=\"term-Operators\">Operators</dt><dd><p>Symbols used to denote an arithmetic, or logical operation/computation on one or more values or variables, and to instruct the program to perform that operation. Used as part of an expression.</p></dd>", "a[href=\"glossary.html#term-Numeric-Data-Type\"]": "<dt id=\"term-Numeric-Data-Type\">Numeric Data Type</dt><dd><p>The data types for numeric values - each represents a different type of number to different levels of precision. Includes <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code>. Some data types require additional specifiers, see the <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/language/types.html\">C++ Reference \u2013 Data Types</a></p></dd>", "a[href=\"#variables\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Variables<a class=\"headerlink\" href=\"#variables\" title=\"Permalink to this heading\">#</a></h2><p>A computer program that can only perform arithmetic on <a class=\"reference internal\" href=\"glossary.html#term-Literal\"><span class=\"xref std std-term\">literal</span></a> values written into the original program code would not be very useful. Instead, programmes must be able ask the user for the numeric values that are to be used in the calculations, or read values in from files, which requires the program to store this information and to be able to access and manipulate it later.</p><p>Computers use <a class=\"reference internal\" href=\"glossary.html#term-Variables\"><span class=\"xref std std-term\">variables</span></a> to store the values needed by a program. At its simplest: like in maths, a <a class=\"reference internal\" href=\"glossary.html#term-Variable\"><span class=\"xref std std-term\">variable</span></a> is a <a class=\"reference internal\" href=\"glossary.html#term-Name\"><span class=\"xref std std-term\">name</span></a> that represents a value. The difference is that in maths the variable \u2018x\u2019 represents an unknown value, but in computing the variable called \u2018x\u2019 represents a specific value of a particular <a class=\"reference internal\" href=\"glossary.html#term-Type\"><span class=\"xref std std-term\">type</span></a> that is stored in the computer\u2019s memory.</p>", "a[href=\"glossary.html#term-Char-Type\"]": "<dt id=\"term-Char-Type\">Char Type</dt><dd><p>Type for representing individual characters. Character literals are enclosed by <code class=\"docutils literal notranslate\"><span class=\"pre\">'</span> <span class=\"pre\">'</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">char</span></code>is an integer type - each character has an associated integer value.</p></dd>", "a[href=\"#strings\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Strings<a class=\"headerlink\" href=\"#strings\" title=\"Permalink to this heading\">#</a></h2><p>A <a class=\"reference internal\" href=\"glossary.html#term-String\"><span class=\"xref std std-term\">string</span></a> is a sequence of characters. In C++ strings are represented by the type <code class=\"docutils literal notranslate\"><span class=\"pre\">std::string</span></code>.</p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> indicates that a standard library facility is needed - in this case <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;string&gt;</span></code>.</p>", "a[href=\"glossary.html#term-Expression\"]": "<dt id=\"term-Expression\">Expression</dt><dd><p>A combination of literals or variables with operators that produce a value or may designate objects or functions. Simplest example would be an arithmetic expression e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">+</span> <span class=\"pre\">b</span></code>.</p></dd>", "a[href=\"glossary.html#term-Operands\"]": "<dt id=\"term-Operands\">Operands</dt><dd><p>Literals or variables operated on by operators in an expression.</p></dd>", "a[href=\"glossary.html#term-Concatenation\"]": "<dt id=\"term-Concatenation\">Concatenation</dt><dd><p>Joining of two strings together. Accomplished by the concatenation operator <code class=\"docutils literal notranslate\"><span class=\"pre\">+</span></code>or a built-in function.</p></dd>", "a[href=\"glossary.html#term-Null-Statement\"]": "<dt id=\"term-Null-Statement\">Null Statement</dt><dd><p>The <a class=\"reference internal\" href=\"#term-Empty-Statement\"><span class=\"xref std std-term\">Empty statement</span></a>: valid in C++ and can be used in certain scenarios where a statement is syntactically required but no action is needed.</p></dd>", "a[href=\"glossary.html#term-Name\"]": "<dt id=\"term-Name\">Name</dt><dd><p>An identifier. (A minority of names are not identifiers - advanced).</p></dd>", "a[href=\"glossary.html#term-Reserved-Characters\"]": "<dt id=\"term-Reserved-Characters\">Reserved Characters</dt><dd><p>Some characters cannot be freely used because they have special meaning in the syntax. Some may be overloaded. Examples: <code class=\"docutils literal notranslate\"><span class=\"pre\">#</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">\\</span></code>, arithmetic operators, comparison operators, punctuation symbols.</p></dd>", "a[href=\"glossary.html#term-Empty-Statement\"]": "<dt id=\"term-Empty-Statement\">Empty Statement</dt><dd><p>A statement that consists of only a semicolon <code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code>. It does nothing and is often referred to as a <a class=\"reference internal\" href=\"#term-Null-Statement\"><span class=\"xref std std-term\">null statement</span></a>. Empty statements are used where the syntax requires a statement, but the contents are optionally not required, to provide an empty body to a <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">while</span></code> loop, or to carry a label at the end of a compound statement.</p></dd>", "a[href=\"glossary.html#term-Expression-Statement\"]": "<dt id=\"term-Expression-Statement\">Expression Statement</dt><dd><p>An expression followed by a semicolon.</p></dd>", "a[href=\"glossary.html#term-Value\"]": "<dt id=\"term-Value\">Value</dt><dd><p>The literal stored in a variable. Other usages - see <a class=\"reference internal\" href=\"#term-Value-Categories\"><span class=\"xref std std-term\">Value Categories</span></a>.</p></dd>", "a[href=\"glossary.html#term-Modulo-Operator\"]": "<dt id=\"term-Modulo-Operator\">Modulo Operator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">%</span></code> - the infix operator for modulo operations that returns the remainder after dividing the LHS number by the RHS number. In C++ this operation only applies to <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> type and is truncating, meaning the quotient, whether positive or negative, is rounded towards before the remainder is determined. Other languages used \u2018floored\u2019 or \u2018rounded\u2019, and for every new language you will need to determine which is applied, because different results are produced.</p></dd>", "a[href=\"#exerciseb1\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseb1\">\n<p class=\"admonition-title\">Exercise  Working with Variables </p>\n<section id=\"exercise-content\">\n<p>After a variable has been declared and given a value, the value can be changed.</p>\n<ol class=\"arabic simple\">\n<li><p>After line 4 - <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code>:</p></li>\n</ol>\n<ul class=\"simple\">\n<li><p>Add <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">=</span> <span class=\"pre\">10;</span></code></p></li>\n<li><p>Add a second output statement to print the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> again.</p></li>\n<li><p>Find out what happens if you put the statements in a different order?</p></li>\n</ul>\n<ol class=\"arabic simple\" start=\"2\">\n<li><p>Define a second variable of integer type called <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> and give it a value.</p></li>\n</ol>\n<ul class=\"simple\">\n<li><p>Instruct the program to print out <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">+</span> <span class=\"pre\">b</span></code>.</p></li>\n<li><p>What would happen if you declared the second variable after the <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> statement? Find out.</p></li>\n</ul>\n<p>The value of a variable can be changed by using another variable.</p>\n<ol class=\"arabic simple\" start=\"3\">\n<li><p>Add the statement <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">=</span> <span class=\"pre\">b;</span></code> and repeat the outputs.</p></li>\n</ol>\n<div class=\"solution dropdown admonition\" id=\"solutionb1\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exerciseb1\"> Exercise  Working with Variables </a></p>\n<section id=\"solution-content\">\n<ol class=\"arabic simple\">\n<li><p>The program executes statements sequentially, starting at the top. If the second output statement precedes the change of value, the number 5 is printed twice. If both output statements come after the change in value, then the number 10 is printed twice.</p></li>\n<li><p>Your program should now look like this:</p></li>\n</ol>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>The program now evaluates the arithmetic sum of the values contained in <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> - and sends the result to the character output stream.</p>\n<ol class=\"arabic simple\" start=\"3\">\n<li><p>The value of variable <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> has been copied into the variable <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> is not affected by this operation.</p></li>\n</ol>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#escape-characters\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Escape Characters<a class=\"headerlink\" href=\"#escape-characters\" title=\"Permalink to this heading\">#</a></h2><p><a class=\"reference internal\" href=\"glossary.html#term-Escape-Sequences\"><span class=\"xref std std-term\">Escape sequences</span></a>, or \u2018escaped characters\u2019, are used to represent special characters within a string or character literal. Certain characters in the program must be represented with <a class=\"reference internal\" href=\"glossary.html#term-Escape-Sequences\"><span class=\"xref std std-term\">escape sequences</span></a> because they are <a class=\"reference internal\" href=\"glossary.html#term-Reserved-Characters\"><span class=\"xref std std-term\">reserved characters</span></a> that have specific meaning to the compiler. These are mostly used in formatting output. A full list of escape characters in C++ can be found <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/language/escape.html\">here</a>.</p><p>Each escape sequence is identified to the program by prefixing <code class=\"docutils literal notranslate\"><span class=\"pre\">\\</span></code> to the escaped character.</p>", "a[href=\"#basic-concepts\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Basic Concepts<a class=\"headerlink\" href=\"#basic-concepts\" title=\"Permalink to this heading\">#</a></h1><p>Once you have mastered some basic components of the C++ language, learning the language becomes much easier, because you will be able to write simple programmes to try out each new concept.</p><p>This page leads you through some basic exercises, much of the explanation is left until later chapters - this page is not intended to present the full syntax.</p>", "a[href=\"#exampleb1\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleb1\">\n<p class=\"admonition-title\">Code Example: Arithmetic Operations </p>\n<section id=\"code_example-content\">\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> can be used to demonstrate the basic arithmetic operations.</p>\n<p>Type in the following and try the exercise.</p>\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"linenos\">2</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"linenos\">3</span><span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">;</span>\n<span class=\"linenos\">4</span><span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"linenos\">5</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">!</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>The program evaluates the expression <code class=\"docutils literal notranslate\"><span class=\"pre\">4</span> <span class=\"pre\">+</span> <span class=\"pre\">7</span></code> before sending the result to the character output stream (to display on the screen).</p>\n<div class=\"exercise dropdown admonition\" id=\"jupyternotebooks/basic_ideas_and_definitons-exercise-2\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 1 </span></p>\n<section id=\"exercise-content\">\n<ul class=\"simple\">\n<li><p>Try the operators -,*,/ and %.</p></li>\n<li><p>What does the % operator do?</p></li>\n<li><p>Why might that be useful?</p></li>\n</ul>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/basic_ideas_and_definitons-code_explanation-3\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleb1\"> Code Example: Arithmetic Operations </a></p>\n<section id=\"code_explanation-content\">\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">%</span></code> operator is called the <a class=\"reference internal\" href=\"glossary.html#term-Modulo-Operator\"><span class=\"xref std std-term\">Modulo operator</span></a> or the remainder operator.</p>\n<p>If Modulo os new to you, the Wiki has a good description - <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Modulo\">Modulo</a>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">%</span></code> operator only works with integers - there are also functions available for floating-point number.</p>\n<p>Modulo is very useful in computing - it is used to determine whether a number is even, or a multiple of 10 etc. by checking if the corresponding remainder value is zero.</p>\n</section>\n</div>\n<ul class=\"simple\">\n<li><p>Add <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">&lt;cmath&gt;</span></code> and replace <code class=\"docutils literal notranslate\"><span class=\"pre\">4+7</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">pow(4,7)</span></code> and rerun. See next section for details.</p></li>\n<li><p>Try using <code class=\"docutils literal notranslate\"><span class=\"pre\">-</span></code> as a prefix on a number, what effect does that have?</p></li>\n</ul>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Terminator\"]": "<dt id=\"term-Terminator\">Terminator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code> or {} - which close statements.</p></dd>", "a[href=\"glossary.html#term-Code-Block\"]": "<dt id=\"term-Code-Block\">Code-Block</dt><dd><p>Sequence of <a class=\"reference internal\" href=\"#term-Statements\"><span class=\"xref std std-term\">statements</span></a> enclosed by curly braces <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code>. Also referred to as a <a class=\"reference internal\" href=\"#term-Compound-Statement\"><span class=\"xref std std-term\">compound statement</span></a>.</p></dd>", "a[href=\"glossary.html#term-String\"]": "<dt id=\"term-String\">String</dt><dd><p>Sequence of characters collected into a single variable - a <code class=\"docutils literal notranslate\"><span class=\"pre\">char</span></code> array - denoted by a literal enclosed in double quote marks <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">std::string</span></code> provides a methods for manipulating strings. <code class=\"docutils literal notranslate\"><span class=\"pre\">std::string</span></code> behaves like a containter but is not part of the C++ <container> library.</container></p></dd>", "a[href=\"glossary.html#term-Scope\"]": "<dt id=\"term-Scope\">Scope</dt><dd><p>The context in which a variable, function, or class is defined. May be global, namespace, class, function, block/local.</p></dd>", "a[href=\"glossary.html#term-Floating-Point-Number-Types\"]": "<dt id=\"term-Floating-Point-Number-Types\">Floating-Point Number Types</dt><dd><p>Float, Double, and Long Double. Floating-point literals are interpreted as <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code> type unless the letter \u2018f\u2019 or \u2018l\u2019 is added as a suffix.</p></dd>", "a[href=\"glossary.html#term-Literal\"]": "<dt id=\"term-Literal\">Literal</dt><dd><p>A fixed value written directly into a program. e.g. the number \u20181\u2019, generally found on the RHS of assignment operations. The notation used for Boolean types, character types, string types, numeric types etc., e.g. the word <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> is a Boolean literal when used appropriately.</p></dd>", "a[href=\"glossary.html#term-Variables\"]": "<dt id=\"term-Variables\">Variables</dt><dd><p>A variable is a named object, or a reference that is not a non-static data member, that is introduced by a declaration, in a scope.</p></dd>", "a[href=\"glossary.html#term-Directives\"]": "<dt id=\"term-Directives\">Directives</dt><dd><p>Also known as preprocessor directives - instructions that are processed before compilation of the C++ code begins. Directives start with <code class=\"docutils literal notranslate\"><span class=\"pre\">#</span></code> and must lie at the top of the document. Used for including files (<code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span></code>), such as libraries, and defining <a class=\"reference internal\" href=\"#term-Macros\"><span class=\"xref std std-term\">macros</span></a>(<code class=\"docutils literal notranslate\"><span class=\"pre\">#define</span></code>), and conditional compilation (<code class=\"docutils literal notranslate\"><span class=\"pre\">#if</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">#ifdef</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">#ifndef</span></code>).</p></dd>", "a[href=\"#exerciseb3\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseb3\">\n<p class=\"admonition-title\">Exercise  Data Types </p>\n<section id=\"exercise-content\">\n<p>Try to fix this code:</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"p\">;</span>\n<span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.0</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.5</span><span class=\"p\">;</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"solution dropdown admonition\" id=\"solutionb3\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exerciseb3\"> Exercise  Data Types </a></p>\n<section id=\"solution-content\">\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">string</span></code> type variables are part of the standard library and must be referenced by prefixing with <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code></p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"12.0\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"n\">nameOfFloat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.5</span><span class=\"p\">;</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">char</span></code> are all part of the <a class=\"reference internal\" href=\"glossary.html#term-Core-Language\"><span class=\"xref std std-term\">core language</span></a> - i.e. do not use <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> !</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code> type variable needed an identifier (a name), and the <code class=\"docutils literal notranslate\"><span class=\"pre\">string</span></code> type must be initialised by a sequence of characters enclosed between double quote marks <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"selection_and_iteration.html#iteration\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Iteration<a class=\"headerlink\" href=\"#iteration\" title=\"Permalink to this heading\">#</a></h2><p>Computer programmes often repeat the same execution of the same lines of code - Iteration statements instruct the computer to repeat the same statements a finite number of times, or until a testable condition changes.</p><p>Iterations statements in C++ are the <a class=\"reference internal\" href=\"for_loops.html#for\"><span class=\"std std-ref\">for</span></a>-statement, the <a class=\"reference internal\" href=\"while_loops.html#while\"><span class=\"std std-ref\">while</span></a>-statement, the do-while-statement, and the range-for statement.</p>", "a[href=\"glossary.html#term-Core-Language\"]": "<dt id=\"term-Core-Language\">Core Language</dt><dd><p>The fundamental components of the C++ language not found in the Standard Library, whose  libraries are constructed from the core language.</p></dd>", "a[href=\"#expressions-and-statements\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Expressions and Statements<a class=\"headerlink\" href=\"#expressions-and-statements\" title=\"Permalink to this heading\">#</a></h2><p>A computer program is a sequence of statements, which are executed sequentially when the program runs.</p>", "a[href=\"glossary.html#term-Escape-Sequences\"]": "<dt id=\"term-Escape-Sequences\">Escape Sequences</dt><dd><p>Used in programming languages to represent special characters within a string or character literal. They are identified by the prefix backslash <code class=\"docutils literal notranslate\"><span class=\"pre\">\\</span></code>. Examples are <code class=\"docutils literal notranslate\"><span class=\"pre\">\\n</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">\\t</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">\\\\</span></code> to represent \u2018newline\u2019, \u2018tab\u2019 - and to identify that a backslash is simply a back slash literal.</p></dd>", "a[href=\"#more-data-types\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">More Data Types<a class=\"headerlink\" href=\"#more-data-types\" title=\"Permalink to this heading\">#</a></h2><p>In addition to strings, and integers, we need variables from the <a class=\"reference internal\" href=\"glossary.html#term-Floating-Point-Number-Types\"><span class=\"xref std std-term\">floating-point number types</span></a> and the <a class=\"reference internal\" href=\"glossary.html#term-Char-Type\"><span class=\"xref std std-term\">char type</span></a>.</p>", "a[href=\"glossary.html#term-Floating-Point-Numbers\"]": "<dt id=\"term-Floating-Point-Numbers\">Floating-Point Numbers</dt><dd><p>Numbers with a decimal point. Represented in code by the addition of <code class=\"docutils literal notranslate\"><span class=\"pre\">.0</span></code> to whole numbers.</p></dd>", "a[href=\"#exampleb3\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleb3\">\n<p class=\"admonition-title\">Code Example: Strings </p>\n<section id=\"code_example-content\">\n<p>Try the following Code and complete the exercise.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"linenos\">2</span><span class=\"o\">**!!</span><span class=\"w\"> </span><span class=\"n\">Insert</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">library</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"> </span><span class=\"o\">!!**</span>\n<span class=\"linenos\">3</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"linenos\">4</span><span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Fish\"</span><span class=\"p\">;</span>\n<span class=\"linenos\">5</span><span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"linenos\">6</span><span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"linenos\">7</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">!</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"exercise dropdown admonition\" id=\"jupyternotebooks/basic_ideas_and_definitons-exercise-9\">\n<p class=\"admonition-title\">Exercise</p>\n<section id=\"exercise-content\">\n<ul class=\"simple\">\n<li><p>Add a second variable, <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code>, of value \u201c-fingers\u201d.</p></li>\n<li><p>Output the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">+</span> <span class=\"pre\">b</span></code> again.</p></li>\n</ul>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/basic_ideas_and_definitons-code_explanation-10\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleb3\"> Code Example: Strings </a></p>\n<section id=\"code_explanation-content\">\n<p>If done correctly, you will have demonstrated that <code class=\"docutils literal notranslate\"><span class=\"pre\">+</span></code> operator behaves differently when used with different data types.</p>\n<p>For a <a class=\"reference internal\" href=\"glossary.html#term-Numeric-Data-Type\"><span class=\"xref std std-term\">numeric data type</span></a> it performs \u2018addition\u2019, but for the <a class=\"reference internal\" href=\"glossary.html#term-String-Data-Type\"><span class=\"xref std std-term\">string data type</span></a> it performs <a class=\"reference internal\" href=\"glossary.html#term-Concatenation\"><span class=\"xref std std-term\">concatenation</span></a>.</p>\n</section>\n</div>\n</section>\n</div></section>\n</div>", "a[href=\"selection_and_iteration.html#selection\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Selection<a class=\"headerlink\" href=\"#selection\" title=\"Permalink to this heading\">#</a></h2><p>Selection statements conditonally change the control flow.</p><p>A decison is made to follow one of two possible flows, depending on whether a condition is found to be true or false at the time of checking.</p>", "a[href=\"glossary.html#term-Type\"]": "<dt id=\"term-Type\">Type</dt><dd><p>A type defines the proper use of a name or an expression.</p></dd>", "a[href=\"glossary.html#term-Variable\"]": "<dt id=\"term-Variable\">Variable</dt><dd><p>A variable is a named object, or a reference that is not a non-static data member, that is introduced by a declaration, in a scope.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
