selector_to_html = {"a[href=\"#continue\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Continue<a class=\"headerlink\" href=\"#continue\" title=\"Permalink to this heading\">#</a></h3><p><code class=\"docutils literal notranslate\"><span class=\"pre\">continue</span></code> causes the program to skip directly to the next iteration jumping over any remaining code statements in the current loop.</p>", "a[href=\"#break\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Break<a class=\"headerlink\" href=\"#break\" title=\"Permalink to this heading\">#</a></h3><p><code class=\"docutils literal notranslate\"><span class=\"pre\">break</span></code> - causes the program to break out of the nearest enclosing <a class=\"reference internal\" href=\"glossary.html#term-Switch-Statement\"><span class=\"xref std std-term\">switch statement</span></a> or <a class=\"reference internal\" href=\"glossary.html#term-Iteration-Statement\"><span class=\"xref std std-term\">iteration statement</span></a> and is used if the logical flow may require the program to leave the loop before the end.</p><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">break</span></code> statement is usually found as an option in a selection-statement within the loop.</p>", "a[href=\"#loop-exit\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Loop Exit<a class=\"headerlink\" href=\"#loop-exit\" title=\"Permalink to this heading\">#</a></h2><p>If the condition of an iteration statement is forgotten the loop will run until the program crashes - this can tie up a computer for a very long time.</p><p>Use <kbd class=\"kbd compound docutils literal notranslate\"><kbd class=\"kbd docutils literal notranslate\">Crtl</kbd>+<kbd class=\"kbd docutils literal notranslate\">Z</kbd></kbd> or <kbd class=\"kbd compound docutils literal notranslate\"><kbd class=\"kbd docutils literal notranslate\">Crtl</kbd>+<kbd class=\"kbd docutils literal notranslate\">C</kbd></kbd> to end a loop. <kbd class=\"kbd compound docutils literal notranslate\"><kbd class=\"kbd docutils literal notranslate\">Ctrl</kbd>+<kbd class=\"kbd docutils literal notranslate\">D</kbd></kbd> in Linux.</p>", "a[href=\"glossary.html#term-Iteration-Statement\"]": "<dt id=\"term-Iteration-Statement\">Iteration Statement</dt><dd><p>Iterations statements include the <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code>-statement, the <code class=\"docutils literal notranslate\"><span class=\"pre\">while</span></code>-statement and the <code class=\"docutils literal notranslate\"><span class=\"pre\">do</span></code>-statement; used to repeat the execution of a block of code until a condition is met or changes.</p></dd>", "a[href=\"#goto\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Goto<a class=\"headerlink\" href=\"#goto\" title=\"Permalink to this heading\">#</a></h3><p><code class=\"docutils literal notranslate\"><span class=\"pre\">goto</span></code> statements are best avoided in most programming languages. Code has a simpler structure, and is more easily understood without the use of <code class=\"docutils literal notranslate\"><span class=\"pre\">goto</span></code> .</p>", "a[href=\"#my-fig-ref-t1\"]": "<figure class=\"align-default\" id=\"my-fig-ref-t1\">\n<img alt=\"../_images/programmingloops.svg\" src=\"../_images/programmingloops.svg\"/><figcaption>\n<p><span class=\"caption-number\">Fig. 1 </span><span class=\"caption-text\">Iteration Methods</span><a class=\"headerlink\" href=\"#my-fig-ref-t1\" title=\"Permalink to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"glossary.html#term-Switch-Statement\"]": "<dt id=\"term-Switch-Statement\">Switch Statement</dt><dd><p>A selection control structure. Executes one of several possible code-blocks by checking an expression against a list of possible cases. Hierarchical, like an <code class=\"docutils literal notranslate\"><span class=\"pre\">if-else-if</span></code> ladder, the lower cases are only checked if higher cases do not match. Default code-block optionally executed if no cases match.</p></dd>", "a[href=\"#my-fig-ref-t2\"]": "<figure class=\"align-default\" id=\"my-fig-ref-t2\">\n<img alt=\"../_images/WhileLoopExample.svg\" src=\"../_images/WhileLoopExample.svg\"/><figcaption>\n<p><span class=\"caption-number\">Fig. 2 </span><span class=\"caption-text\">Iteration Methods</span><a class=\"headerlink\" href=\"#my-fig-ref-t2\" title=\"Permalink to this image\">#</a></p>\n</figcaption>\n</figure>", "a[href=\"#while-loops\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">While Loops<a class=\"headerlink\" href=\"#while-loops\" title=\"Permalink to this heading\">#</a></h1><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">while</span></code> statement will repeatedly execute a sequence of code statements until a condition becomes false.</p><p>The conditional expression in the while-statement is evaluated before each execution - alternatively the <code class=\"docutils literal notranslate\"><span class=\"pre\">do-while</span></code> statement guarantees the code-block is executed at least once by not checking the condition until after the first execution.</p>", "a[href=\"#my-fig-ref-t3\"]": "<figure class=\"align-default\" id=\"my-fig-ref-t3\">\n<img alt=\"../_images/WhileLoopGeneral.svg\" src=\"../_images/WhileLoopGeneral.svg\"/><figcaption>\n<p><span class=\"caption-number\">Fig. 3 </span><span class=\"caption-text\">Iteration Methods</span><a class=\"headerlink\" href=\"#my-fig-ref-t3\" title=\"Permalink to this image\">#</a></p>\n</figcaption>\n</figure>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
