selector_to_html = {"a[href=\"glossary.html#term-Empty-Statement\"]": "<dt id=\"term-Empty-Statement\">Empty Statement</dt><dd><p>A statement that consists of only a semicolon <code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code>. It does nothing and is often referred to as a <a class=\"reference internal\" href=\"#term-Null-Statement\"><span class=\"xref std std-term\">null statement</span></a>. Empty statements are used where the syntax requires a statement, but the contents are optionally not required, to provide an empty body to a <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">while</span></code> loop, or to carry a label at the end of a compound statement.</p></dd>", "a[href=\"glossary.html#term-For-loop\"]": "<dt id=\"term-For-loop\">For-loop</dt><dd><p>Common name for the for-statement.</p></dd>", "a[href=\"#examples12\"]": "<div class=\"code_example dropdown admonition\" id=\"examples12\">\n<p class=\"admonition-title\">Code Example: Unconventional Arguments </p>\n<section id=\"code_example-content\">\n<p>Try this code\u2026</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Begin Loop </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Iteration\"</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span>\n<span class=\"w\">            </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"... Ended by Break! </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/for_loops-code_explanation-12\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examples12\"> Code Example: Unconventional Arguments </a></p>\n<section id=\"code_explanation-content\">\n<p>In this example, the first argument only outputs \u201cbegin loop\u201d.</p>\n<p>Since std::cout returns a reference to the output stream, which evaluates to true, the loop continues unless explicitly terminated i.e. by <code class=\"docutils literal notranslate\"><span class=\"pre\">break</span></code> .</p>\n<p>The final statement includes an increment expression inside an output steam statement.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Loop-Variable\"]": "<dt id=\"term-Loop-Variable\">Loop-Variable</dt><dd><p>Variable declared within the for-statement argument. May be used as a local variable and cannot be shadowed.</p></dd>", "a[href=\"#examples1\"]": "<div class=\"code_example dropdown admonition\" id=\"examples1\">\n<p class=\"admonition-title\">Code Example: The for-statement </p>\n<section id=\"code_example-content\">\n<p>Start the live code editor, complete the code, and run the finished program\u2026</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"codes1\">\n<div class=\"code-block-caption\"><span class=\"caption-number\">Listing 2 </span><span class=\"caption-text\">Simple for-statement Example</span><a class=\"headerlink\" href=\"#codes1\" title=\"Permalink to this code\">#</a></div>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"hll\"><span class=\"linenos\">2</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</span><span class=\"linenos\">3</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n<p>The highlighted code statement will be executed repeatedly - the number of iterations depends on the loop-variable and the loop-condition.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">...</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanations1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examples1\"> Code Example: The for-statement </a></p>\n<section id=\"code_explanation-content\">\n<div class=\"sd-card sd-sphinx-override sd-mb-3 sd-shadow-sm docutils\">\n<div class=\"sd-card-body docutils\">\n<p class=\"sd-card-text\">This example shows the most common syntax pattern used in a for-statement:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">**</span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">statements</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">executed</span><span class=\"w\"> </span><span class=\"n\">each</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">loop</span><span class=\"w\"> </span><span class=\"n\">runs</span><span class=\"w\"> </span><span class=\"n\">go</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">**</span><span class=\"w\"> </span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p class=\"sd-card-text\">The 3 terms in parentheses, semicolon delimited, control the operation of the for-loop.</p>\n</div>\n</div>\n<div class=\"sd-card sd-sphinx-override sd-mb-3 sd-shadow-sm docutils\">\n<div class=\"sd-card-body docutils\">\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p class=\"sd-card-text\">The first argument is the <strong>for-statement initialiser</strong>, which declares the name of a <a class=\"reference internal\" href=\"glossary.html#term-Loop-Variable\"><span class=\"xref std std-term\">loop-variable</span></a> <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> and initialises it with value <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>.</p>\n<p class=\"sd-card-text\">Loop-variables are local to their for-statement and can be used in the code-block, but no other variable called <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> may be used inside the for-statement\u2019s code-block unless they are accessed using <code class=\"docutils literal notranslate\"><span class=\"pre\">::</span></code></p>\n<p class=\"sd-card-text\">The loop-variable is not required to be an integer, and it does not have to be used to control the loop.</p>\n</div>\n</div>\n<div class=\"sd-card sd-sphinx-override sd-mb-3 sd-shadow-sm docutils\">\n<div class=\"sd-card-body docutils\">\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p class=\"sd-card-text\">The second argument is the <strong>for-statement condition</strong>.</p>\n<p class=\"sd-card-text\">The condition is tested before every iteration - if the condition is true the code-block is executed - the first time the condition evaluates to false, the program exits the for-loop and continues to the next statements.</p>\n<p class=\"sd-card-text\">The condition must be an expression that returns a Boolean, and it must be true on the first loop - or the program exits the for-statement immediately.</p>\n<p class=\"sd-card-text\">If the condition is empty, it evaluates to <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> and the loop runs.</p>\n</div>\n</div>\n<div class=\"sd-card sd-sphinx-override sd-mb-3 sd-shadow-sm docutils\">\n<div class=\"sd-card-body docutils\">\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p class=\"sd-card-text\">The third argument, in this example, is the <strong>for-statement increment</strong>.</p>\n<p class=\"sd-card-text\"><em><strong>After</strong></em> executing the for-statement\u2019s code block, the loop-variable is increased or decreased according to this instruction.</p>\n</div>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#forever\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Forever<a class=\"headerlink\" href=\"#forever\" title=\"Permalink to this heading\">#</a></h2><p>The for-statement parentheses may not be empty - the compiler will not permit it.</p><p>The minimum argument to a for-statement is <code class=\"docutils literal notranslate\"><span class=\"pre\">(;;)</span></code> .</p>", "a[href=\"glossary.html#term-Truthy-Expressions\"]": "<dt id=\"term-Truthy-Expressions\">Truthy Expressions</dt><dd><p>Expressions that evaluate to true in a boolean context: non-zero values, non-null pointers, non-empty containters/objects and all the usual comparision and logical expressions.</p></dd>", "a[href=\"#examples7\"]": "<div class=\"code_example dropdown admonition\" id=\"examples7\">\n<p class=\"admonition-title\">Code Example: Auto </p>\n<section id=\"code_example-content\">\n<p>This example also demonstrates the use of iterators to traverse a vector.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;typeinfo&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;vector&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">myVector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"s\">\"Around\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"the \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"rugged\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"rock\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"the\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"ragged\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"rascal\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"ran\"</span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">myVector</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"p\">(</span><span class=\"n\">myVector</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">itr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">myVector</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"k\">typeid</span><span class=\"p\">(</span><span class=\"n\">itr</span><span class=\"p\">).</span><span class=\"n\">name</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">itr</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/for_loops-code_explanation-18\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examples7\"> Code Example: Auto </a></p>\n<section id=\"code_explanation-content\">\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">itr</span></code> is given type <code class=\"docutils literal notranslate\"><span class=\"pre\">iterator</span></code> because the <code class=\"docutils literal notranslate\"><span class=\"pre\">begin()</span></code> returns an iterator.</p>\n<p><a class=\"reference internal\" href=\"glossary.html#term-Iterators\"><span class=\"xref std std-term\">Iterators</span></a> are similar to pointers - covered in week 3. Adding \u20181\u2019 to an iterator causes it to refer to the next element of the vector.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">*itr</span></code> gives the value of the element that <code class=\"docutils literal notranslate\"><span class=\"pre\">itr</span></code> references.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#for-statement-multiple-loop-variables\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">For-statement - Multiple Loop-Variables<a class=\"headerlink\" href=\"#for-statement-multiple-loop-variables\" title=\"Permalink to this heading\">#</a></h2><p>The for-statement can initialise more than one loop-variable, which may all be used in the loop-condition, and included in the final expression e.g. multiple variables are incremented.</p>", "a[href=\"#using-auto\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">auto</span></code><a class=\"headerlink\" href=\"#using-auto\" title=\"Permalink to this heading\">#</a></h2><p>The correct type to use for the loop-variable of a for-statement may not always be obvious, so using <code class=\"docutils literal notranslate\"><span class=\"pre\">auto</span></code> is often helpful:</p>", "a[href=\"#range-for-traversing-a-vector\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Range-For: Traversing a Vector<a class=\"headerlink\" href=\"#range-for-traversing-a-vector\" title=\"Permalink to this heading\">#</a></h2><p>A variant of the for-statement is the range-based for-statement or range-for loop, which is used to iterate over a range.</p><p>A range is defined as anything that you can iterate through e.g. arrays or containers like std::vector that have member functions <code class=\"docutils literal notranslate\"><span class=\"pre\">begin()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">end()</span></code>.</p>", "a[href=\"#comparison-to-while-loops-and-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Comparison to While Loops and Functions<a class=\"headerlink\" href=\"#comparison-to-while-loops-and-functions\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"glossary.html#term-Iterators\"]": "<dt id=\"term-Iterators\">Iterators</dt><dd><p>Iterators are objects that act as pointers to elements within a container (arrays, vectors, lists, etc.) making it simple to traverse and manipulate the elements of a container without exposing the underlying structure e.g. the user may not need to know the number of elements in advance, or the type of container. Some functions specifically require iterators, which are most easily produced in these cases by another member function, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">begin()</span></code>.</p></dd>", "a[href=\"glossary.html#term-Scope-Resolution-Operator\"]": "<dt id=\"term-Scope-Resolution-Operator\">Scope Resolution Operator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">::</span></code> - links an entity to its container; like a folder reference. The container defines the scope of the entity.</p></dd>", "a[href=\"glossary.html#term-For-Statement\"]": "<dt id=\"term-For-Statement\">For-Statement</dt><dd><p>Iteration statement - controls the repeated execution of code block while a condition is true. May use a loop variable and can run a final statement that may increment the loop variable.</p></dd>", "a[href=\"#iteration-over-the-elements-of-a-vector\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Iteration over the Elements of a <code class=\"docutils literal notranslate\"><span class=\"pre\">vector</span></code><a class=\"headerlink\" href=\"#iteration-over-the-elements-of-a-vector\" title=\"Permalink to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> does not allow you to print out all the values of an array or a vector simply by calling their identifier. Individual elements can be printed by index.</p><p>As a result, the for-statement is often used to traverse an array or vector and print the values of all their elements.</p>", "a[href=\"vector.html#vectors\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Vectors<a class=\"headerlink\" href=\"#vectors\" title=\"Permalink to this heading\">#</a></h1><p>In C++, there are a variety of objects that can be used to store multiple values of the same type in a single variable including <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;vector&gt;</span></code> , <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;array&gt;</span></code> , and simple arrays.</p><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;vector&gt;</span></code> library provides the most flexible method - a <code class=\"docutils literal notranslate\"><span class=\"pre\">std::vector</span></code> is a sequence of elements that can be accessed by their index using <code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> , the <a class=\"reference internal\" href=\"glossary.html#term-Subscript-Operator\"><span class=\"xref std std-term\">subscript operator</span></a>.</p>", "a[href=\"#codes1\"]": "<div class=\"literal-block-wrapper docutils container\" id=\"codes1\">\n<div class=\"code-block-caption\"><span class=\"caption-number\">Listing 2 </span><span class=\"caption-text\">Simple for-statement Example</span><a class=\"headerlink\" href=\"#codes1\" title=\"Permalink to this code\">#</a></div>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"hll\"><span class=\"linenos\">2</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</span><span class=\"linenos\">3</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>", "a[href=\"#for-loops\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">For loops<a class=\"headerlink\" href=\"#for-loops\" title=\"Permalink to this heading\">#</a></h1><p>The <a class=\"reference internal\" href=\"glossary.html#term-For-Statement\"><span class=\"xref std std-term\">for-statement</span></a> conditionally executes a statement, or a code-block, repeatedly. Also known as the <a class=\"reference internal\" href=\"glossary.html#term-For-loop\"><span class=\"xref std std-term\">for-loop</span></a>, it is the most frequently used and most important iteration control structure in C++.</p>", "a[href=\"#for-statements-more-on-the-syntax\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">For-Statements - More on the Syntax<a class=\"headerlink\" href=\"#for-statements-more-on-the-syntax\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"https://en.cppreference.com/w/cpp/language/for.html\"]": "<p>For-statements</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
