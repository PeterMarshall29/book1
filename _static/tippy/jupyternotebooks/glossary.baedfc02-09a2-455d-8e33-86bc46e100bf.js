selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/Camel_case\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/CamelCase_new.svg/330px-CamelCase_new.svg.png\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p>The writing format <b>camel case</b> is the practice of writing phrases without spaces or punctuation and with capitalized words. The format indicates the first word starting with either case, then the following words having an initial uppercase letter. Common examples include <i>YouTube</i>, <i>PowerPoint</i>, <i>HarperCollins</i>, <i>FedEx</i>, <i>iPhone</i>, <i>eBay</i>, and <i>LaGuardia</i>. Camel case is often used as a naming convention in computer programming. It is also sometimes used in online usernames such as <i>JohnSmith</i>, and to make multi-word domain names more legible, for example in promoting <i>EasyWidgetCompany.com</i>.</p>", "a[href^=\"https://en.wikipedia.org/wiki/Camel_case#\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/CamelCase_new.svg/330px-CamelCase_new.svg.png\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p>The writing format <b>camel case</b> is the practice of writing phrases without spaces or punctuation and with capitalized words. The format indicates the first word starting with either case, then the following words having an initial uppercase letter. Common examples include <i>YouTube</i>, <i>PowerPoint</i>, <i>HarperCollins</i>, <i>FedEx</i>, <i>iPhone</i>, <i>eBay</i>, and <i>LaGuardia</i>. Camel case is often used as a naming convention in computer programming. It is also sometimes used in online usernames such as <i>JohnSmith</i>, and to make multi-word domain names more legible, for example in promoting <i>EasyWidgetCompany.com</i>.</p>", "a[href=\"#term-Identifier\"]": "<dt id=\"term-Identifier\">Identifier</dt><dd><p>The</p></dd>", "a[href=\"#term-Free-store\"]": "<dt id=\"term-Free-store\">Free store</dt><dd><p><a class=\"reference internal\" href=\"#term-Memory\"><span class=\"xref std std-term\">memory</span></a> allocated by <code class=\"docutils literal notranslate\"><span class=\"pre\">new</span></code>; also called dynamic memory. Often standard library facilities, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">vector</span></code>, can be used to avoid explicit use of free store.</p></dd>", "a[href=\"#term-Syntax\"]": "<dt id=\"term-Syntax\">Syntax</dt><dd><p>The set of gramatical rules specifying how the text of a program must be composed. For example, specifying the form of a declaration or the form of a for-statement.</p></dd>", "a[href=\"#term-Camel-Case\"]": "<dt id=\"term-Camel-Case\">Camel Case</dt><dd><p><span class=\"xref std std-ref\">Camel Case</span><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Camel_case\">https://en.wikipedia.org/wiki/Camel_case</a> is one of the naming conventions used to improve the readability of code, whilst avoiding underscores.</p></dd>", "a[href=\"#term-Function\"]": "<dt id=\"term-Function\">Function</dt><dd><p>A named sequence of statements that can be invoked/called given arguments and that might return a value. The type of the function includes the number and types of argument and the type of the value returned, if any</p></dd>", "a[href=\"#glossary\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Glossary<a class=\"headerlink\" href=\"#glossary\" title=\"Link to this heading\">#</a></h1>", "a[href=\"#term-Memory-Management\"]": "<dt id=\"term-Memory-Management\">Memory Management</dt><dd><p>Methods of allocating and freeing memory. In C++ memory is either static, allocated on the stack, or allocated on the free store. When people talk about memory management, they usually think of free store or even specifically about garbage collection. Memory can often be effectively managed through standard library containers, such as vector or string, or through general resource management techniques.</p></dd>", "a[href=\"#term-Declaration\"]": "<dt id=\"term-Declaration\">Declaration</dt><dd><p>Declarations introduce names into a C++ program. Each kind of entity is declared differently.</p></dd>", "a[href=\"#term-Compiler\"]": "<dt id=\"term-Compiler\">Compiler</dt><dd><p>The part of a C++ implementation that produces object code from a translation unit</p></dd>", "a[href=\"#term-Definition\"]": "<dt id=\"term-Definition\">Definition</dt><dd><p>Definitions are declarations that are sufficient to use the entity identified by the name.</p></dd>", "a[href=\"#term-Object-file\"]": "<dt id=\"term-Object-file\">Object file</dt><dd><p>The file produced by a compiler - the result of compiling a source file.</p></dd>", "a[href=\"#term-Iteration\"]": "<dt id=\"term-Iteration\">Iteration</dt><dd><p>Iteration</p></dd>", "a[href=\"#term-Keyword\"]": "<dt id=\"term-Keyword\">Keyword</dt><dd><p>An identifier used by the C++ language standard. Keywords are reserved; they may not be declared as an identifier by a programmer. <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/keywords.html\">Keywords in the C++ language</a>.</p></dd>", "a[href=\"#term-Linkage\"]": "<dt id=\"term-Linkage\">Linkage</dt><dd><p>The process of merging code from separately compiled translation units into a program or part of a program.</p></dd>", "a[href=\"#term-Name\"]": "<dt id=\"term-Name\">Name</dt><dd><p>An identifier. (A minority of names are not identifiers - advanced).</p></dd>", "a[href=\"#term-Class\"]": "<dt id=\"term-Class\">Class</dt><dd><p>A</p></dd>", "a[href=\"#term-Static-Memory\"]": "<dt id=\"term-Static-Memory\">Static Memory</dt><dd><p>Memory allocated by the <a class=\"reference internal\" href=\"#term-Linker\"><span class=\"xref std std-term\">linker</span></a></p></dd>", "a[href=\"#term-Translation-unit\"]": "<dt id=\"term-Translation-unit\">Translation unit</dt><dd><p>Part of a program that can be separately compiled. Individual source or header files.</p></dd>", "a[href=\"#term-Objects\"]": "<dt id=\"term-Objects\">Objects</dt><dd></dd>", "a[href=\"#term-Variable\"]": "<dt id=\"term-Variable\">Variable</dt><dd><p>A variable is an object or a reference that is not a non-static data member, that is introduced by a declaration.</p></dd>", "a[href=\"#term-Stack\"]": "<dt id=\"term-Stack\">Stack</dt><dd></dd>", "a[href=\"#term-Type\"]": "<dt id=\"term-Type\">Type</dt><dd><p>A type defines the proper use of a name or an expression.</p></dd>", "a[href=\"#term-Linker\"]": "<dt id=\"term-Linker\">Linker</dt><dd><p>The part of the C++ implementation that merges the code generated from separately compiled translation units into a program. or part of a program</p></dd>", "a[href=\"#term-Memory\"]": "<dt id=\"term-Memory\">Memory</dt><dd><p>Definition needed</p></dd>", "a[href=\"https://en.cppreference.com/w/cpp/keywords.html\"]": "<p>Keywords in the C++ language</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 500],

            });
        };
    };
    console.log("tippy tips loaded!");
};
