selector_to_html = {"a[href=\"glossary.html#term-Scopes\"]": "<dt id=\"term-Scopes\">Scopes</dt><dd><p>The context in which a variable, function, or class is defined. May be global, namespace, class, function, block/local.</p></dd>", "a[href=\"glossary.html#term-Global-Scope\"]": "<dt id=\"term-Global-Scope\">Global Scope</dt><dd><p>Variables declared outside of all functions and classes have global scope. Global variables are accessible throughout the program, unless \u2018shadowed\u2019 by a local variable with the same name. Global variables are best avoided unless necessary because they may result in unintended consequences in execution.</p></dd>", "a[href=\"#global-variables\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Global Variables<a class=\"headerlink\" href=\"#global-variables\" title=\"Permalink to this heading\">#</a></h2><p>A variable with <a class=\"reference internal\" href=\"glossary.html#term-Global-Scope\"><span class=\"xref std std-term\">global scope</span></a> is declared outside of all functions and classes.</p><p>Global variables are accessible throughout the program, unless shadowed by a local variable with the same name.</p>", "a[href=\"glossary.html#term-Standard-Library-Facilities\"]": "<dt id=\"term-Standard-Library-Facilities\">Standard Library Facilities</dt><dd><p>The individual components of the Standard Library made available using the <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">&lt;&gt;</span></code> directive.</p></dd>", "a[href=\"#accessing-entities-in-a-namespace\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Accessing Entities in a Namespace<a class=\"headerlink\" href=\"#accessing-entities-in-a-namespace\" title=\"Permalink to this heading\">#</a></h2><p>There are three ways to access the entities contained within a namespace</p>", "a[href=\"#exampleg1\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleg1\">\n<p class=\"admonition-title\">Code Example: Scope </p>\n<section id=\"code_example-content\">\n<p>Run this code, then un-comment the <code class=\"docutils literal notranslate\"><span class=\"pre\">std::string</span></code> line and run it again.</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"c1\">//std::string x = \"hello\";</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/scope-code_explanation-1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleg1\"> Code Example: Scope </a></p>\n<section id=\"code_explanation-content\">\n<p>An object of integer type with <a class=\"reference internal\" href=\"glossary.html#term-Global-Scope\"><span class=\"xref std std-term\">global scope</span></a> called <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code> is declared:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p>The first time you run the program, this global variable x is accessed and printed.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"w\">  </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p>This statement declares a local variable also called <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code>.</p>\n<p>The print statement is only told to find a variable called <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code> - the variable named <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code> with the innermost scope is always selected.</p>\n<p>To print the global <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code> instead use <code class=\"docutils literal notranslate\"><span class=\"pre\">::x</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code></p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#hidden-or-shadowed-names\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Hidden or Shadowed Names<a class=\"headerlink\" href=\"#hidden-or-shadowed-names\" title=\"Permalink to this heading\">#</a></h2><p>Scope allows the definition of multiple entities with the same name.</p><p>The compiler associates each name with the version of the name in the current scope.</p>", "a[href=\"glossary.html#term-Scope-Resolution-Operator\"]": "<dt id=\"term-Scope-Resolution-Operator\">Scope Resolution Operator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">::</span></code> - links an entity to its container; like a folder reference. The container defines the scope of the entity.</p></dd>", "a[href=\"#exampleg2\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleg2\">\n<p class=\"admonition-title\">Code Example: Shadowing </p>\n<section id=\"code_example-content\">\n<p>Run this code and make changes\u2026</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Initialise local x</span>\n<span class=\"w\">    </span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"c1\">// Initialise global x</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\">     </span><span class=\"c1\">// Assign to local x</span>\n\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// print local x</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\">      </span><span class=\"c1\">// print global x</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/scope-code_explanation-3\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleg2\"> Code Example: Shadowing </a></p>\n<section id=\"code_explanation-content\">\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">void</span></code> is allowed in Visual Studio - replace with <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Standard-Library\"]": "<dt id=\"term-Standard-Library\">Standard Library</dt><dd><p>Collection of facilities (classes and functions) available for inclusion into C++ programmes \u2013 separated into namespaces.</p></dd>", "a[href=\"#shadowing\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Shadowing<a class=\"headerlink\" href=\"#shadowing\" title=\"Permalink to this heading\">#</a></h2><p>It is usually possible to use the same identifier more than once, provided each declaration has different scope.</p><p>An exception is the loop variable in a <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code> statement.</p>", "a[href=\"#namespace\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Namespace<a class=\"headerlink\" href=\"#namespace\" title=\"Permalink to this heading\">#</a></h2><p>Namespace is a language feature exclusively used to express scoping. A namespace is a named scope, which is a separate container for related entities (variables, functions, classes etc.).</p><p>Creating a namespace allows the programmer to write a part of a longer program separately and not worry about repeating a variable name.</p>", "a[href=\"#scope\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Scope<a class=\"headerlink\" href=\"#scope\" title=\"Permalink to this heading\">#</a></h1><p>Different distinguishable parts of a program\u2019s structure are called <a class=\"reference internal\" href=\"glossary.html#term-Scopes\"><span class=\"xref std std-term\">scopes</span></a>; for example, the statements inside different functions are said to have different scope.</p><p>The location of a declaration introduces the identified entity into the scope at that location.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
