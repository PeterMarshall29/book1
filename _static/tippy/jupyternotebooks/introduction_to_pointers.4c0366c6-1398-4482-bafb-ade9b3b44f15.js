selector_to_html = {"a[href=\"#pointers-and-booleans\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers and Booleans<a class=\"headerlink\" href=\"#pointers-and-booleans\" title=\"Permalink to this heading\">#</a></h2><p>A pointer can be implicitly converted to a <code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span></code>. A non-null pointer converts to true; pointers with the value <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span> </code>convert to <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code>.</p>", "a[href=\"#pointers-to-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers to Functions<a class=\"headerlink\" href=\"#pointers-to-functions\" title=\"Permalink to this heading\">#</a></h2><p>Like a (data) object, the code generated for a function body is placed in memory somewhere and therefore has a unique address associated with it and therefore we can also define a pointer to a function in a similar manner to a pointer to an object.  There are some differences however:</p><p>A pointer to function does not allow the code to be modified.</p>", "a[href=\"#pointers-and-references\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers and References<a class=\"headerlink\" href=\"#pointers-and-references\" title=\"Permalink to this heading\">#</a></h2><p>A suffix <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> after a type in a declaration/definition indicates you are creating a pointer to a variable of that type.</p><p>The prefix <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> before a pointer\u2019s identifier means \u201ccontents of\u201d \u2013 the value is the value of the object associated with the pointer</p>", "a[href=\"#pointer-expressions-and-arithmetic\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Expressions and Arithmetic<a class=\"headerlink\" href=\"#pointer-expressions-and-arithmetic\" title=\"Permalink to this heading\">#</a></h3><p>A limited set of arithmetic operations can be performed on pointers which are:</p><p>incremented ( ++ )\ndecremented ( \u2014 )\nan integer may be added to a pointer ( + or += )\nan integer may be subtracted from a pointer ( \u2013 or -= )\ndifference between two pointers (p1-p2)</p>", "a[href=\"#pointer-arithmetic-and-arrays\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Arithmetic and Arrays<a class=\"headerlink\" href=\"#pointer-arithmetic-and-arrays\" title=\"Permalink to this heading\">#</a></h2><p>The name of an array is also a pointer to the \ufb01rst element in the array.</p><p>Writing <code class=\"docutils literal notranslate\"><span class=\"pre\">myArray[3]</span></code> tells the compiler to return the element that is 3 away from the starting element of <code class=\"docutils literal notranslate\"><span class=\"pre\">myArray</span></code>.</p>", "a[href=\"#examplev1\"]": "<div class=\"code_example dropdown admonition\" id=\"examplev1\">\n<p class=\"admonition-title\">Code_Example: Introduction to Pointer and References </p>\n<section id=\"code_example-content\">\n<p>Run this code more than once.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">myVector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mf\">5.9</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mf\">1.1</span><span class=\"p\">,</span><span class=\"mf\">2.3</span><span class=\"p\">,</span><span class=\"mf\">4.5</span><span class=\"p\">,</span><span class=\"mf\">5.6</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">\t</span><span class=\"kt\">double</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">myPointerToV</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"n\">myPointerToV</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">myVector</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"w\">\t</span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">myPointerToV</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myPointerToV</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationv1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplev1\"> Code_Example: Introduction to Pointer and References </a></p>\n<section id=\"code_explanation-content\">\n<p>For a type <code class=\"docutils literal notranslate\"><span class=\"pre\">T</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">T*</span></code> is the type \u2018pointer to T\u2019.</p>\n<p>That is, a variable of type <code class=\"docutils literal notranslate\"><span class=\"pre\">T*</span></code> can hold the address of an object of type <code class=\"docutils literal notranslate\"><span class=\"pre\">T</span></code>.</p>\n<p>For example:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'a'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">p</span></code> holds the address of <code class=\"docutils literal notranslate\"><span class=\"pre\">c</span></code>; <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code> is the \u201caddress-of\u201d operator.</p>\n<p>The fundamental operation on a pointer is dereferencing, that is, referring to the object pointed to by the pointer.</p>\n<p>This operation is also called indirection. The dereferencing operator is (prefix) unary *. For example:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'a'</span><span class=\"p\">;</span>\n<span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// p holds the address of c; &amp; is the address-of operator</span>\n<span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// c2 == 'a'; * is the dereference operator</span>\n</pre></div>\n</div>\n<p>The object pointed to by <code class=\"docutils literal notranslate\"><span class=\"pre\">p</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">c</span></code>, and the value stored in <code class=\"docutils literal notranslate\"><span class=\"pre\">c</span></code> is \u2018a\u2019, so the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">*p</span></code> assigned to <code class=\"docutils literal notranslate\"><span class=\"pre\">c2</span></code> is \u2018a\u2019.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#pointer-arithmetic\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Arithmetic<a class=\"headerlink\" href=\"#pointer-arithmetic\" title=\"Permalink to this heading\">#</a></h3><p>Pointer arithmetic is a way of using subtraction and addition of pointers to move around between locations in memory, typically between array elements.</p><p>Adding an integer \u2018n\u2019 to a pointer produces a new pointer pointing to \u2018n\u2019 positions further down in memory.</p>", "a[href=\"#pointers-into-arrays\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers into Arrays<a class=\"headerlink\" href=\"#pointers-into-arrays\" title=\"Permalink to this heading\">#</a></h2><p>In C++, pointers and arrays are closely related. The name of an array can be used as a pointer to its initial element. For example:</p>", "a[href=\"#void\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Void<a class=\"headerlink\" href=\"#void\" title=\"Permalink to this heading\">#</a></h2><p>In low-level code, we occasionally need to store or pass along an address of a memory location without knowing what type of object is stored there.</p><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">void\u2217</span></code> is used for that purpose; you can read <code class=\"docutils literal notranslate\"><span class=\"pre\">void\u2217</span></code> as \u201cpointer to an object of unknown type\u201d.</p>", "a[href=\"#pointers\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers<a class=\"headerlink\" href=\"#pointers\" title=\"Permalink to this heading\">#</a></h1><p>A pointer should always point at an object, so that dereferencing it is valid. When we don\u2019t have an object to point to or if we need to represent the notion of \u201cno object available\u201d (e.g., for an end of a list), we give the pointer the value <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code> (the null pointer). There is only one nullptr shared by all pointer types:</p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">Nullptr</span></code> is of type <code class=\"docutils literal notranslate\"><span class=\"pre\">pointer</span></code>.</p>", "a[href=\"#nullptr\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code><a class=\"headerlink\" href=\"#nullptr\" title=\"Permalink to this heading\">#</a></h2><p>The literal <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code> represents the null pointer, that is, a pointer that does not point to an object. It can be assigned to any pointer type, but not to other built-in types:</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
