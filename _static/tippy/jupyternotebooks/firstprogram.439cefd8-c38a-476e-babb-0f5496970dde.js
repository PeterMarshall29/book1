selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program\"]": "<p>\nA <b>\"Hello, World!\" program</b> is usually a simple computer program that emits to the screen a message similar to \"Hello, World!\". A small piece of code in most general-purpose programming languages, this program is used to illustrate a language's basic syntax. Such a program is often the first written by a student of a new programming language, but it can also be used as a sanity check to ensure that the computer software intended to compile or run source code is correctly installed, and that its operator understands how to use it.</p>", "a[href^=\"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program#\"]": "<p>\nA <b>\"Hello, World!\" program</b> is usually a simple computer program that emits to the screen a message similar to \"Hello, World!\". A small piece of code in most general-purpose programming languages, this program is used to illustrate a language's basic syntax. Such a program is often the first written by a student of a new programming language, but it can also be used as a sanity check to ensure that the computer software intended to compile or run source code is correctly installed, and that its operator understands how to use it.</p>", "a[href=\"glossary.html#term-Header-Files\"]": "<dt id=\"term-Header-Files\">Header Files</dt><dd><p>DEF</p></dd>", "a[href=\"glossary.html#term-Keyword\"]": "<dt id=\"term-Keyword\">Keyword</dt><dd><p>An identifier used by the C++ language standard. Keywords are reserved; they may not be declared as an identifier by a programmer. <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/keywords.html\">Keywords in the C++ language</a>.</p></dd>", "a[href=\"#first-c-program\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">First C++ Program<a class=\"headerlink\" href=\"#first-c-program\" title=\"Permalink to this heading\">#</a></h1><p>The first program that most people ever write prints \u201cHello, World!\u201d the first program that most people ever write, because it is traditionally the first one taught - printing words to screen is as simple as it gets, but proves the software is correctly installed.</p>", "a[href=\"glossary.html#term-Standard-Library-Facilities\"]": "<dt id=\"term-Standard-Library-Facilities\">Standard Library Facilities</dt><dd><p>The individual components of the Standard Library, made available using the <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">&lt;&gt;</span></code> syntax.</p></dd>", "a[href=\"glossary.html#term-Function\"]": "<dt id=\"term-Function\">Function</dt><dd><p>A named sequence of statements that can be invoked/called by a program, optionally using arguments supplied by the function call, to optionall return a value to the program. The type of the function includes the number and types of argument and the type of the value returned. Functions are useful because they are reusable, making code more efficient to write and execute.</p></dd>", "a[href=\"the_cpp_language.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The C++ Language<a class=\"headerlink\" href=\"#the-c-language\" title=\"Permalink to this heading\">#</a></h1><p>The <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/C%2B%2B\">C++</a> language is one of the most powerful programming languages available today. It was created by Danish computer scientist <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bjarne_Stroustrup\">Bjarne_Stroustrup</a> and first released in 1985.</p><p>C++ is widely used, high level, general purpose language that can write code to runs from the glass (building apps with graphical user interfaces) down to the metal (direct control of hardware and manipulation of memory).</p>", "a[href=\"glossary.html#term-Comments\"]": "<dt id=\"term-Comments\">Comments</dt><dd><p>Comments are text in a computer program that is only intended as a note to the progammer. Comments are useful as in-code documentation, and also allow part of program to be hidden from the compiler temporarily during development.</p></dd>", "a[href=\"#exercisea1\"]": "<div class=\"exercise dropdown admonition\" id=\"exercisea1\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 1 </span></p>\n<section id=\"exercise-content\">\n<p>Try making the following changes to the above code - run the code after each change and note what happens.</p>\n<ul class=\"simple\">\n<li><p>Remove the semicolon in line 3 or 4.</p></li>\n<li><p>Remove <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> from line 3.</p></li>\n<li><p>Replace the angle brackets <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&gt;</span></code> in the first line with speechmarks <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>.</p></li>\n<li><p>Change the returned value from 0 to 1, and then to a letter.</p></li>\n<li><p>Remove the return line.</p></li>\n<li><p>Add some whitespace (spaces) to the code.</p></li>\n<li><p>Change some letters to capitals</p></li>\n</ul>\n<div class=\"solution hint dropdown admonition\" id=\"solutiona1\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exercisea1\"> Exercise 1</a></p>\n<section id=\"solution-content\">\n<ul class=\"simple\">\n<li><p>A semicolon is required need at the end of each statement \u2013 exceptions <code class=\"docutils literal notranslate\"><span class=\"pre\">include</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">includes</span></code> and after <code class=\"docutils literal notranslate\"><span class=\"pre\">{</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">}</span></code>.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">cout</span></code> is not part of the <strong>c++ core language</strong> and comes instead from the <strong>Standard Library</strong>.</p></li>\n</ul>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> denotes the namespace that <code class=\"docutils literal notranslate\"><span class=\"pre\">cout</span></code> belongs to (similar to a folder designation, provided you have included it).</p>\n<ul class=\"simple\">\n<li><p>To include components of the standard library angle brackets <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&gt;</span></code> are used, but we can also include additional code written by the programmer in <a class=\"reference internal\" href=\"header_files.html\"><span class=\"doc\">**header files**</span></a>, which are included using speechmarks <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>, i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">\"myheaderfile.h\"</span></code>.</p></li>\n<li><p>Any number you return is converted to an integer, so a float is fine, but a string literal will cause failure.\nThe returned value is reported to whoever called the function, in the case of main() the system is the caller. In linux the returned value is used to confirm successful termination, 0 indicated success \u2013 anything else failure.</p></li>\n<li><p>This is usually only possible in the main function, but not on every platform.</p></li>\n<li><p>Whitespace is ignored in C++ - not true in other languages!</p></li>\n<li><p>C++ is <a class=\"reference internal\" href=\"glossary.html#term-Case-Sensitive\"><span class=\"xref std std-term\">case sensitive</span></a>.</p></li>\n</ul>\n</section>\n</div>\n</section>\n</div>", "a[href=\"introduction_to_functions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Functions<a class=\"headerlink\" href=\"#functions\" title=\"Permalink to this heading\">#</a></h1><p>Programmers often want to use the same lines of code repeatedly in the same program, and possibly in a lot of different programs.</p><p>A sequence of statements (code block) can be made reusable by encapsulating them into a function.</p>", "a[href=\"glossary.html#term-Case-Sensitive\"]": "<dt id=\"term-Case-Sensitive\">Case Sensitive</dt><dd><p>Upper and lower case letters are iterprete as different symbols. If a keyword is all lower case, you must use all lower case. The name <code class=\"docutils literal notranslate\"><span class=\"pre\">myFunction</span></code> is distinct from the name <code class=\"docutils literal notranslate\"><span class=\"pre\">myfunction</span></code>. Adopting a strict convention for naming, such as <a class=\"reference internal\" href=\"#term-Camel-Case\"><span class=\"xref std std-term\">camel case</span></a> makes it easier to avoid this mistake.</p></dd>", "a[href=\"#c-comments\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">C++ Comments<a class=\"headerlink\" href=\"#c-comments\" title=\"Permalink to this heading\">#</a></h2><p><a class=\"reference internal\" href=\"glossary.html#term-Comments\"><span class=\"xref std std-term\">Comments</span></a> are plain text added to a C++ source or header file that will be ignored by the compiler.</p><p>Comments are used are notes and reminders for people who are trying to understand and use the code.</p>", "a[href=\"glossary.html#term-Scope-Resolution-Operator\"]": "<dt id=\"term-Scope-Resolution-Operator\">Scope Resolution Operator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">::</span></code> -  links an entity to its container; like a folder reference.</p></dd>", "a[href=\"glossary.html#term-Standard-Library-Facility\"]": "<dt id=\"term-Standard-Library-Facility\">Standard Library Facility</dt><dd><p>The individual components of the Standard Library, made available using the <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">&lt;&gt;</span></code> syntax.</p></dd>", "a[href=\"glossary.html#term-Literals\"]": "<dt id=\"term-Literals\">Literals</dt><dd><p>Literals are the tokens of a C++ program that represent constant values embedded in the source code.</p></dd>", "a[href=\"glossary.html#term-Escape-Sequence\"]": "<dt id=\"term-Escape-Sequence\">Escape Sequence</dt><dd><p>Used in programming languages to represent special characters within a string or character literal. They are identified by the prefix backslash <code class=\"docutils literal notranslate\"><span class=\"pre\">\\</span></code>. Examples are <code class=\"docutils literal notranslate\"><span class=\"pre\">\\n</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">\\t</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">\\\\</span></code> to represent \u2018newline\u2019, \u2018tab\u2019 - and to identify that a backslash is just a back slash literal.</p></dd>", "a[href=\"types.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Types in C++<a class=\"headerlink\" href=\"#types-in-c\" title=\"Permalink to this heading\">#</a></h1><p>The <strong>type</strong> of a variable defines its properties, the rules it must obey, and the set of operators and functions availabe to members of each type.</p><p>For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">+</span></code> behaves differently when used an an <a class=\"reference internal\" href=\"glossary.html#term-Infix-Operator\"><span class=\"xref std std-term\">infix operator</span></a> between two integers, compared to between two strings.</p>", "a[href=\"#codea1\"]": "<div class=\"literal-block-wrapper docutils container\" id=\"codea1\">\n<div class=\"code-block-caption\"><span class=\"caption-number\">Listing 1 </span><span class=\"caption-text\">Hello World program</span><a class=\"headerlink\" href=\"#codea1\" title=\"Permalink to this code\">#</a></div>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"linenos\">2</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"hll\"><span class=\"linenos\">3</span><span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</span><span class=\"linenos\">4</span><span class=\"w\">\t</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"linenos\">5</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>", "a[href=\"#exercisea2\"]": "<div class=\"exercise dropdown admonition\" id=\"exercisea2\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 2 </span></p>\n<section id=\"exercise-content\">\n<p>This code is incorrect. Correct the mistakes in the syntax so that the code will run and print your name.</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"s\">\"iostreams\"</span>\n<span class=\"n\">main</span><span class=\"p\">(){</span>\n<span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"my name is, </span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"s\">\"Peter\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"solution note dropdown admonition\" id=\"solutiona2\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exercisea2\"> Exercise 2</a></p>\n<section id=\"solution-content\">\n<p>pre comment</p>\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Put your name here!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"header_files.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Header Files<a class=\"headerlink\" href=\"#header-files\" title=\"Permalink to this heading\">#</a></h1><p>Sometime a pcp.h will be created in the project \u2013 this is a precompiled header file.\nTo create your own header file. Click in headers, new module, header file.\nThe new file will contain, #pragma once, which is an instruction that this file is only compiled the first time it is used, saving time in future builds.\nNow add:\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nAnd replace  #include <iostream> with  #include #include \u201cMyHeader.h\u201d.</iostream></cmath></algorithm></vector></string></iostream></p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
