selector_to_html = {"a[href=\"glossary.html#term-Loop-Variable\"]": "<dt id=\"term-Loop-Variable\">Loop-Variable</dt><dd><p>Variable declared within the for-statement argument. May be used as a local variable and cannot be shadowed.</p></dd>", "a[href=\"#for-statement-multiple-loop-variables\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">For-statement - Multiple Loop-Variables<a class=\"headerlink\" href=\"#for-statement-multiple-loop-variables\" title=\"Permalink to this heading\">#</a></h2><p>The for-statement can only initialise more than one loop-variable, the final expression can affect both, and the condition can take account of both values. For example:</p>", "a[href=\"#using-auto\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">auto</span></code><a class=\"headerlink\" href=\"#using-auto\" title=\"Permalink to this heading\">#</a></h2><p>It is not always obvious what is the right type to use for a controlled variable in a for-statement, so <code class=\"docutils literal notranslate\"><span class=\"pre\">auto</span></code> often comes in handy:</p>", "a[href=\"#codes1\"]": "<div class=\"literal-block-wrapper docutils container\" id=\"codes1\">\n<div class=\"code-block-caption\"><span class=\"caption-number\">Listing 2 </span><span class=\"caption-text\">For Loop Template</span><a class=\"headerlink\" href=\"#codes1\" title=\"Permalink to this code\">#</a></div>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"hll\"><span class=\"linenos\">2</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</span><span class=\"linenos\">3</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>", "a[href=\"glossary.html#term-For-Statement\"]": "<dt id=\"term-For-Statement\">For-Statement</dt><dd><p>Iteration statement - controls the repeated execution of code block while a condition is true. May use a loop variable and can run a final statement that may increment the loop variable.</p></dd>", "a[href=\"#range-for-traversing-a-vector\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Range-For: Traversing a Vector<a class=\"headerlink\" href=\"#range-for-traversing-a-vector\" title=\"Permalink to this heading\">#</a></h2><p>The range for any vector is the half-open sequence [0 : vectorName.size() ) meaning 0 is included, but the last element is <code class=\"docutils literal notranslate\"><span class=\"pre\">vectorName.size()-1</span></code> .</p><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">range-for</span></code> loop uses this half-open sequence.</p>", "a[href=\"#forever\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Forever<a class=\"headerlink\" href=\"#forever\" title=\"Permalink to this heading\">#</a></h2><p>The for-statement parentheses may not be empty - the compiler will not permit it.</p><p>The minimum argument to a for-statement is <code class=\"docutils literal notranslate\"><span class=\"pre\">(;;)</span></code>.</p>", "a[href=\"vector.html#vectors\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Vectors<a class=\"headerlink\" href=\"#vectors\" title=\"Permalink to this heading\">#</a></h1><p>There are several ways to store multiple values in a single variable. <vector>, <array>, and built-in arrays.</array></vector></p><p>The <vector> library provides the most flexible method.</vector></p>", "a[href=\"#examples1\"]": "<div class=\"code_example dropdown admonition\" id=\"examples1\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Code Example 25 </span></p>\n<section id=\"code_example-content\">\n<p>Start the live code editor, complete the program, and run this code.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"codes1\">\n<div class=\"code-block-caption\"><span class=\"caption-number\">Listing 2 </span><span class=\"caption-text\">For Loop Template</span><a class=\"headerlink\" href=\"#codes1\" title=\"Permalink to this code\">#</a></div>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"hll\"><span class=\"linenos\">2</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</span><span class=\"linenos\">3</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n<p>The highlighted code statements are repeated as many times as required by the <code class=\"docutils literal notranslate\"><span class=\"pre\">for-statement</span></code>.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">...</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>Because the for-statement <a class=\"reference internal\" href=\"glossary.html#term-Loop-Variable\"><span class=\"xref std std-term\">loop-variable</span></a> has been included in this statement, the value printed to the output stream will be different in every iteration.</p>\n<div class=\"code_explanation dropdown note admonition\" id=\"explanations1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examples1\"> Code Example 25</a></p>\n<section id=\"code_explanation-content\">\n<div class=\"sd-card sd-sphinx-override sd-mb-3 sd-shadow-sm docutils\">\n<div class=\"sd-card-body docutils\">\n<p class=\"sd-card-text\">The syntax for this example shows the most common pattern for a for-statement loop:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">**</span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">statements</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">executed</span><span class=\"w\"> </span><span class=\"n\">each</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">loop</span><span class=\"w\"> </span><span class=\"n\">runs</span><span class=\"w\"> </span><span class=\"n\">go</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">**</span><span class=\"w\"> </span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p class=\"sd-card-text\">The 3 semicolon delimited terms in parentheses control the operation of the for-loop.</p>\n</div>\n</div>\n<div class=\"sd-card sd-sphinx-override sd-mb-3 sd-shadow-sm docutils\">\n<div class=\"sd-card-body docutils\">\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p class=\"sd-card-text\">The first argument is the for-statement initialiser.</p>\n<p class=\"sd-card-text\">This statement names a loop-variable <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> and initialises it with a value of <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>.</p>\n<p class=\"sd-card-text\">The loop variable is local to the for-statement and can be used in the code-block. No other variable called <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> may be used inside the for-statement code block.</p>\n</div>\n</div>\n<div class=\"sd-card sd-sphinx-override sd-mb-3 sd-shadow-sm docutils\">\n<div class=\"sd-card-body docutils\">\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p class=\"sd-card-text\">The second argument is the for-statement condition.</p>\n<p class=\"sd-card-text\">The for-loop runs until this condition becomes false, repeating the code-block each time.</p>\n<p class=\"sd-card-text\">The condition must be an expression that returns a Boolean, and it must be true on the first loop - or the program exits the loop.</p>\n<p class=\"sd-card-text\">If the condition is empty, it evaluates to <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code>, so the loop runs.</p>\n</div>\n</div>\n<div class=\"sd-card sd-sphinx-override sd-mb-3 sd-shadow-sm docutils\">\n<div class=\"sd-card-body docutils\">\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p class=\"sd-card-text\">The third and final argument is the for-statement increment.</p>\n<p class=\"sd-card-text\"><em><strong>After</strong></em> executing the for-statement\u2019s code block, the loop-variable is increased or decreased according to this instruction. The increment/decrement can be by any constant amount.</p>\n</div>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#for-statements-more-on-the-syntax\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">For-Statements - More on the Syntax<a class=\"headerlink\" href=\"#for-statements-more-on-the-syntax\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"#iteration-with-vector\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Iteration with <code class=\"docutils literal notranslate\"><span class=\"pre\">vector</span></code><a class=\"headerlink\" href=\"#iteration-with-vector\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"#single-commands\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Single Commands<a class=\"headerlink\" href=\"#single-commands\" title=\"Permalink to this heading\">#</a></h2><p>If there is only a single statement i.e. not a whole code block of statements, then the statement can simply be placed after for-statement, and closed with <code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code>.</p>", "a[href=\"#for-loops\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">For loops<a class=\"headerlink\" href=\"#for-loops\" title=\"Permalink to this heading\">#</a></h1><p>The <a class=\"reference internal\" href=\"glossary.html#term-For-Statement\"><span class=\"xref std std-term\">for-statement</span></a> conditionally executes a statement, or code block, repeatedly; also known as the <a class=\"reference internal\" href=\"glossary.html#term-For-loop\"><span class=\"xref std std-term\">for-loop</span></a>, and is the most frequently used and important iteration control structure in C++.</p>", "a[href=\"glossary.html#term-For-loop\"]": "<dt id=\"term-For-loop\">For-loop</dt><dd><p>Common name for the for-statement.</p></dd>", "a[href=\"#comparison-to-while-loops-and-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Comparison to While Loops and Functions<a class=\"headerlink\" href=\"#comparison-to-while-loops-and-functions\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"https://en.cppreference.com/w/cpp/language/for.html\"]": "<p>For-statements</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
