selector_to_html = {"a[href=\"#input-and-output\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Input and Output<a class=\"headerlink\" href=\"#input-and-output\" title=\"Permalink to this heading\">#</a></h1><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;iostream&gt;</span></code> component of the <a class=\"reference internal\" href=\"glossary.html#term-Standard-Library\"><span class=\"xref std std-term\">standard library</span></a> provides the tools used to interact with programmes, using the keyboard and computer dispay for input and output.</p><p>These basic functions are vital to learning programming because they enable the programmer to follow the progress of a programme\u2019s execution - without some output to the display you will have litle insight into what the program is doing.</p>", "a[href=\"#formatting-output\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Formatting Output<a class=\"headerlink\" href=\"#formatting-output\" title=\"Permalink to this heading\">#</a></h2><p>The default output for a floating point number is 6 digits. The number is rounded to give the best approximation that can be printed with 6 digits.</p><p>This may not be sufficient, if you want to spot a rounding or truncation error.</p>", "a[href=\"#new-print-c-23\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">New Print() C++23<a class=\"headerlink\" href=\"#new-print-c-23\" title=\"Permalink to this heading\">#</a></h2><p>Prints, <code class=\"docutils literal notranslate\"><span class=\"pre\">Hello</span> <span class=\"pre\">C++23!</span></code></p>", "a[href=\"#std-endl-vs-n\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">std::endl</span></code> vs <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\n'</span></code><a class=\"headerlink\" href=\"#std-endl-vs-n\" title=\"Permalink to this heading\">#</a></h2><p>It is better to use <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\n'</span></code> to instuct a newline.</p><p>Using std::endl is often inefficient because it flushes the input buffer - which we may not want to do, and which is alos a slow process that may be repeated many times.</p>", "a[href=\"glossary.html#term-Standard-Library\"]": "<dt id=\"term-Standard-Library\">Standard Library</dt><dd><p>Collecton of facilities available for inclusion into C++ programs</p></dd>", "a[href=\"#getline\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">getline()<a class=\"headerlink\" href=\"#getline\" title=\"Permalink to this heading\">#</a></h2><p>An alternative to <code class=\"docutils literal notranslate\"><span class=\"pre\">cin</span></code> is to use getline(), which will ignore whitespace and collecte every character before <kbd class=\"kbd docutils literal notranslate\">return</kbd> into a single string.</p><p>The downside is that you may need to split up the string later. See <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/io/basic_stringstream.html\"><sstream></sstream></a> for further information on how to separate a string.</p>", "a[href=\"#using-std-cout-with-vector\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;vector&gt;</span></code><a class=\"headerlink\" href=\"#using-std-cout-with-vector\" title=\"Permalink to this heading\">#</a></h2><p>template<typename t=\"\">\nstd::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const std::vector<t> &amp;v) {\nfor (const auto&amp; e : v)\ns &lt;&lt; std::setw(PRINT_WIDTH) &lt;&lt; e &lt;&lt; \u2019 \u2018;\nreturn s;\n}</t></typename></p>", "a[href=\"glossary.html#term-Type-System\"]": "<dt id=\"term-Type-System\">Type System</dt><dd><p>The set of rules prescribing how each object may be used according to their types.</p></dd>", "a[href=\"#examplec1\"]": "<div class=\"code_example dropdown admonition\" id=\"examplec1\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Code Example 6 </span></p>\n<section id=\"code_example-content\">\n<p>Type the following code into the empty code window below, add the missing programme statements, and run the completed code.</p>\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Please type your surname!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"linenos\">2</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"p\">;</span>\n<span class=\"linenos\">3</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"p\">;</span>\n<span class=\"linenos\">4</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"linenos\">5</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">!</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/input_and_output-code_explanation-1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplec1\"> Code_Example 6</a></p>\n<section id=\"code_explanation-content\">\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">cin</span></code> is the character input stream, pronounced \u2018see - in\u2019; used to read input from the keyboard.</p>\n<p>The input stream waits for the return key, taking any characters typed in before <kbd class=\"kbd docutils literal notranslate\">return</kbd></p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;&gt;</span></code> is the iostream input operator, also called the \u201cextraction\u201d operator - directs where the input goes to - a variable name usually.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"linenos\">2</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n<span class=\"linenos\">3</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"linenos\">4</span><span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"p\">;</span><span class=\"w\">    </span><span class=\"c1\">//Declares a variable of type string.</span>\n<span class=\"linenos\">5</span><span class=\"w\">  </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Please type your surname!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//This is a 'prompt'; a message to the user with instructions.</span>\n<span class=\"linenos\">6</span><span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"p\">;</span><span class=\"w\">\t\t</span><span class=\"c1\">//Character input stream, takes input from console when 'return' (aka 'newline') is pressed. </span>\n<span class=\"linenos\">7</span><span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"linenos\">8</span><span class=\"w\">\t</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"linenos\">9</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">\"Hello,</span> <span class=\"pre\">\"</span></code> is a string-literal. <code class=\"docutils literal notranslate\"><span class=\"pre\">Surname</span></code> is a named object of type <code class=\"docutils literal notranslate\"><span class=\"pre\">string</span></code>.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#print-debugging\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Print debugging<a class=\"headerlink\" href=\"#print-debugging\" title=\"Permalink to this heading\">#</a></h2><p>A good reason that <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> is taught before other IO methods is its simplicity - no, really!,</p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> automatically formats the printed text based on the variabale\u2019s type.</p>", "a[href=\"#examplec2\"]": "<div class=\"code_example dropdown admonition\" id=\"examplec2\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Code Example 7 </span></p>\n<section id=\"code_example-content\">\n<p>This code will work - try reversing the order of the extraction.</p>\n<div class=\"cell tag_remove-input tag_skip-execution docutils container\">\n</div>\n<div class=\"code_explanation admonition\" id=\"jupyternotebooks/input_and_output-code_explanation-6\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplec2\"> Code_Example 7</a></p>\n<section id=\"code_explanation-content\">\n<p>Extraction fails if the input data does not match the type of the variable being extracted.</p>\n<p>If you type in a string literal - <code class=\"docutils literal notranslate\"><span class=\"pre\">number</span></code> is reset to the value 0.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">word</span></code> is unchanged, becase extraction has failed.</p>\n<p>Only numeric characters can be extracted to an <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>.</p>\n</section>\n</div>\n</section>\n</div>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
