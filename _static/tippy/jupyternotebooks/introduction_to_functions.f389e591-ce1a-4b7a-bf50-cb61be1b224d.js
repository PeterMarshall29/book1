selector_to_html = {"a[href=\"glossary.html#term-Identifier\"]": "<dt id=\"term-Identifier\">Identifier</dt><dd><p>The <a class=\"reference internal\" href=\"#term-Name\"><span class=\"xref std std-term\">name</span></a> given to any <a class=\"reference internal\" href=\"#term-Entity\"><span class=\"xref std std-term\">entity</span></a> that may have a used defined name.</p></dd>", "a[href=\"glossary.html#term-Memory-Address\"]": "<dt id=\"term-Memory-Address\">Memory Address</dt><dd><p>A reference to a specific location in the computer\u2019s memory.</p></dd>", "a[href=\"#functions\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Functions<a class=\"headerlink\" href=\"#functions\" title=\"Permalink to this heading\">#</a></h1><p>Programmers often want to use the same <span class=\"xref std std-term\">code-block</span> repeatedly - in the same program, or across many programmes.</p><p>A code-block can be made reusable by encapsulating it into a function.</p>", "a[href=\"#exampleu1\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleu1\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Code Example 40 </span></p>\n<section id=\"code_example-content\">\n<p>Run this code, which demonstrates a simple function declaration and call.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span><span class=\"c1\"> </span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">myFirstFunction</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"n\">myFirstFunction</span><span class=\"p\">();</span>\n<span class=\"w\">\t</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationu1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleu1\"> Code_Example 40</a></p>\n<section id=\"code_explanation-content\">\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">myFirstFunction</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<ul class=\"simple\">\n<li><p>This is the <a class=\"reference internal\" href=\"glossary.html#term-Function-Definition\"><span class=\"xref std std-term\">function-definition</span></a>.</p></li>\n<li><p>The statement(s) inside the curly braces <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code> (a code-block) are the <a class=\"reference internal\" href=\"glossary.html#term-Function-Body\"><span class=\"xref std std-term\">function-body</span></a>.</p></li>\n<li><p>The funtion-<a class=\"reference internal\" href=\"glossary.html#term-Identifier\"><span class=\"xref std std-term\">identifier</span></a> (name) is \u2018myFirstFuncton\u2019 - which is user-defined.</p></li>\n<li><p>The <a class=\"reference internal\" href=\"glossary.html#term-Keyword\"><span class=\"xref std std-term\">keyword</span></a> before the identifier, specfies the type of the value that will be returned when the function completes its execution.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">Void</span></code> indicates that nothing is returned by this function, and therefore we do not need to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span></code> keyword.</p></li>\n<li><p>The type of this function is <code class=\"docutils literal notranslate\"><span class=\"pre\">void()</span></code>.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> indicates that <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> returns an integer, hence we require a <span class=\"xref std std-term\">return-statement</span> i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span> <span class=\"pre\">0;</span></code>, and the type of <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">int()</span></code>.</p></li>\n<li><p>The empty parentheses <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code> indicate that this function takes no <a class=\"reference internal\" href=\"glossary.html#term-Arguments\"><span class=\"xref std std-term\">arguments</span></a>. (Arguments are discussed below\u2026)</p></li>\n</ul>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<ul class=\"simple\">\n<li><p>This is the function-body - the code that will be executed every time the function is <em><strong>called</strong></em>.</p></li>\n<li><p>If there are nested blocks inside the function, the outermost block is the function body.</p></li>\n</ul>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"w\">\t</span><span class=\"n\">myFirstFunction</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n<ul class=\"simple\">\n<li><p>This is a <span class=\"xref std std-term\">function call</span>.</p></li>\n<li><p>To call a function we state its name followed by <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code>.</p></li>\n<li><p>If the function takes arguments, their values must be supplied in the parentheses.</p></li>\n</ul>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p>The function must be placed outside of the main function.</p>\n</div>\n<ul class=\"simple\">\n<li><p>For now we will place the functions above the main function, but in future all functions should be placed in <a class=\"reference internal\" href=\"glossary.html#term-Header-Files\"><span class=\"xref std std-term\">header files</span></a>, using the <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span></code> directive to make them available to <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code>.</p></li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The statement before the function body, followed by a <code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code> would be a <span class=\"xref std std-term\">function declaration</span>, which would look like this:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">myFirstFunction</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\">   </span><span class=\"c1\">//function declaration of myFirstFunction</span>\n</pre></div>\n</div>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#constexpr-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">constexpr</span></code> Functions<a class=\"headerlink\" href=\"#constexpr-functions\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"glossary.html#term-Falling-Through\"]": "<dt id=\"term-Falling-Through\">Falling Through</dt><dd><p>When a program reaches the end of code block and just continues onto the next statements. Will be an error for a function if a return is expected but permitted for <code class=\"docutils literal notranslate\"><span class=\"pre\">void</span></code>.</p></dd>", "a[href=\"glossary.html#term-Passing-by-Reference\"]": "<dt id=\"term-Passing-by-Reference\">Passing by Reference</dt><dd><p>If a function parameter type is declared to be a reference to a type, then a reference to a variable can be passed instead of the variable itself. This saves the memory overhead needed to create the local copy of the passed in value, and allows the function to operate on the original value instead. Also called call-by-reference, as opposed to call-by-value when the actual value is passed in.</p></dd>", "a[href=\"glossary.html#term-Exception\"]": "<dt id=\"term-Exception\">Exception</dt><dd><p>def</p></dd>", "a[href=\"glossary.html#term-Header-Files\"]": "<dt id=\"term-Header-Files\">Header Files</dt><dd><p>DEF</p></dd>", "a[href=\"#pass-by-reference-and-passing-by-constant-reference\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pass by Reference and Passing by Constant Reference<a class=\"headerlink\" href=\"#pass-by-reference-and-passing-by-constant-reference\" title=\"Permalink to this heading\">#</a></h2><p>Sometimes it is better not to pass a value directly into a function. For instance you might be sending a long array of large numbers, or a very lareg image.</p><p>When a value is passed into a function, a new copy of that values is created in the memory - a local copy for the use of the function.</p>", "a[href=\"glossary.html#term-Statements\"]": "<dt id=\"term-Statements\">Statements</dt><dd><p>Statements are fragments of the C++ program that are executed in sequence, or that are used to control the execution flow. The body of any function is a sequence of statements, which may include declaration statements, <a class=\"reference internal\" href=\"#term-Expression-Statements\"><span class=\"xref std std-term\">expression statements</span></a>, and return statements. Other statements include if-statements, while-statements, do-statements, and switch-statements. Simple statements end with a semicolon, but iteration and selection statements are terminated by <code class=\"docutils literal notranslate\"><span class=\"pre\">}</span></code> ended their code block.</p></dd>", "a[href=\"glossary.html#term-Reference\"]": "<dt id=\"term-Reference\">Reference</dt><dd><p>def</p></dd>", "a[href=\"glossary.html#term-Function-Body\"]": "<dt id=\"term-Function-Body\">Function-Body</dt><dd><p>Sequence of statement to be executed when the function is called.</p></dd>", "a[href=\"#exampleu2\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleu2\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Code Example 41 </span></p>\n<section id=\"code_example-content\">\n<p>Run this code.</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">squareOf</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">\t\t</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">squareOf</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">\t\t</span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"p\">}</span>\n<span class=\"w\">\t</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation note dropdown admonition\" id=\"explanationu2\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleu2\"> Code_Example 41</a></p>\n<section id=\"code_explanation-content\">\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf()</span></code> function returns an integer value when it is called, and that value is then used by the character output stream, in the same fashion as the result of evaluating an expression.</p>\n<p>The return value of a function can also be used by copy assignment.</p>\n<p>If a return value is not used, it is better practice to declare return type as <code class=\"docutils literal notranslate\"><span class=\"pre\">void</span></code>. It is also common practice to put <code class=\"docutils literal notranslate\"><span class=\"pre\">return;</span></code> at the end of a void function - though not strictly necessary.</p>\n<div class=\"note dropdown admonition\">\n<p class=\"admonition-title\">Ways to exit a function</p>\n<p>There are 4 ways for the program to exit a function.</p>\n<ul class=\"simple\">\n<li><p>Executing a <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span></code> statement - `return can be positioned a more than one point in a function that uses selection and iteration statements.</p></li>\n<li><p><a class=\"reference internal\" href=\"glossary.html#term-Falling-Through\"><span class=\"xref std std-term\">Falling through</span></a></p></li>\n<li><p>Throwing an <a class=\"reference internal\" href=\"glossary.html#term-Exception\"><span class=\"xref std std-term\">exception</span></a> - this can be handled programmatically.</p></li>\n<li><p>By invoking another function that fails to return.\n; for a void function it is acceptable to just drop through</p></li>\n</ul>\n<p>The programmer should always ensrue there is a <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span></code>, or an <code class=\"docutils literal notranslate\"><span class=\"pre\">error</span></code>, for every possible logical way out of a function.</p>\n</div>\n<p>The definiton of <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf()</span></code> has a single parameter called \u2018x\u2019 of type <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>. Parameters names are local variables that may be used in the body of the function - have the value that was passed in.</p>\n<hr class=\"docutils\"/>\n<p>The type of <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf()</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span> <span class=\"pre\">(int)</span></code>.</p>\n<hr class=\"docutils\"/>\n<p>To call <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf()</span></code> its name must be included in a code statement followed by <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code> with either an integer value in the parentheses or an integer type variable, that must have been initialised with a value before the call.</p>\n</section>\n</div>\n<div class=\"exercise dropdown admonition\" id=\"exerciseu2\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 25 </span></p>\n<section id=\"exercise-content\">\n<ul class=\"simple\">\n<li><p>Try moving the definition of squareOf() to below the main function.</p></li>\n<li><p>Try moving the definition of squareOf() to inside the main function.</p></li>\n<li><p>Try changing the function declaration so that it expects a paramater of type <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code>.</p></li>\n<li><p>Find two ways to make the above code print the square of all of the values from 1 to 100.</p></li>\n</ul>\n<div class=\"solution note dropdown admonition\" id=\"solutionu2\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exerciseu2\"> Exercise 25</a></p>\n<section id=\"solution-content\">\n<p>The function could only be placed above <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> - because a function cannot be used before it has been declared.</p>\n<p>Integers can be converted to doubles at run time, so the code works.</p>\n<p>The loop-variable <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> is being incremented in two places - this is bad practice.</p>\n<p>Removing the <code class=\"docutils literal notranslate\"><span class=\"pre\">++i</span></code> would be the best approach.</p>\n<p>Alternatively letting the loop run to 200 but</p>\n</section>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#exerciseu2\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseu2\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 25 </span></p>\n<section id=\"exercise-content\">\n<ul class=\"simple\">\n<li><p>Try moving the definition of squareOf() to below the main function.</p></li>\n<li><p>Try moving the definition of squareOf() to inside the main function.</p></li>\n<li><p>Try changing the function declaration so that it expects a paramater of type <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code>.</p></li>\n<li><p>Find two ways to make the above code print the square of all of the values from 1 to 100.</p></li>\n</ul>\n<div class=\"solution note dropdown admonition\" id=\"solutionu2\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exerciseu2\"> Exercise 25</a></p>\n<section id=\"solution-content\">\n<p>The function could only be placed above <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> - because a function cannot be used before it has been declared.</p>\n<p>Integers can be converted to doubles at run time, so the code works.</p>\n<p>The loop-variable <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> is being incremented in two places - this is bad practice.</p>\n<p>Removing the <code class=\"docutils literal notranslate\"><span class=\"pre\">++i</span></code> would be the best approach.</p>\n<p>Alternatively letting the loop run to 200 but</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Local-Variables\"]": "<dt id=\"term-Local-Variables\">Local Variables</dt><dd><p>Definition</p></dd>", "a[href=\"glossary.html#term-Function-Definition\"]": "<dt id=\"term-Function-Definition\">Function-Definition</dt><dd><p>Function declaration that include the <span class=\"xref std std-term\">function body</span>.</p></dd>", "a[href=\"#declarations-and-definitions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Declarations and Definitions<a class=\"headerlink\" href=\"#declarations-and-definitions\" title=\"Permalink to this heading\">#</a></h2><p>Every entity, including functions, must be declared before they may be used.</p><p>Reason: Two functions may be called in each others definiton, but they cannot both be defined first.</p>", "a[href=\"glossary.html#term-Function\"]": "<dt id=\"term-Function\">Function</dt><dd><p>A named sequence of statements that can be invoked/called by a program, optionally using arguments supplied by the function call, to optional return a value to the program. The type of the function includes the number and types of argument and the type of the value returned. Functions are useful because they are reusable, making code more efficient to write and execute.</p></dd>", "a[href=\"glossary.html#term-Function-Arguments\"]": "<dt id=\"term-Function-Arguments\">Function-Arguments</dt><dd><p>The values passed into a function. The function declaration specifies the number and type of the required arguments, which must match when the function is called.</p></dd>", "a[href=\"glossary.html#term-Keyword\"]": "<dt id=\"term-Keyword\">Keyword</dt><dd><p>An identifier used by the C++ language standard. Keywords are reserved; they may not be declared as an identifier by a programmer. <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/keywords.html\">Keywords in the C++ language</a>.</p></dd>", "a[href=\"glossary.html#term-Passing-by-Constant-Reference\"]": "<dt id=\"term-Passing-by-Constant-Reference\">Passing by Constant Reference</dt><dd><p>def</p></dd>", "a[href=\"#functions-with-arguments\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Functions with Arguments<a class=\"headerlink\" href=\"#functions-with-arguments\" title=\"Permalink to this heading\">#</a></h2><p>When a function is called values may be <strong>passed in</strong> as <a class=\"reference internal\" href=\"glossary.html#term-Function-Arguments\"><span class=\"xref std std-term\">function-arguments</span></a> to the function.</p><p>These values become <a class=\"reference internal\" href=\"glossary.html#term-Local-Variables\"><span class=\"xref std std-term\">local variables</span></a> that can be used within the function. The outcome of the function call thus changes in response to the supplied variables.</p>", "a[href=\"glossary.html#term-Arguments\"]": "<dt id=\"term-Arguments\">Arguments</dt><dd><p>Values passed to a function or template. For templates the arguments are usually types.</p></dd>", "a[href=\"glossary.html#term-Constant\"]": "<dt id=\"term-Constant\">Constant</dt><dd><p>A variable or function parameter that is immutable - the value cannot be changed after it has been initialised. Set using the <code class=\"docutils literal notranslate\"><span class=\"pre\">const</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">constexpr</span></code> modifiers at declaration.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
