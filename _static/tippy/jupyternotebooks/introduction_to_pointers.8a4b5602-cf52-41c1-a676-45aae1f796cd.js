selector_to_html = {"a[href=\"#pointer-arithmetic-and-arrays\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Arithmetic and Arrays<a class=\"headerlink\" href=\"#pointer-arithmetic-and-arrays\" title=\"Permalink to this heading\">#</a></h2><p>The name of an array is also a pointer to the first element in the array.</p><p>Writing <code class=\"docutils literal notranslate\"><span class=\"pre\">myArray[3]</span></code> tells the compiler to return the element that is 3 away from the starting element of <code class=\"docutils literal notranslate\"><span class=\"pre\">myArray</span></code>.</p>", "a[href=\"#examplev0\"]": "<div class=\"code_example dropdown admonition\" id=\"examplev0\">\n<p class=\"admonition-title\">Code Example: Pointers </p>\n<section id=\"code_example-content\">\n<p>This code demonstrates the definition and use of a pointer.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">myPointerTo_myInt</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">myInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">myPointerTo_myInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">myInt</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"The Value of myInt is \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"The memory address of myInt is \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">myInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"The value of myPointerTo_myInt is \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myPointerTo_myInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"The contents (value) of the object (memory location) pointed to by myPointerTo_myInt is \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">myPointerTo_myInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"solutionv0\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplev0\"> Code Example: Pointers </a></p>\n<section id=\"code_explanation-content\">\n<p>This is the declaraton of a pointer.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">myPointerTo_myInt</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p>A pointer only contains a memory address of another object.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;myInt</span></code> The prefix unary ampersand creates an expression that returns the hexadecimal code for the memory address of <code class=\"docutils literal notranslate\"><span class=\"pre\">myInt</span></code> - i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;myInt</span></code> = address of <code class=\"docutils literal notranslate\"><span class=\"pre\">myInt</span></code>.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">myPointerTo_myInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">myInt</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p>Initialises the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">myPointerTo_myInt</span></code> by copy assignment - the pointer now contains the memory address of <code class=\"docutils literal notranslate\"><span class=\"pre\">myInt</span></code>.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"The contents (value) of the object (memory location) pointed to by myPointerTo_myInt is \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">myPointerTo_myInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">*myPointerTo_myInt</span></code> is the value of the object that the pointer points at, in this case the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">myInt</span></code> - this is called dereferencing.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#pointers\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers<a class=\"headerlink\" href=\"#pointers\" title=\"Permalink to this heading\">#</a></h1><p>An <a class=\"reference internal\" href=\"glossary.html#term-Object\"><span class=\"xref std std-term\">object</span></a> in C++ is a region of memory holding a value. Each region of memory can also be identified by its <a class=\"reference internal\" href=\"glossary.html#term-Memory-Address\"><span class=\"xref std std-term\">memory address</span></a>.</p><p>Access to a memory address is useful for memory management, and reference to an object\u2019s address instead of its value can make a program more efficient.</p>", "a[href=\"#new\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">new</span></code><a class=\"headerlink\" href=\"#new\" title=\"Permalink to this heading\">#</a></h2><p>The <a class=\"reference internal\" href=\"glossary.html#term-New\"><span class=\"xref std std-term\">new</span></a> operator is used to allocate memory space on the <a class=\"reference internal\" href=\"glossary.html#term-Free-store\"><span class=\"xref std std-term\">free store</span></a>.</p>", "a[href=\"glossary.html#term-Indirection\"]": "<dt id=\"term-Indirection\">Indirection</dt><dd><p>Returning the value of the object associated with a pointer - accomplished by prefixing <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> to the pointer\u2019s identifier in an expression.</p></dd>", "a[href=\"glossary.html#term-Unary\"]": "<dt id=\"term-Unary\">Unary</dt><dd><p>Describing an operator that operates on a single operand, such as the negation operator. Unary operators are further classified as prefix and postfix. The alternative is an <a class=\"reference internal\" href=\"#term-Infix-Operator\"><span class=\"xref std std-term\">infix operator</span></a>.</p></dd>", "a[href=\"#pointers-into-arrays\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers into Arrays<a class=\"headerlink\" href=\"#pointers-into-arrays\" title=\"Permalink to this heading\">#</a></h2><p>In C++, pointers and arrays are closely related. The name of an array can be used as a pointer to its initial element. For example:</p>", "a[href=\"#pointers-to-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers to Functions<a class=\"headerlink\" href=\"#pointers-to-functions\" title=\"Permalink to this heading\">#</a></h2><p>Like a (data) object, the code generated for a function body is placed in memory somewhere and therefore has a unique address associated with it and therefore we can also define a pointer to a function in a similar manner to a pointer to an object.  There are some differences however:</p><p>A pointer to function does not allow the code to be modified.</p>", "a[href=\"#pointers-and-booleans\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers and Booleans<a class=\"headerlink\" href=\"#pointers-and-booleans\" title=\"Permalink to this heading\">#</a></h2><p>Note that <code class=\"docutils literal notranslate\"><span class=\"pre\">==</span></code> compares addresses (pointer values) when applied to pointers, and not the values pointed to.</p><p>A pointer can be implicitly converted to a <code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span></code>. A non-null pointer converts to true; pointers with the value <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span> </code>convert to <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code>.</p>", "a[href=\"#pointer-arithmetic\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Arithmetic<a class=\"headerlink\" href=\"#pointer-arithmetic\" title=\"Permalink to this heading\">#</a></h3><p>Pointer arithmetic is a way of using subtraction and addition of pointers to move around between locations in memory, typically between array elements.</p><p>Adding an integer \u2018n\u2019 to a pointer produces a new pointer which points to \u2018n\u2019 positions further along in memory.</p>", "a[href=\"#pointer-expressions-and-arithmetic\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Expressions and Arithmetic<a class=\"headerlink\" href=\"#pointer-expressions-and-arithmetic\" title=\"Permalink to this heading\">#</a></h3><p>A limited set of arithmetic operations can be performed on pointers which are:</p><p>incremented ( ++ )\ndecremented ( \u2014 )\nan integer may be added to a pointer ( + or += )\nan integer may be subtracted from a pointer ( \u2013 or -= )\ndifference between two pointers (p1-p2)</p>", "a[href=\"glossary.html#term-Object\"]": "<dt id=\"term-Object\">Object</dt><dd></dd>", "a[href=\"glossary.html#term-New\"]": "<dt id=\"term-New\">New</dt><dd><p>Keyword in C++ used to dynamically allocate memory on the heap for objects or variables during runtime. <code class=\"docutils literal notranslate\"><span class=\"pre\">new</span></code> allocates the required amount of memory on the heap; and calls a constructor (if there is one) to initialise the newly allocated object/memory.</p></dd>", "a[href=\"#examplev1\"]": "<div class=\"code_example dropdown admonition\" id=\"examplev1\">\n<p class=\"admonition-title\">Code Example: Introduction to Pointers </p>\n<section id=\"code_example-content\">\n<p>This code shows examples of pointers to different types.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">???</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">directives</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">???</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">myVector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mf\">5.9</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mf\">1.1</span><span class=\"p\">,</span><span class=\"mf\">2.3</span><span class=\"p\">,</span><span class=\"mf\">4.5</span><span class=\"p\">,</span><span class=\"mf\">5.6</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"kt\">double</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">myPointerToMyVector</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">myPointerToMyVector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">myVector</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\">  </span><span class=\"c1\">//Assigns address of 4th element to the pointer</span>\n<span class=\"w\">        </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">myPointerToMyVector</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myPointerToMyVector</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" - is the address of the object pointed to by the pointer. </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//prints the address of myVector</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" - is the value held at that address pointed at. </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">//prints the value of myVector[3]</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationv1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplev1\"> Code Example: Introduction to Pointers </a></p>\n<section id=\"code_explanation-content\">\n<p>For a type <code class=\"docutils literal notranslate\"><span class=\"pre\">T</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">T*</span></code> is of type \u2018pointer to object of type T\u2019, which is usually shortened to \u2018pointer to T\u2019 e.g. \u2018pointer to int\u2019, or \u2018pointer to double\u2019 etc\u2026</p>\n<p>That is, a variable of type <code class=\"docutils literal notranslate\"><span class=\"pre\">T*</span></code> can hold the address of an object of type <code class=\"docutils literal notranslate\"><span class=\"pre\">T</span></code>.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#pointers-and-type\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers and Type<a class=\"headerlink\" href=\"#pointers-and-type\" title=\"Permalink to this heading\">#</a></h2><p>Each pointer points to an object of a specific type, so the <code class=\"docutils literal notranslate\"><span class=\"pre\">type</span></code> of the pointer is said to have type <code class=\"docutils literal notranslate\"><span class=\"pre\">pointer</span> <span class=\"pre\">to</span> <span class=\"pre\">'type'</span></code> e.g. a pointer to an <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> has the type <code class=\"docutils literal notranslate\"><span class=\"pre\">pointer</span> <span class=\"pre\">to</span> <span class=\"pre\">int</span></code>.</p><p>Although the pointer value is only a memory location - it is not permitted to assign a declared pointer a value of a different type.</p>", "a[href=\"glossary.html#term-Memory-Address\"]": "<dt id=\"term-Memory-Address\">Memory Address</dt><dd><p>A computer memory address is a unique identifier assigned to a specific location in a computer\u2019s memory, allowing the CPU and other hardware components to access and manipulate stored data efficiently. Memory addresses are typically represented as an array of hexadecimal values of a fixed length.</p></dd>", "a[href=\"glossary.html#term-Dereferencing\"]": "<dt id=\"term-Dereferencing\">Dereferencing</dt><dd><p>Returning the value of the object associated with a pointer - accomplished by prefixing <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> to the pointer\u2019s identifier in an expression.</p></dd>", "a[href=\"#nullptr\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code><a class=\"headerlink\" href=\"#nullptr\" title=\"Permalink to this heading\">#</a></h2><p>A pointer should always point at an object, so that dereferencing it is valid.</p><p>If there is no object to point at to or when it is useful to represent the idea that no object is available (e.g., for an end of a list), the pointer may be given the value <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code> (the null pointer).</p>", "a[href=\"glossary.html#term-Free-store\"]": "<dt id=\"term-Free-store\">Free store</dt><dd><p><a class=\"reference internal\" href=\"#term-Memory\"><span class=\"xref std std-term\">memory</span></a> allocated by <code class=\"docutils literal notranslate\"><span class=\"pre\">new</span></code>; also called <a class=\"reference internal\" href=\"#term-Dynamic-Memory\"><span class=\"xref std std-term\">dynamic memory</span></a>. Dynamic memory is an amount of memory of indeterminate size used up during execution of a program as new objects are created. Often standard library facilities, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">vector</span></code>, can be used to avoid explicit use of free store.</p></dd>", "a[href=\"#references\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"#void\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Void<a class=\"headerlink\" href=\"#void\" title=\"Permalink to this heading\">#</a></h2><p>In low-level code, we occasionally need to store or pass along an address of a memory location without knowing what type of object is stored there.</p><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">void\u2217</span></code> is used for that purpose; you can read <code class=\"docutils literal notranslate\"><span class=\"pre\">void\u2217</span></code> as \u201cpointer to an object of unknown type\u201d.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
