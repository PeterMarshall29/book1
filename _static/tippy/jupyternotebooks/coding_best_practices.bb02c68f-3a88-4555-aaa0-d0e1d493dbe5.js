selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/Coding_best_practices\"]": "<p><b>Coding best practices</b> or <b>programming best practices</b> are a set of informal, sometimes personal, rules that many software developers, in computer programming follow to improve software quality. Many computer programs require being robust and reliable for long periods of time, so any rules need to facilitate both initial development and subsequent maintenance of source code by people other than the original authors.</p>", "a[href^=\"https://en.wikipedia.org/wiki/Coding_best_practices#\"]": "<p><b>Coding best practices</b> or <b>programming best practices</b> are a set of informal, sometimes personal, rules that many software developers, in computer programming follow to improve software quality. Many computer programs require being robust and reliable for long periods of time, so any rules need to facilitate both initial development and subsequent maintenance of source code by people other than the original authors.</p>", "a[href=\"#kiss\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">KISS<a class=\"headerlink\" href=\"#kiss\" title=\"Permalink to this heading\">#</a></h2><p>Keep it Super Simple!</p><p>Avoid the temptation to start coding from the beginning of the problem and working one step at time to the end - this usually produces overly complex programs that are difficult to maintain.</p>", "a[href=\"glossary.html#term-Object-oriented-programming\"]": "<dt id=\"term-Object-oriented-programming\">Object-oriented programming</dt><dd><p>Programming paradigm that encapsulates related data and functions into objects. An imperative model, focusing on \u201chow to do\u201d tasks step-by-step.</p></dd>", "a[href=\"#testing\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Testing<a class=\"headerlink\" href=\"#testing\" title=\"Permalink to this heading\">#</a></h2><p>It is a common mistake to type in a lot of code at once without checking your work.</p>", "a[href=\"#logic-errors\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Logic errors<a class=\"headerlink\" href=\"#logic-errors\" title=\"Permalink to this heading\">#</a></h3><p>These are not caught by the compiler, so you must test for them yourself.</p><p>When the program is only part finished, you can add extra print statement, at different points in your code, so that you can follow the path of the programmes logic as it executes.</p>", "a[href=\"#sytax-errors\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Sytax Errors<a class=\"headerlink\" href=\"#sytax-errors\" title=\"Permalink to this heading\">#</a></h3><p>In the early stages of learning coding, the simplest way to test your code is to try to compile it. The compiler will show you all your syntax errors.</p><p>Understanding what has gone wrong is much simpler if you only have a few errors. In the beginning you should recompile every time you have finished a statement, or function.</p>", "a[href=\"#best-practices-in-coding\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Best Practices in Coding<a class=\"headerlink\" href=\"#best-practices-in-coding\" title=\"Permalink to this heading\">#</a></h1><p>The aim of any programmer should be to write programs with code that is easy to maintain and easy for other programmers to reuse.</p><p>Badly written code is:</p>", "a[href=\"glossary.html#term-Functional-Programming\"]": "<dt id=\"term-Functional-Programming\">Functional Programming</dt><dd><p>Programming paradigm that constructed programs using functions. A declarative model of programming emphasizing \u201cwhat to do\u201d rather than \u201chow to do it.\u201d</p></dd>", "a[href=\"#dry\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">DRY<a class=\"headerlink\" href=\"#dry\" title=\"Permalink to this heading\">#</a></h2><p>DRY  - Don\u2019t repeat yourself! is a fundamental pratice in writing efficient code.</p><p>Any lines of code that you know you are going to need more than once, should be encapsulated into a class or a function, which can be called repeatedly.</p>", "a[href=\"#expressive-code\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Expressive Code<a class=\"headerlink\" href=\"#expressive-code\" title=\"Permalink to this heading\">#</a></h2><p>It is tempting to create identifiers using short, even single letter, names - this is a mistake.\nUsing longer identifiers which make the purpose of identified entity clear to anyone reading your code\nModern editors will autocomplete long identifer names - you will not need to keep retying your chosen expressive name.</p>", "a[href=\"#commenting\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Commenting<a class=\"headerlink\" href=\"#commenting\" title=\"Permalink to this heading\">#</a></h2><p>Article on <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Coding_best_practices\">Coding_best_practices</a> in coding.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
