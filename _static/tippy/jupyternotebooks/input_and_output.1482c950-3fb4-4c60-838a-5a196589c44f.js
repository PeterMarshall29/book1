selector_to_html = {"a[href=\"#using-std-cout-with-vector\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;vector&gt;</span></code><a class=\"headerlink\" href=\"#using-std-cout-with-vector\" title=\"Permalink to this heading\">#</a></h2><p>template<typename t=\"\">\nstd::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const std::vector<t> &amp;v) {\nfor (const auto&amp; e : v)\ns &lt;&lt; std::setw(PRINT_WIDTH) &lt;&lt; e &lt;&lt; \u2019 \u2018;\nreturn s;\n}</t></typename></p>", "a[href=\"#input-and-output\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Input and Output<a class=\"headerlink\" href=\"#input-and-output\" title=\"Permalink to this heading\">#</a></h1><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;iostream&gt;</span></code> component of the <a class=\"reference internal\" href=\"glossary.html#term-Standard-Library\"><span class=\"xref std std-term\">standard library</span></a> provides the tools used to interact with programmes, using the keyboard and computer dispay for input and output.</p><p>These basic functions are vital to learning programming because they enable the programmer to follow the progress of a programme\u2019s execution - without some output to the display you will have litle insight into what the program is doing.</p>", "a[href=\"#getline\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">getline()<a class=\"headerlink\" href=\"#getline\" title=\"Permalink to this heading\">#</a></h2><p>An alternative to <code class=\"docutils literal notranslate\"><span class=\"pre\">cin</span></code> is to use getline(), which will ignore whitespace and collecte every character before <kbd class=\"kbd docutils literal notranslate\">return</kbd> into a single string.</p><p>The downside is that you may need to split up the string later. See <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/io/basic_stringstream.html\"><sstream></sstream></a> for further information on how to separate a string.</p>", "a[href=\"#formatting-output\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Formatting Output<a class=\"headerlink\" href=\"#formatting-output\" title=\"Permalink to this heading\">#</a></h2><p>The default output for a floating point number is 6 digits. The number is rounded to give the best approximation that can be printed with 6 digits.</p><p>This may not be sufficient, if you want to spot a rounding or truncation error.</p>", "a[href=\"glossary.html#term-Standard-Library\"]": "<dt id=\"term-Standard-Library\">Standard Library</dt><dd><p>Collecton of facilities available for inclusion into C++ programs</p></dd>", "a[href=\"#print-debugging\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Print debugging<a class=\"headerlink\" href=\"#print-debugging\" title=\"Permalink to this heading\">#</a></h2><p>A good reason that <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> is taught before other IO methods is its simplicity - no, really!,</p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> automatically formats the printed text based on the variabale\u2019s type.</p>", "a[href=\"glossary.html#term-Type-System\"]": "<dt id=\"term-Type-System\">Type System</dt><dd><p>The set of rules prescribing how each object may be used according to their types.</p></dd>", "a[href=\"#std-endl-vs-n\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">std::endl</span></code> vs <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\n'</span></code><a class=\"headerlink\" href=\"#std-endl-vs-n\" title=\"Permalink to this heading\">#</a></h2><p>Using std::endl is often inefficient, as it actually does two jobs: it outputs a newline (moving the cursor to the next line of the console), and it flushes the buffer (which is slow). If we output multiple lines of text ending with std::endl, we will get multiple flushes, which is slow and probably unnecessary.</p><p>When outputting text to the console, we typically don\u2019t need to explicitly flush the buffer ourselves. C++\u2019s output system is designed to self-flush periodically, and it\u2019s both simpler and more efficient to let it flush itself.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
