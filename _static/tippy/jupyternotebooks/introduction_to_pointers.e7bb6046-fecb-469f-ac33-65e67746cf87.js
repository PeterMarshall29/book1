selector_to_html = {"a[href=\"#pointers-and-booleans\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers and Booleans<a class=\"headerlink\" href=\"#pointers-and-booleans\" title=\"Permalink to this heading\">#</a></h2><p>A pointer can be implicitly converted to a bool. A non-null pointer converts to true; pointers with the value nullptr convert to false.</p>", "a[href=\"#pointer-arithmetic\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Arithmetic<a class=\"headerlink\" href=\"#pointer-arithmetic\" title=\"Permalink to this heading\">#</a></h3><p>Pointer arithmetic is a way of using subtraction and addition of pointers to move around between locations in memory, typically between array elements.</p><p>Adding an integer \u2018n\u2019 to a pointer produces a new pointer pointing to \u2018n\u2019 positions further down in memory.</p>", "a[href=\"#pointer-expressions-and-arithmetic\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Expressions and Arithmetic<a class=\"headerlink\" href=\"#pointer-expressions-and-arithmetic\" title=\"Permalink to this heading\">#</a></h2><p>A limited set of arithmetic operations can be performed on pointers which are:</p><p>incremented ( ++ )\ndecremented ( \u2014 )\nan integer may be added to a pointer ( + or += )\nan integer may be subtracted from a pointer ( \u2013 or -= )\ndifference between two pointers (p1-p2)</p>", "a[href=\"#pointer-arithmetic-and-arrays\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Arithmetic and Arrays<a class=\"headerlink\" href=\"#pointer-arithmetic-and-arrays\" title=\"Permalink to this heading\">#</a></h2><p>The name of an array is actually a pointer to the \ufb01rst element in the array.</p><p>Writing\u00a0<code class=\"docutils literal notranslate\"><span class=\"pre\">myArray[3]</span></code>\u00a0tells the compiler to return the element that is 3 away from the starting el\u00adement of myArray.</p>", "a[href=\"#pointers-and-references\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers and References<a class=\"headerlink\" href=\"#pointers-and-references\" title=\"Permalink to this heading\">#</a></h2><p>A suffix <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> after a type in a declaration/definition indicates you are creating a pointer to a variable of that type.</p><p>The prefix <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> before a pointer\u2019s identifier means \u201ccontents of\u201d \u2013 the value is the value of the object associated with the pointer</p>", "a[href=\"#pointers-into-arrays\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers into Arrays<a class=\"headerlink\" href=\"#pointers-into-arrays\" title=\"Permalink to this heading\">#</a></h2><p>In C++, pointers and arrays are closely related. The name of an array can be used as a pointer to its initial element. For example:</p>", "a[href=\"#pointers\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers<a class=\"headerlink\" href=\"#pointers\" title=\"Permalink to this heading\">#</a></h1><p>A pointer should always point at an object, so that dereferencing it is valid. When we don\u2019t have an object to point to or if we need to represent the notion of \u201cno object available\u201d (e.g., for an end of a list), we give the pointer the value <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code> (the null pointer). There is only one nullptr shared by all pointer types:\n\u00a0\nNullptr is of type pointer.\n\u00a0\nA reference is similar to a pointer.</p><p>But instead, we put the suffix <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code> after the type in the declaration, and do not need the <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> to access the value.</p>", "a[href=\"#pointers-to-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers to Functions<a class=\"headerlink\" href=\"#pointers-to-functions\" title=\"Permalink to this heading\">#</a></h2><p>Like a (data) object, the code generated for a function body is placed in memory somewhere and therefore has a unique address associated with it and therefore we can also define a pointer to a function in a similar manner to a pointer to an object.  There are some differences however:</p><p>A pointer to function does not allow the code to be modified.</p>", "a[href=\"#nullptr\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code><a class=\"headerlink\" href=\"#nullptr\" title=\"Permalink to this heading\">#</a></h2><p>The literal <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code> represents the null pointer, that is, a pointer that does not point to an object. It can be assigned to any pointer type, but not to other built-in types:</p>", "a[href=\"#void\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Void<a class=\"headerlink\" href=\"#void\" title=\"Permalink to this heading\">#</a></h2><p>In low-level code, we occasionally need to store or pass along an address of a memory location without actually knowing what type of object is stored there.</p><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">void\u2217</span></code> is used for that purpose; you can read <code class=\"docutils literal notranslate\"><span class=\"pre\">void\u2217</span></code> as \u201cpointer to an object of unknown type\u201d.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
