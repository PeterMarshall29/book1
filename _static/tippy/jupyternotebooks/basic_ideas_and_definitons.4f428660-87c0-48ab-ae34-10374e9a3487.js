selector_to_html = {"a[href=\"glossary.html#term-Core-Language\"]": "<dt id=\"term-Core-Language\">Core Language</dt><dd><p>def</p></dd>", "a[href=\"glossary.html#term-String-Data-Type\"]": "<dt id=\"term-String-Data-Type\">String Data Type</dt><dd><p>Data consisting of a sequence of characters, bracketed by <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>.</p></dd>", "a[href=\"#strings\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Strings<a class=\"headerlink\" href=\"#strings\" title=\"Permalink to this heading\">#</a></h2><p>Another useful type of variable is the <code class=\"docutils literal notranslate\"><span class=\"pre\">string</span></code> type. A <a class=\"reference internal\" href=\"glossary.html#term-String\"><span class=\"xref std std-term\">string</span></a> is a series of individual characters.</p><p>To use string-type variables we need an additional component of the standard library, <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;string&gt;</span></code> to be included.</p>", "a[href=\"#exercised0\"]": "<div class=\"exercise dropdown admonition\" id=\"exercised0\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 4 </span></p>\n<section id=\"exercise-content\">\n<p>What would happen if you now declaring a second variable <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> and intstruct the program to print out <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">+</span> <span class=\"pre\">b</span></code>?</p>\n<p>Try it in the code space above.</p>\n<div class=\"solution dropdown admonition\" id=\"solutiond0\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exercised0\"> Exercise 4</a></p>\n<section id=\"solution-content\">\n<p>Now the program has evaluated the arithmetic sum of the values contained in <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> - and sent that single value to the character output stream.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Numeric-Data-Type\"]": "<dt id=\"term-Numeric-Data-Type\">Numeric Data Type</dt><dd><p>The data types for numeric values - each represents a different type of number to different levels of precision. Includes <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code>. Some data types require additional specficiers, see the <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/language/types.html\">C++ Reference - Data Types</a></p></dd>", "a[href=\"#basic-ideas-and-definitions\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Basic Ideas and Definitions<a class=\"headerlink\" href=\"#basic-ideas-and-definitions\" title=\"Permalink to this heading\">#</a></h1><p>Once you have learned a few more basic parts of the C++ language, understanding the language becomes much easier, because you will be able to write simple programmes to try out the new concepts out.</p><p>This page leads you through some basic exercies, much of the explanation is left until later chapters, this page is not intended to present fully decriptions and definitions.</p>", "a[href=\"glossary.html#term-String\"]": "<dt id=\"term-String\">String</dt><dd><p>def</p></dd>", "a[href=\"#errors-in-calculations-to-be-moved\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Errors In Calculations - to be moved<a class=\"headerlink\" href=\"#errors-in-calculations-to-be-moved\" title=\"Permalink to this heading\">#</a></h2><p>Rounding (or round-off) error: The precision of arithmetic is limited by  a computer is limited</p><p>Truncation errors:</p>", "a[href=\"#basic-arithmetic-operations\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Basic Arithmetic Operations<a class=\"headerlink\" href=\"#basic-arithmetic-operations\" title=\"Permalink to this heading\">#</a></h2><p>All programmeming languages carry out basic arithmetic operationrs. Normally we do not use a computer as a simple calculator, but most programmes carry out some arithmetic operations as part of their execution.</p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">cout</span></code> can be used demonstrate the basic arithmetic operations. The <span class=\"xref std std-term\">Modulus</span> operation may be new to you. and some basic arithmetic operators to write a simple programmes for calculation.</p>", "a[href=\"#exercised3\"]": "<div class=\"exercise dropdown admonition\" id=\"exercised3\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 7 </span></p>\n<section id=\"exercise-content\">\n<p>Try to fix this code:</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"p\">;</span>\n<span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.0</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.5</span><span class=\"p\">;</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">!</span>\n</pre></div>\n</div>\n<div class=\"solution note dropdown admonition\" id=\"solutiond3\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exercised3\"> Exercise 7</a></p>\n<section id=\"solution-content\">\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.0</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.5</span><span class=\"p\">;</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>Strings are part of the standard library, and must be referenced by prefixing with <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">char</span></code> are all part of the <a class=\"reference internal\" href=\"glossary.html#term-Core-Language\"><span class=\"xref std std-term\">core language</span></a>, and should not have <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> attached.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#variables\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Variables<a class=\"headerlink\" href=\"#variables\" title=\"Permalink to this heading\">#</a></h2><p>A computer programme that can only perform arithmetic on the values written into the original programme code would not be very useful.</p><p>Instead programmes must be able ask for the numberic values that are to be used in the calculations.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
