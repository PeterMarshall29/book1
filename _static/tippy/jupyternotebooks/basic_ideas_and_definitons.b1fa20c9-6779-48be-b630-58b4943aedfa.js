selector_to_html = {"a[href=\"glossary.html#term-Core-Language\"]": "<dt id=\"term-Core-Language\">Core Language</dt><dd><p>def</p></dd>", "a[href=\"#basic-ideas-and-definitions\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Basic Ideas and Definitions<a class=\"headerlink\" href=\"#basic-ideas-and-definitions\" title=\"Permalink to this heading\">#</a></h1><p>To continue learning C++ it is helpful to learn a few more basic concepts before delving into what they mean, so we can used these basic ideas to demonstrate them later</p><p>All of the concepts we now introduce will be expanded on in future chapters - this page is not intended to present fully decriptions and definitions.</p>", "a[href=\"#exercised2\"]": "<div class=\"exercise dropdown admonition\" id=\"exercised2\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 3 </span></p>\n<section id=\"exercise-content\">\n<p>Try adding a second variable b, with a value of \u201c-fingers\u201d and printing out the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">+</span> <span class=\"pre\">b</span></code> again.</p>\n<p>Demonstrating that the <code class=\"docutils literal notranslate\"><span class=\"pre\">+</span></code> operator behaves differently when used with differnt data types. For numeric types it performs \u2018addition\u2019, but for string types it performs \u2018concatenation\u2019.</p>\n<div class=\"solution dropdown admonition\" id=\"note solutiond2\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exercised2\"> Exercise 3</a></p>\n<section id=\"solution-content\">\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">!</span>\n</pre></div>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#exercised1\"]": "<div class=\"exercise dropdown admonition\" id=\"exercised1\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 4 </span></p>\n<section id=\"exercise-content\">\n<p>Try to fix this code:</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"p\">;</span>\n<span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.0</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.5</span><span class=\"p\">;</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"solution note dropdown admonition\" id=\"solutiond1\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exercised1\"> Exercise 4</a></p>\n<section id=\"solution-content\">\n<p>Strings are part of the standard library, and must be referenced by prefixing <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> .\n<code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">char</span></code> are all part of the <a class=\"reference internal\" href=\"glossary.html#term-Core-Language\"><span class=\"xref std std-term\">core language</span></a>, and should not have <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> attached.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">!</span>\n</pre></div>\n</div>\n</section>\n</div>\n</section>\n</div>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 300, interactive: false, theme: 'transparent', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
