selector_to_html = {"a[href=\"#compound-conditions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Compound Conditions<a class=\"headerlink\" href=\"#compound-conditions\" title=\"Permalink to this heading\">#</a></h2><p>Compound conditions are constructed using Boolean operators to combine the Boolean result of multiple expression using comparison operations.</p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;&amp;</span></code> is the logical <code class=\"docutils literal notranslate\"><span class=\"pre\">and</span></code> and evaluates <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> when <strong>all</strong> the expressions are <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code>.</p>", "a[href=\"#exampleq1\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleq1\">\n<p class=\"admonition-title\">Code Example: Simple if-statement </p>\n<section id=\"code_example-content\">\n<p>Try this code:</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Please enter the answer to the ultimate question of Life, the Universe, and Everything....\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"42\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"You are truly wise!\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationq1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleq1\"> Code Example: Simple if-statement </a></p>\n<section id=\"code_explanation-content\">\n<p>The if-statement is:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"42\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">answer==42</span></code> is the condition - which MUST be put in parentheses.</p>\n<p>When the thread of control reaches the if-statement, the condition is evaluated - if the condition evaluates to the Boolean value <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code> , or <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> , then the code-block is executed.</p>\n<p>The compiler should not allow you to have a condition that will not evaluate to a <code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span></code> .</p>\n<p>In this example, the code-block contains only a single statement and the <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code> are not required, as shown here:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"42\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"You are truly wise!\"</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#exerciseq2\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseq2\">\n<p class=\"admonition-title\">Exercise  if-else-if  </p>\n<section id=\"exercise-content\">\n<p>Is there a way to have the program give you a second chance if your first input is invalid?</p>\n<div class=\"solution dropdown admonition\" id=\"jupyternotebooks/if_statements-solution-9\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exerciseq2\"> Exercise  if-else-if  </a></p>\n<section id=\"solution-content\">\n<p>Substitute the following lines:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">yourScore</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">yourScore</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Invalid input - Please enter a percentage between 0 and 100.\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">yourScore</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">yourScore</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">70</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Grade: A\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p>Try replacing the second <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code> statement with an <code class=\"docutils literal notranslate\"><span class=\"pre\">else</span> <span class=\"pre\">if</span></code> . Can you explain how this has affected the execution.</p>\n<p>How could you ensure that more invalid entries are not a problem?</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#options-for-the-if-condition\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Options for the If-Condition<a class=\"headerlink\" href=\"#options-for-the-if-condition\" title=\"Permalink to this heading\">#</a></h2><p>The condition can be an expression or a declaration - the only requirement being that they evaluate to boolean <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code>.</p><p>If-statements can be used as a test of the validity of a value.</p>", "a[href=\"#exampleq2\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleq2\">\n<p class=\"admonition-title\">Code Example: if-else-statement </p>\n<section id=\"code_example-content\">\n<p>Try this code:</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"True!\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"False!\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<ul class=\"simple\">\n<li><p>Try swapping the condition to <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code> , and then to <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code> and to <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> .</p></li>\n</ul>\n<p>Try the next code:</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Please enter two integral values: </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"The higher value between \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" and \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" is \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\". </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"The higher value between \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" and \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" is \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\". </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\">\t</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationq2\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleq2\"> Code Example: if-else-statement </a></p>\n<section id=\"code_explanation-content\">\n<p>The programme does works to an extent\u2026 but there are issues.</p>\n<ul class=\"simple\">\n<li><p>Try entering a pair of identical values.</p></li>\n</ul>\n<p>Clearly this is not what we want - there are three possible outcomes, so we need more than two options from the selection statement.</p>\n<p>The solution is to use nested <code class=\"docutils literal notranslate\"><span class=\"pre\">if-else</span></code> statements (an if-else ladder) (next section) - or to use a <code class=\"docutils literal notranslate\"><span class=\"pre\">switch</span></code> statement instead (next chapter).</p>\n<ul class=\"simple\">\n<li><p>Try entering two numbers where one is a floating-point number - try putting the float both first and second - what is the difference?</p></li>\n</ul>\n<p>The first <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> takes the number before the decimal point, but then the non-integer character causes an issue for the second variable.</p>\n<p>Try adding a line with <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cin.ignore(100,</span> <span class=\"pre\">'</span> <span class=\"pre\">')</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cin.ignore(100,</span> <span class=\"pre\">'</span> <span class=\"pre\">')</span></code> to resolve this issue - these statements cause the buffer to be cleared until the next space or newline, or 100 characters, whichever comes first - empty parentheses causes only a single character to be discarded.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#if-statements\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">If Statements<a class=\"headerlink\" href=\"#if-statements\" title=\"Permalink to this heading\">#</a></h1><p>The if-statement is used to select between two alternatives - changing what the program does each time it runs depending on the choice made at each if-statement.</p><p>At its simplest, an if-statement causes another statement or a code-block to be executed if a condition is true and does nothing if the condition is false.</p>", "a[href=\"#exerciseq1\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseq1\">\n<p class=\"admonition-title\">Exercise  if-statement conditions  </p>\n<section id=\"exercise-content\">\n<p>Find out what happens if:</p>\n<ul class=\"simple\">\n<li><p>The value of <code class=\"docutils literal notranslate\"><span class=\"pre\">myInt</span></code> is changed to <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>, then to a negative number.</p></li>\n<li><p>Would this work with a <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code> ?</p></li>\n<li><p>Replace the integer with a <code class=\"docutils literal notranslate\"><span class=\"pre\">string</span></code>, then with a <code class=\"docutils literal notranslate\"><span class=\"pre\">char</span></code>, does this work?</p></li>\n<li><p>Replace the integer with a pointer (pointers are covered in week 3).</p></li>\n</ul>\n<div class=\"solution dropdown admonition\" id=\"jupyternotebooks/if_statements-solution-14\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exerciseq1\"> Exercise  if-statement conditions  </a></p>\n<section id=\"solution-content\">\n<ul class=\"simple\">\n<li><p>All non-zero integers are converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> ; only <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code> .</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">string</span></code> type should not be allowed by the compiler - they cannot be convert to a Boolean. <code class=\"docutils literal notranslate\"><span class=\"pre\">Char</span></code> converts to <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> ,  which converts to <code class=\"docutils literal notranslate\"><span class=\"pre\">Bool</span></code> , however <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> does not convert to the integer zero!</p></li>\n<li><p>A pointer to <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code> is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code> , an pointer to a valid object is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> .</p></li>\n</ul>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">(myPtrToMyInt)</span></code> is equivalent to <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">(myPtrToMyInt</span> <span class=\"pre\">!=</span> <span class=\"pre\">nullptr)</span></code> .</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">myInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ptrToMyInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">myInt</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">//replace with, = nullptr;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ptrToMyInt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">ptrToMyInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" is the address of a valid object, of value: \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptrToMyInt</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">ptrToMyInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" is the null pointer!\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</section>\n</div>\n<p>The condition can also contain a declaration; useful for restricting the scope of a variable. Variables declared in conditions are accessible to all the branches of the ladder. Only a single variable can be declared and initialised in a condition.</p>\n</section>\n</div>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
