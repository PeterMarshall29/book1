selector_to_html = {"a[href=\"#shadowing\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Shadowing<a class=\"headerlink\" href=\"#shadowing\" title=\"Permalink to this heading\">#</a></h2><p>It is usually possible to use the same name more than once, provided each declaration has different scope.</p><p>An exception is the loop variable in a <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code> loop. Another type with the s</p>", "a[href=\"#hidden-or-shadowed-names\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Hidden or Shadowed Names<a class=\"headerlink\" href=\"#hidden-or-shadowed-names\" title=\"Permalink to this heading\">#</a></h2><p>Scope allows the definition of multiple entities with the same name.</p><p>The compiler associates each name with the version of the name in the current scope.</p>", "a[href=\"glossary.html#term-Standard-Library\"]": "<dt id=\"term-Standard-Library\">Standard Library</dt><dd><p>Collection of facilities (classes and functions) available for inclusion into C++ programs \u2013 separated into namespaces.</p></dd>", "a[href=\"#namespace\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Namespace<a class=\"headerlink\" href=\"#namespace\" title=\"Permalink to this heading\">#</a></h2><p>Namespace is a language feature exclusively used to express scoping.</p><p>A namespace is a named scope, which is a separate container for related entities (variables, functions, classes etc.).</p>", "a[href=\"#accessing-entities-in-a-namespace\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Accessing Entities in a Namespace<a class=\"headerlink\" href=\"#accessing-entities-in-a-namespace\" title=\"Permalink to this heading\">#</a></h2><p>There are three ways to access the entities contained within a namespace</p>", "a[href=\"glossary.html#term-Scope-Resolution-Operator\"]": "<dt id=\"term-Scope-Resolution-Operator\">Scope Resolution Operator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">::</span></code> -  links an entity to its container; like a folder reference. The container defines the scope of the entity.</p></dd>", "a[href=\"#declaration-good-practice\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Declaration Good Practice<a class=\"headerlink\" href=\"#declaration-good-practice\" title=\"Permalink to this heading\">#</a></h2><p>Before the <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> function put:</p>", "a[href=\"glossary.html#term-Global-Scope\"]": "<dt id=\"term-Global-Scope\">Global Scope</dt><dd><p>Variables declared outside of all functions or classes have global scope. Global variables are accessible throughout the program, unless shadowed by a local variable with the same name. Global variables are best avoided unless necessary because they may result in unintended consequences in execution.</p></dd>", "a[href=\"glossary.html#term-Standard-Library-Facilities\"]": "<dt id=\"term-Standard-Library-Facilities\">Standard Library Facilities</dt><dd><p>The individual components of the Standard Library, made available using the <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">&lt;&gt;</span></code> directive.</p></dd>", "a[href=\"#scope\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Scope<a class=\"headerlink\" href=\"#scope\" title=\"Permalink to this heading\">#</a></h1><p>Different distinguishable parts of a programs structure are called scopes e.g. inside a particular function.</p><p>The location of a declaration introduces the name into the scope at that location.</p>", "a[href=\"#global-variables\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Global Variables<a class=\"headerlink\" href=\"#global-variables\" title=\"Permalink to this heading\">#</a></h2><p>A variable with <a class=\"reference internal\" href=\"glossary.html#term-Global-Scope\"><span class=\"xref std std-term\">global scope</span></a> is declared outside of all functions and classes.</p><p>Global variables are accessible throughout the program, unless shadowed by a local variable with the same name.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
