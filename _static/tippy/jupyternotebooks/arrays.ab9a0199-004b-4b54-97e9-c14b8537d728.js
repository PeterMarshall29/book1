selector_to_html = {"a[href=\"glossary.html#term-Subscript-Operator\"]": "<dt id=\"term-Subscript-Operator\">Subscript Operator</dt><dd><p>The subscript operator <code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> is used to access elements in arrays, vectors, other containers, or user-defined types - can be overloaded to provide custom behavior for objects of a class.</p></dd>", "a[href=\"#array-to-pointer-decay\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Array-to-pointer decay<a class=\"headerlink\" href=\"#array-to-pointer-decay\" title=\"Permalink to this heading\">#</a></h2><p>This section requires <a class=\"reference internal\" href=\"glossary.html#term-Pointers\"><span class=\"xref std std-term\">pointers</span></a> - covered in Week 3.</p><p>When the compiler finds an array where it is not expected, but a pointer is acceptable, there is an implicit conversion from lvalues and rvalues of array type to rvalues of pointer type - the pointer is to the first element of the array.</p>", "a[href=\"glossary.html#term-Passed-by-Value\"]": "<dt id=\"term-Passed-by-Value\">Passed by Value</dt><dd><p>Passing a variable name into a function, which results in a local copy of the variable being created that may be used within the function, preserving the original.</p></dd>", "a[href=\"#passing-arrays\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Passing Arrays<a class=\"headerlink\" href=\"#passing-arrays\" title=\"Permalink to this heading\">#</a></h2><p>This section requires <a class=\"reference internal\" href=\"glossary.html#term-Functions\"><span class=\"xref std std-term\">functions</span></a> - covered in week 3.</p><p>Arrays cannot be <a class=\"reference internal\" href=\"glossary.html#term-Passed-by-Value\"><span class=\"xref std std-term\">passed by value</span></a> i.e. they may not be used as arguments in a function call.</p>", "a[href=\"#exampleo1\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleo1\">\n<p class=\"admonition-title\">Code Example: Arrays </p>\n<section id=\"code_example-content\">\n<p>Creating an array:</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">myIntArray</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">myCharArray</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"sc\">'a'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"sc\">'b'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"sc\">'c'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">myCharArray2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"sc\">'a'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"sc\">'b'</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\">   </span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">myCharArray3</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"sc\">'a'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"sc\">'b'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\">   </span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">myIntArray2</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">myIntArray3</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myIntArray</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">myIntArray2</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">myIntArray3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/arrays-code_explanation-2\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleo1\"> Code Example: Arrays </a></p>\n<section id=\"code_explanation-content\">\n<p>An array can be initialized by a list of values.</p>\n<p>When an array is declared without a specific size, but with an initializer list, the size is calculated by counting the elements of the initializer list.</p>\n<p>Consequently, <code class=\"docutils literal notranslate\"><span class=\"pre\">myIntArray</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">myCharArray</span></code> are of type <code class=\"docutils literal notranslate\"><span class=\"pre\">int[4]</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">char[4]</span></code> respectively.</p>\n<p>If a size is explicitly specified, it is an error to give surplus elements in an initialiser list.</p>\n<p>If the initializer supplies too few elements for an array, a null value is used for the rest, therefore <code class=\"docutils literal notranslate\"><span class=\"pre\">myIntArray2</span></code> is equivalent to <code class=\"docutils literal notranslate\"><span class=\"pre\">myIntArray3</span></code>.</p>\n<p>An array cannot be sent to the character stream - what is printed is the address of the first element of the array - see pointers.</p>\n<p>When two arrays are compared - it is the address of the first element that is compared.</p>\n</section>\n</div>\n<div class=\"exercise dropdown admonition\" id=\"jupyternotebooks/arrays-exercise-3\">\n<p class=\"admonition-title\">Exercise  Arrays  </p>\n<section id=\"exercise-content\">\n<ul class=\"simple\">\n<li><p>Try adding an extra element to one of the initialisers.</p></li>\n<li><p>Try comparing element 7 (the last element) of both myIntArray2 and myIntArray3</p></li>\n<li><p>Add the following to the live code cell above.</p></li>\n</ul>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myIntArray2</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\t'</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myIntArray3</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\t'</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">myIntArray2</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">myIntArray3</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n</section>\n</div></section>\n</div>", "a[href=\"glossary.html#term-Declarator-operator\"]": "<dt id=\"term-Declarator-operator\">Declarator-operator</dt><dd><p>Operators used to modify the type of a variable, function, or object being declared. e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code> for pointers, and <code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> for arrays.</p></dd>", "a[href=\"introduction_to_pointers.html#pointers-and-arrays\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Arithmetic and Arrays<a class=\"headerlink\" href=\"#pointer-arithmetic-and-arrays\" title=\"Permalink to this heading\">#</a></h2><p>In C++, pointers and arrays are closely related.</p><p>The name of an array can be used as a pointer to its initial element i.e. anywhere that a program might require a pointer object, the programmer may put the name of an array, because the array will be interpreted as a pointer to its first element.</p>", "a[href=\"glossary.html#term-Functions\"]": "<dt id=\"term-Functions\">Functions</dt><dd><p>A named sequence of statements that can be invoked/called by a program, optionally using arguments supplied by the function call, to optionally return a value to the program. The type of the function includes the comma-separated list of the types of its argument and the type of the value returned. Functions are useful because they are reusable, making code more efficient to write and execute. Functions can be identified by a name with <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code>attached.</p></dd>", "a[href=\"#accessing-array-elements\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Accessing Array Elements<a class=\"headerlink\" href=\"#accessing-array-elements\" title=\"Permalink to this heading\">#</a></h2><p>The individual elements of an array are accessed using the <a class=\"reference internal\" href=\"glossary.html#term-Subscript-Operator\"><span class=\"xref std std-term\">subscript operator</span></a> <code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> .</p><p>The element indexes run from \u20180\u2019 to \u2018(number of elements) - 1\u2019.</p>", "a[href=\"glossary.html#term-Type\"]": "<dt id=\"term-Type\">Type</dt><dd><p>A type defines the proper use of a name or an expression.</p></dd>", "a[href=\"#arrays-in-c\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Arrays in C++<a class=\"headerlink\" href=\"#arrays-in-c\" title=\"Permalink to this heading\">#</a></h1><p>All computing languages use containers to collect multiple elements together into a single object, e.g. collecting a list of 5 numbers under a single variable named <code class=\"docutils literal notranslate\"><span class=\"pre\">myList</span></code> .</p><p>An <a class=\"reference internal\" href=\"glossary.html#term-Array\"><span class=\"xref std std-term\">array</span></a> is the C++ fundamental method for representing a sequence of objects in memory, part of the core language.</p>", "a[href=\"glossary.html#term-Pointers\"]": "<dt id=\"term-Pointers\">Pointers</dt><dd><p>A named object (variable) that stores the memory address of another object.</p></dd>", "a[href=\"#multidimensional-arrays\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Multidimensional Arrays<a class=\"headerlink\" href=\"#multidimensional-arrays\" title=\"Permalink to this heading\">#</a></h2><p>Multidimensional Arrays can also be created - A 2D array is an array of arrays.</p>", "a[href=\"#empty-arrays-advanced\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Empty Arrays - Advanced<a class=\"headerlink\" href=\"#empty-arrays-advanced\" title=\"Permalink to this heading\">#</a></h2><p>The size of an array cannot be changed after it is declared.</p><p>In cases where the size of the array is not determined until run time, but you need a placeholder to avoid uninitialized pointers:</p>", "a[href=\"glossary.html#term-Array\"]": "<dt id=\"term-Array\">Array</dt><dd><p>Fundamental method for representing a sequence of objects in memory, under a single variable name - part of the core language.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
