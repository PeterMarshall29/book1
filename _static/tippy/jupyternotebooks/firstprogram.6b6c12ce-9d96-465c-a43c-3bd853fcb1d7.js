selector_to_html = {"a[href=\"glossary.html#term-Keyword\"]": "<dt id=\"term-Keyword\">Keyword</dt><dd><p>An identifier used by the C++ language standard. Keywords are reserved; they may not be declared as an identifier by a programmer. <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/keywords.html\">Keywords in the C++ language</a>.</p></dd>", "a[href=\"glossary.html#term-Standard-Library-Facility\"]": "<dt id=\"term-Standard-Library-Facility\">Standard Library Facility</dt><dd><p>The individual components of the Standard Library, made available using the <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">&lt;&gt;</span></code> syntax.</p></dd>", "a[href=\"the_cpp_language.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The C++ Language<a class=\"headerlink\" href=\"#the-c-language\" title=\"Permalink to this heading\">#</a></h1><p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/C++\">Wiki</a> The C++ language is one of the most powerful programming languages available today. It was created by Danish computer scientist <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bjarne_Stroustrup\">Tippy.Wiki Bjarne Stroustrup</a> and first released in 1985.</p><p>C++ is widely used, high level, general purpose language that can write code to runs from the glass (building apps with graphical user interfaces) down to the metal (direct control of hardware and manipulation of memory).</p>", "a[href=\"glossary.html#term-Header-Files\"]": "<dt id=\"term-Header-Files\">Header Files</dt><dd><p>DEF</p></dd>", "a[href=\"types.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Types in C++<a class=\"headerlink\" href=\"#types-in-c\" title=\"Permalink to this heading\">#</a></h1><p>Copied\nC++ is a <strong>strongly-typed language</strong>. Once a variable type is set, for example when a number is cast as a <strong>double</strong>, the type cannot be changed, and the numeric value cannot be converted to an integer which means that when you say a variable is an integer, it stays an integer. This is unlike weakly-typed languages like Javascript/ECMAScript, where variables can change types.</p><p>The two reasons for this are efficiency and safety. If you allow variable\u2019s types to change, you must keep track of what type a variable currently is, which has a cost. Keeping types fixed eliminates that cost. As for safety, consider this: in Javascript, if variable a equals 1 and variable b equals 2, and both are integers, then \u201ca + b\u201d gives 3\u2026 if both are text strings, \u201ca + b\u201d gives 12\u2026 but what do you get if one is an integer and one is a string? You could make up rules to answer the question, but that just makes things more complicated. It is safer to require programmers to explicitly say whether they want to add two integers or two strings. Type safety is a very important feature of C++, that makes your code efficient and easy to predict how it will behave.</p>", "a[href=\"glossary.html#term-Function\"]": "<dt id=\"term-Function\">Function</dt><dd><p>A named sequence of statements that can be invoked/called given arguments and that might return a value. The type of the function includes the number and types of argument and the type of the value returned, if any</p></dd>", "a[href=\"#adding-comments\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Adding Comments<a class=\"headerlink\" href=\"#adding-comments\" title=\"Permalink to this heading\">#</a></h2><p><a class=\"reference internal\" href=\"glossary.html#term-Comments\"><span class=\"xref std std-term\">Comments</span></a> are text added to a C++ source or header file that will be ignored by the compiler.</p><p>Comments are used are notes and reminders for people who are trying to understand and use the code.</p>", "a[href=\"glossary.html#term-Standard-Library-Facilities\"]": "<dt id=\"term-Standard-Library-Facilities\">Standard Library Facilities</dt><dd><p>The individual components of the Standard Library, made available using the <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">&lt;&gt;</span></code> syntax.</p></dd>", "a[href=\"#first-c-program\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">First C++ Program<a class=\"headerlink\" href=\"#first-c-program\" title=\"Permalink to this heading\">#</a></h1><p>The first program that most people ever write prints \u201cHello, World!\u201d the first program that most people ever write, because it is traditionally the first one taught - printing words to screen is as simple as it gets, but proves the software is correctly installed.</p>", "a[href=\"#exercisea1\"]": "<div class=\"exercise dropdown admonition\" id=\"exercisea1\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 1 </span></p>\n<section id=\"exercise-content\">\n<p>Try making the following changes to the above code - note what happens.</p>\n<ul class=\"simple\">\n<li><p>Remove the semicolon in line 3 or 4.</p></li>\n<li><p>Remove <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> from line 3.</p></li>\n<li><p>Replace the angle brackets <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&gt;</span></code> in the first line with speechmarks <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>.</p></li>\n<li><p>Change the returned value from 0 to 1, and then to a letter.</p></li>\n<li><p>Remove the return line.</p></li>\n<li><p>Add some whitespace (spaces) to the code.</p></li>\n</ul>\n<div class=\"solution hint dropdown admonition\" id=\"solutiona1\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exercisea1\"> Exercise 1</a></p>\n<section id=\"solution-content\">\n<ul class=\"simple\">\n<li><p>A semicolon is required need at the end of each statement \u2013 exceptions <code class=\"docutils literal notranslate\"><span class=\"pre\">include</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">includes</span></code> and after <code class=\"docutils literal notranslate\"><span class=\"pre\">{</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">}</span></code>.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">cout</span></code> is not part of the <strong>c++ core language</strong> and comes instead from the <strong>Standard Library</strong>.</p></li>\n</ul>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> denotes the namespace that <code class=\"docutils literal notranslate\"><span class=\"pre\">cout</span></code> belongs to (similar to a folder designation, provided you have included it).</p>\n<ul class=\"simple\">\n<li><p>To include components of the standard library angle brackets <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&gt;</span></code> are used, but we can also include additional code written by the programmer in <a class=\"reference internal\" href=\"header_files.html\"><span class=\"doc\">**header files**</span></a>, which are included using speechmarks <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>, i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">\"myheaderfile.h\"</span></code>.</p></li>\n</ul>\n<div class=\"dropdown admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<p>More on the structure of the C++ language can be found <a class=\"reference internal\" href=\"the_cpp_language.html\"><span class=\"doc\">here</span></a></p>\n</div>\n<ul class=\"simple\">\n<li><p>Any number you return is converted to an integer, so a float is fine, but a string literal will cause failure.\nThe returned value is reported to whoever called the function, in the case of main() the system is the caller. In linux the returned value is used to confirm successful termination, 0 indicated success \u2013 anything else failure.</p></li>\n<li><p>This is usually only possible in the main function, but not on every platform.</p></li>\n<li><p>Whitespace is ignored in C++ - not true in other languages!</p></li>\n</ul>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#codea1\"]": "<div class=\"literal-block-wrapper docutils container\" id=\"codea1\">\n<div class=\"code-block-caption\"><span class=\"caption-number\">Listing 1 </span><span class=\"caption-text\">Hello World program</span><a class=\"headerlink\" href=\"#codea1\" title=\"Permalink to this code\">#</a></div>\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"linenos\">2</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"hll\"><span class=\"linenos\">3</span><span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</span><span class=\"linenos\">4</span><span class=\"w\">\t</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"linenos\">5</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>", "a[href=\"introduction_to_functions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Functions<a class=\"headerlink\" href=\"#functions\" title=\"Permalink to this heading\">#</a></h1><p>We define a function when we want a separate computation with a name because doing so:</p>", "a[href=\"#exercisea2\"]": "<div class=\"exercise dropdown admonition\" id=\"exercisea2\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 2 </span></p>\n<section id=\"exercise-content\">\n<p>This code is incorrect. Correct the mistakes in the syntax so that the code will run and print your name.</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"s\">\"iostreams\"</span>\n<span class=\"n\">main</span><span class=\"p\">(){</span>\n<span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"my name is, </span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"s\">\"Peter\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"solution note dropdown admonition\" id=\"solutiona2\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exercisea2\"> Exercise 2</a></p>\n<section id=\"solution-content\">\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Put your name here!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"header_files.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Header Files<a class=\"headerlink\" href=\"#header-files\" title=\"Permalink to this heading\">#</a></h1><p>Sometime a pcp.h will be created in the project \u2013 this is a precompiled header file.\nTo create your own header file. Click in headers, new module, header file.\nThe new file will contain, #pragma once, which is an instruction that this file is only compiled the first time it is used, saving time in future builds.\nNow add:\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nAnd replace  #include <iostream> with  #include #include \u201cMyHeader.h\u201d.</iostream></cmath></algorithm></vector></string></iostream></p>", "a[href=\"glossary.html#term-Comments\"]": "<dt id=\"term-Comments\">Comments</dt><dd><p>Comments are text in a computer program that is only intended as a note to the progammer. Comments are useful as in-code documentation, and also allow part of program to be hidden from the compiler temporarily during development.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 300, interactive: false, theme: 'transparent', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
