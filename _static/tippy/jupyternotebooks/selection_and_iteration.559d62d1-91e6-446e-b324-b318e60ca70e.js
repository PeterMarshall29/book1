selector_to_html = {"a[href=\"glossary.html#term-Expression-Statement\"]": "<dt id=\"term-Expression-Statement\">Expression Statement</dt><dd><p>An expression followed by a semicolon.</p></dd>", "a[href=\"glossary.html#term-Control-Flow\"]": "<dt id=\"term-Control-Flow\">Control Flow</dt><dd><p>The sequential flow of <em><strong>control</strong></em> through the program - the programmes statement that is being executed at each instant is said to have <em>control</em> of the processor. The order in which individual statements, instructions, or function calls of an imperative program are executed, or evaluated.</p></dd>", "a[href=\"if_statements.html#if\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">If Statements<a class=\"headerlink\" href=\"#if-statements\" title=\"Permalink to this heading\">#</a></h1><p>The if-statement is used to choose between two possible paths.</p><p>At its simplest, an if block can change something depending on a condition</p>", "a[href=\"while_loops.html#while\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">While Loops<a class=\"headerlink\" href=\"#while-loops\" title=\"Permalink to this heading\">#</a></h1><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">while</span></code> statement will repeatedly execute a sequence of code statements until a condition becomes false.</p><p>For the while-statement, the condition is checked before each execution.</p>", "a[href=\"#selection-and-iteration\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Selection and Iteration<a class=\"headerlink\" href=\"#selection-and-iteration\" title=\"Permalink to this heading\">#</a></h1><p>Selection and iteration statements are control flow statements - they control the sequential flow of the execution of a programme.</p><p>The <a class=\"reference internal\" href=\"glossary.html#term-Control-Flow\"><span class=\"xref std std-term\">control flow</span></a> refers to the order in which all its statements are executed.</p>", "a[href=\"glossary.html#term-Code-Block\"]": "<dt id=\"term-Code-Block\">Code-Block</dt><dd><p>Sequence of <a class=\"reference internal\" href=\"#term-Statements\"><span class=\"xref std std-term\">statements</span></a> enclosed by curly braces <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code>. Also called a <a class=\"reference internal\" href=\"#term-Compound-Statement\"><span class=\"xref std std-term\">compound statement</span></a>.</p></dd>", "a[href=\"glossary.html#term-Type\"]": "<dt id=\"term-Type\">Type</dt><dd><p>A type defines the proper use of a name or an expression.</p></dd>", "a[href=\"#jump-statement\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Jump Statement<a class=\"headerlink\" href=\"#jump-statement\" title=\"Permalink to this heading\">#</a></h2><p>Jump Statements unconditionally transfers control to another part of the programme.</p><p>The available Jump Statements in C++ are.</p>", "a[href=\"#selection\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Selection<a class=\"headerlink\" href=\"#selection\" title=\"Permalink to this heading\">#</a></h2><p>Selection statements conditonally change the control flow.</p><p>A decison is made to follow one of two possible flows, depending on whether a condition is found to be true or false at the time of checking.</p>", "a[href=\"glossary.html#term-Value\"]": "<dt id=\"term-Value\">Value</dt><dd><p>The literal stored in a variable. Other usages, see <a class=\"reference internal\" href=\"#term-Value-Categories\"><span class=\"xref std std-term\">Value Categories</span></a>.</p></dd>", "a[href=\"glossary.html#term-Null-Statement\"]": "<dt id=\"term-Null-Statement\">Null Statement</dt><dd><p>The <a class=\"reference internal\" href=\"#term-Empty-Statement\"><span class=\"xref std std-term\">Empty statement</span></a>: valid in C++ and can be used in certain scenarios where a statement is syntactically required but no action is needed.</p></dd>", "a[href=\"for_loops.html#for\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">For loops<a class=\"headerlink\" href=\"#for-loops\" title=\"Permalink to this heading\">#</a></h1><p>The <a class=\"reference internal\" href=\"glossary.html#term-For-Statement\"><span class=\"xref std std-term\">for-statement</span></a> conditionally executes a statement, or code block, repeatedly; also known as the <a class=\"reference internal\" href=\"glossary.html#term-For-loop\"><span class=\"xref std std-term\">for-loop</span></a>, and is the most frequently used and important iteration control structure in C++.</p>", "a[href=\"#iteration\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Iteration<a class=\"headerlink\" href=\"#iteration\" title=\"Permalink to this heading\">#</a></h2><p>Computer programmes often repeat the same execution of the same lines of code - Iteration statements instruct the computer to repeat the same statements a finite number of times, or until a testable condition changes.</p><p>Iterations statements in C++ are the <a class=\"reference internal\" href=\"for_loops.html#for\"><span class=\"std std-ref\">for</span></a>-statement, the <a class=\"reference internal\" href=\"while_loops.html#while\"><span class=\"std std-ref\">while</span></a>-statement, the do-while-statement, and the range-for statement.</p>", "a[href=\"switch_statements.html#switch\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Switch Statements<a class=\"headerlink\" href=\"#switch-statements\" title=\"Permalink to this heading\">#</a></h1><p>An alternative to an if-statement ladder is the switch-statement.</p><p>A switch statement is generally easier to read than nested if statements.</p>", "a[href=\"glossary.html#term-Empty-Statement\"]": "<dt id=\"term-Empty-Statement\">Empty Statement</dt><dd><p>A statement that consists of only a semicolon <code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code>. It does nothing and is often referred to as a <a class=\"reference internal\" href=\"#term-Null-Statement\"><span class=\"xref std std-term\">null statement</span></a>. Empty statements are used where the syntax requires a statement but the contents are optionally not required, to provide an empty body to a for or while loop, or to carry a label in the end of a compound statement.</p></dd>", "a[href=\"#examplep1\"]": "<div class=\"code_example dropdown admonition\" id=\"examplep1\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Code Example 32 </span></p>\n<section id=\"code_example-content\">\n<p>This is the c++ equivalent of  Wheeler\u2019s programme.</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown note admonition\" id=\"explanationp1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplep1\"> Code Example 32</a></p>\n<section id=\"code_explanation-content\">\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Control-Flow-Statements\"]": "<dt id=\"term-Control-Flow-Statements\">Control Flow Statements</dt><dd><p>Selection and iteration statements: <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">switch</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">while</span></code></p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
