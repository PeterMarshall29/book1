selector_to_html = {"a[href=\"jupyternotebooks/initialisation.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialisation<a class=\"headerlink\" href=\"#initialisation\" title=\"Permalink to this heading\">#</a></h1><p><a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Initialisation\"><span class=\"xref std std-term\">Initialisation</span></a> is the setting of the initial value of a variable at the time of <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Construction\"><span class=\"xref std std-term\">construction</span></a>.</p><p><a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Definition\"><span class=\"xref std std-term\">Definition</span></a> is <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Declaration\"><span class=\"xref std std-term\">declaration</span></a> combined with initialisation.</p>", "a[href=\"jupyternotebooks/glossary.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Glossary<a class=\"headerlink\" href=\"#glossary\" title=\"Permalink to this heading\">#</a></h1>", "a[href=\"jupyternotebooks/header_files.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Header Files<a class=\"headerlink\" href=\"#header-files\" title=\"Permalink to this heading\">#</a></h1><p>Sometime a pcp.h will be created in the project \u2013 this is a precompiled header file.\nTo create your own header file. Click in headers, new module, header file.\nThe new file will contain, #pragma once, which is an instruction that this file is only compiled the first time it is used, saving time in future builds.\nNow add:\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nAnd replace  #include <iostream> with  #include #include \u201cMyHeader.h\u201d.</iostream></cmath></algorithm></vector></string></iostream></p>", "a[href=\"jupyternotebooks/if_statements.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">If Statements<a class=\"headerlink\" href=\"#if-statements\" title=\"Permalink to this heading\">#</a></h1><p>The if-statement is used to select between two alternatives - changing what the program does each time it runs depending on the choice made at each if-statement.</p><p>At its simplest, an if-statement causes another statement or a code-block to be executed if a condition is true and does nothing if the condition is false.</p>", "a[href=\"jupyternotebooks/firstprogram.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">First C++ Program<a class=\"headerlink\" href=\"#first-c-program\" title=\"Permalink to this heading\">#</a></h1><p>The first program that most people ever write simply prints \u201cHello, World!\u201d to a display device, mainly because it has become a tradition to teach this first. Printing words to screen is also the simplest way to confirm that your software is correctly installed on your system.</p>", "a[href=\"jupyternotebooks/objects_values_variables_and_constants.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Objects, Values, Variables, and Constants<a class=\"headerlink\" href=\"#objects-values-variables-and-constants\" title=\"Permalink to this heading\">#</a></h1><p>The C++ language is composed of a large number of <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Entities\"><span class=\"xref std std-term\">entities</span></a>, including: <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Values\"><span class=\"xref std std-term\">values</span></a>, <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Objects\"><span class=\"xref std std-term\">objects</span></a>, <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-References\"><span class=\"xref std std-term\">references</span></a>, <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Functions\"><span class=\"xref std std-term\">functions</span></a>, <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Enumerations\"><span class=\"xref std std-term\">enumerations</span></a>, <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Types\"><span class=\"xref std std-term\">types</span></a>, <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Class-Members\"><span class=\"xref std std-term\">class members</span></a>, <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Templates\"><span class=\"xref std std-term\">templates</span></a>, and <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Namespaces\"><span class=\"xref std std-term\">namespaces</span></a> (and a few more advanced examples).</p><p>Each instance of an any entity needed by the program is introduced by a <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Declaration\"><span class=\"xref std std-term\">declaration</span></a> e.g. an integer type variable called \u2018myInt\u2019 would be declared using <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span> <span class=\"pre\">myInt;</span></code>. A declaration is not enough for the variable to be used, but it is useful to separate the announcement of the variable type and name, from the details of its implementation.</p>", "a[href=\"jupyternotebooks/coding_best_practices.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Best Practices in Coding<a class=\"headerlink\" href=\"#best-practices-in-coding\" title=\"Permalink to this heading\">#</a></h1><p>The aim of any programmer should be to write programs with code that is easy to maintain and easy for other programmers to reuse.</p><p>Badly written code is:</p>", "a[href=\"jupyternotebooks/while_loops.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">While Loops<a class=\"headerlink\" href=\"#while-loops\" title=\"Permalink to this heading\">#</a></h1><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">while</span></code> statement will repeatedly execute a sequence of code statements until a condition becomes false.</p><p>The conditional expression in the while-statement is evaluated before each execution - alternatively the <code class=\"docutils literal notranslate\"><span class=\"pre\">do-while</span></code> statement guarantees the code-block is executed at least once by not checking the condition until after the first execution.</p>", "a[href=\"jupyternotebooks/scope.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Scope<a class=\"headerlink\" href=\"#scope\" title=\"Permalink to this heading\">#</a></h1><p>Different distinguishable parts of a program\u2019s structure are called <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Scopes\"><span class=\"xref std std-term\">scopes</span></a>; for example, the statements inside different functions are said to have different scope.</p><p>The location of a declaration introduces the identified entity into the scope at that location.</p>", "a[href=\"jupyternotebooks/introduction_to_programming.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Introduction to Computer Programming<a class=\"headerlink\" href=\"#introduction-to-computer-programming\" title=\"Permalink to this heading\">#</a></h1><h2>Computer Programmes<a class=\"headerlink\" href=\"#computer-programmes\" title=\"Permalink to this heading\">#</a></h2><p>Computer programmes are everywhere - not just inside computers. Your digital watch (if you are still wearing a watch\u2026), calculator, smart speaker, and car are running <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Embedded-Programmes\"><span class=\"xref std std-term\">embedded programmes</span></a>.</p><p>A computer program is a sequence of instructions that tell a computer (and other devices) what to do. When the program runs, the computer\u2019s processor interprets and acts on each instruction and then moves on to the next instruction until the program completes execution.</p>", "a[href=\"jupyternotebooks/arrays.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Arrays in C++<a class=\"headerlink\" href=\"#arrays-in-c\" title=\"Permalink to this heading\">#</a></h1><p>All computing languages use containers to collect multiple elements together into a single object, e.g. collecting a list of 5 numbers under a single variable named <code class=\"docutils literal notranslate\"><span class=\"pre\">myList</span></code> .</p><p>An <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Array\"><span class=\"xref std std-term\">array</span></a> is the C++ fundamental method for representing a sequence of objects in memory, part of the core language.</p>", "a[href=\"jupyternotebooks/the_cpp_language.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The C++ Language<a class=\"headerlink\" href=\"#the-c-language\" title=\"Permalink to this heading\">#</a></h1><p>The <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/C%2B%2B\">C++</a> language is one of the most powerful and widely used programming languages available today. It was created by Danish computer scientist <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bjarne_Stroustrup\">Bjarne_Stroustrup</a> and first released in 1985. C++ is a high-level, general-purpose language that can write code to run from the glass (building apps with graphical user interfaces) down to the metal (direct control of hardware and manipulation of memory).</p>", "a[href=\"jupyternotebooks/introduction_to_functions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Functions<a class=\"headerlink\" href=\"#functions\" title=\"Permalink to this heading\">#</a></h1><p>Programmers often want to use the same <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Code-Block\"><span class=\"xref std std-term\">code-block</span></a> repeatedly - in the same program, or across many programmes.</p><p>A code-block can be made reusable by encapsulating it into a function.</p>", "a[href=\"jupyternotebooks/switch_statements.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Switch Statements<a class=\"headerlink\" href=\"#switch-statements\" title=\"Permalink to this heading\">#</a></h1><p>An alternative to the if-else-statement ladder is the switch-statement.</p><p>A switch statement is generally easier to read than nested if-else-statements.</p>", "a[href=\"jupyternotebooks/solutions_to_exercises.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Solutions to Exercises<a class=\"headerlink\" href=\"#solutions-to-exercises\" title=\"Permalink to this heading\">#</a></h1>", "a[href=\"jupyternotebooks/vector.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Vectors<a class=\"headerlink\" href=\"#vectors\" title=\"Permalink to this heading\">#</a></h1><p>In C++, there are a variety of objects that can be used to store multiple values of the same type in a single variable including <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;vector&gt;</span></code> , <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;array&gt;</span></code> , and simple arrays.</p><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;vector&gt;</span></code> library provides the most flexible method - a <code class=\"docutils literal notranslate\"><span class=\"pre\">std::vector</span></code> is a sequence of elements that can be accessed by their index using <code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> , the <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Subscript-Operator\"><span class=\"xref std std-term\">subscript operator</span></a>.</p>", "a[href=\"jupyternotebooks/selection_and_iteration.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Selection and Iteration<a class=\"headerlink\" href=\"#selection-and-iteration\" title=\"Permalink to this heading\">#</a></h1><p>Selection and iteration statements are control flow statements - they control the sequential flow of the execution of a program.</p><p><a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Control-Flow\"><span class=\"xref std std-term\">Control flow</span></a> refers to the order in which the program\u2019s statements are executed.</p>", "a[href=\"jupyternotebooks/types.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Types in C++<a class=\"headerlink\" href=\"#types-in-c\" title=\"Permalink to this heading\">#</a></h1><p>The <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Type\"><span class=\"xref std std-term\">type</span></a> of a variable defines its properties, the rules it must obey, and the set of operators and functions available to members of that type.</p><p>For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">+</span></code> behaves differently when used an <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Infix-Operator\"><span class=\"xref std std-term\">infix operator</span></a> between two integers, compared to between two strings.</p>", "a[href=\"jupyternotebooks/for_loops.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">For loops<a class=\"headerlink\" href=\"#for-loops\" title=\"Permalink to this heading\">#</a></h1><p>The <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-For-Statement\"><span class=\"xref std std-term\">for-statement</span></a> conditionally executes a statement, or a code-block, repeatedly. Also known as the <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-For-loop\"><span class=\"xref std std-term\">for-loop</span></a>, it is the most frequently used and most important iteration control structure in C++.</p>", "a[href=\"jupyternotebooks/operations_and_operators.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Operations and Operators<a class=\"headerlink\" href=\"#operations-and-operators\" title=\"Permalink to this heading\">#</a></h1><h2>Expressions<a class=\"headerlink\" href=\"#expressions\" title=\"Permalink to this heading\">#</a></h2><p>An expression is a sequence of operators and their operands, that specifies a computation.</p><p>Expression evaluation may produce a result (e.g. evaluation of 2 + 2 produces the result 4) and may generate side-effects (unexpected behaviours).</p>", "a[href=\"jupyternotebooks/introduction_to_pointers.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers<a class=\"headerlink\" href=\"#pointers\" title=\"Permalink to this heading\">#</a></h1><p>An <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Object\"><span class=\"xref std std-term\">object</span></a> in C++ is a region of memory holding a value. Each region of memory can also be identified by its <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Memory-Address\"><span class=\"xref std std-term\">memory address</span></a>.</p><p>The value of an object can be accessed using either its identifier, or its address. Reference to an object\u2019s address, instead of its value, can make a program more efficient, and access to memory addresses is useful for memory management.</p>", "a[href=\"#introduction-to-the-c-programming-language\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Introduction to the C++ Programming Language<a class=\"headerlink\" href=\"#introduction-to-the-c-programming-language\" title=\"Permalink to this heading\">#</a></h1><p>This jupyter-book is intended to introduce the C++ language during the preliminary weeks of the Computational Physics (Part A) module at Loughbourough University.</p><p>The module will transition to working in Visual Studio in week 4.</p>", "a[href=\"jupyternotebooks/approachs_to_learning.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">How to Learn C++<a class=\"headerlink\" href=\"#how-to-learn-c\" title=\"Permalink to this heading\">#</a></h1><p>There is no big secret to learning C++.</p><p>Computer languages are just complicated sets of instructions. It can be difficult at first to work out what the cppreference website or textbooks are telling you because of the large amount of new vocabulary.</p>", "a[href=\"jupyternotebooks/basic_ideas_and_definitons.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Basic Concepts<a class=\"headerlink\" href=\"#basic-concepts\" title=\"Permalink to this heading\">#</a></h1><p>Once you have mastered some basic components of the C++ language, learning the language becomes much easier, because you will be able to write simple programmes to try out each new concept.</p><p>This page leads you through some basic exercises, much of the explanation is left until later chapters - this page is not intended to present the full syntax.</p>", "a[href=\"jupyternotebooks/introduction_to_cpp_in_vscode.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">C++ in Visual Studio<a class=\"headerlink\" href=\"#c-in-visual-studio\" title=\"Permalink to this heading\">#</a></h1><p>Visual Studio is a comprehensive Integrated Development Environment (IDE) developed by Microsoft - we will be using the community edition for much of this module.</p><p>VS is designed to facilitate the entire software development lifecycle, from writing and editing code to debugging, building, and deploying applications.</p>", "a[href=\"jupyternotebooks/input_and_output.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Input and Output<a class=\"headerlink\" href=\"#input-and-output\" title=\"Permalink to this heading\">#</a></h1><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;iostream&gt;</span></code> component of the <a class=\"reference internal\" href=\"jupyternotebooks/glossary.html#term-Standard-Library\"><span class=\"xref std std-term\">standard library</span></a> provides the tools used to interact with programmes, using the keyboard and computer display for input and output.</p><p>These basic functions are vital to learning programming because they enable the programmer to follow the progress of a program\u2019s execution - without some output to the display you will have little insight into what the program is doing.</p>", "a[href=\"jupyternotebooks/exercise1.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Exercises Week 1<a class=\"headerlink\" href=\"#exercises-week-1\" title=\"Permalink to this heading\">#</a></h1>", "a[href=\"jupyternotebooks/identifiers.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Identifiers and Declarations<a class=\"headerlink\" href=\"#identifiers-and-declarations\" title=\"Permalink to this heading\">#</a></h1><p>Most entities in the C++ language, such as variables, functions, and classes, have an identifier (a name).</p><p>Writing a program usually requires multiple instances of different entities to be created - each must be given a unique identifier, which is then used within the program text to represent the entity, or its value.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
