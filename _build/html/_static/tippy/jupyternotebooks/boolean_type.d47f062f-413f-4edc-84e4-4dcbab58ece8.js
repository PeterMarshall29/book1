selector_to_html = {"a[href=\"#pointers-and-booleans\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers and Booleans<a class=\"headerlink\" href=\"#pointers-and-booleans\" title=\"Permalink to this heading\">#</a></h2><p>A pointer can be implicitly converted to a <code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span></code>. A non-null pointer converts to <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> - pointers with the value <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code> convert to <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code>.</p>", "a[href=\"#examplel6\"]": "<div class=\"code_example dropdown admonition\" id=\"examplel6\">\n<p class=\"admonition-title\">Code Example: Pointers and Booleans </p>\n<section id=\"code_example-content\">\n<p>Examples of Pointers used as Booleans</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">myFunction</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">myPointer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">myBoolean1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">myPointer</span><span class=\"p\">;</span><span class=\"w\">            </span><span class=\"c1\">// Narrowing conversion to a Boolean - not a copy!</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myBoolean1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">myBoolean2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">myPointer</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// Initialised with the Boolean result of a comparison expression</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myBoolean1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">myPointer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Pointing to an Object\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Pointing to the nullptr\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">tempInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">myPointerToTempInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">tempInt</span><span class=\"p\">;</span><span class=\"w\">     </span>\n<span class=\"w\">    </span><span class=\"n\">myFunction</span><span class=\"p\">(</span><span class=\"n\">myPointerToTempInt</span><span class=\"p\">);</span>\n<span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"n\">myPointerToTempInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">myFunction</span><span class=\"p\">(</span><span class=\"n\">myPointerToTempInt</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationl6\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplel6\"> Code Example: Pointers and Booleans </a></p>\n<section id=\"code_explanation-content\">\n<p>Note that <code class=\"docutils literal notranslate\"><span class=\"pre\">==</span></code> compares addresses (pointer values) when applied to pointers, and not the values pointed to.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">(myPointer)</span></code> is equivalent to <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">(myPointer</span> <span class=\"pre\">!=</span> <span class=\"pre\">nullptr)</span></code>. The compiler knows a Boolean is required and implicitly converts the pointer obviating the comparison expression.</p>\n<p>It is usually better to use shorter code - less chance of a mistake - and in this case we have a clear expression of testing whether the pointer is valid, i.e. it points at an actual object.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#boolean-data-type\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Boolean Data Type<a class=\"headerlink\" href=\"#boolean-data-type\" title=\"Permalink to this heading\">#</a></h1><p>Computers operate using Boolean logic i.e. the electronic circuits are a physical manifestation of two-value Boolean logic.</p><p>Boolean operations required that the computer circuits can be in one of two distinct states, representing <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code>. This is achieved in various ways, the simplest being that the voltage in a wire is either zero volts or a positive value above a threshold voltage (current systems are under 2V).</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
