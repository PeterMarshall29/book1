selector_to_html = {"a[href=\"#exampled1\"]": "<div class=\"code_example dropdown admonition\" id=\"exampled1\">\n<p class=\"admonition-title\">Code Example: Writing to File </p>\n<section id=\"code_example-content\">\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\"> 1</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"linenos\"> 2</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n<span class=\"linenos\"> 3</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;fstream&gt;</span><span class=\"c1\"> </span>\n<span class=\"linenos\"> 4</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"linenos\"> 5</span><span class=\"w\">    </span>\n<span class=\"linenos\"> 6</span><span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">fstream</span><span class=\"w\"> </span><span class=\"n\">outputFileStream</span><span class=\"p\">(</span><span class=\"s\">\"exampleFileName.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">out</span><span class=\"p\">);</span>\n<span class=\"linenos\"> 7</span><span class=\"w\">    </span><span class=\"c1\">//std::ofstream outputFileStream(\"exampleFileName.txt\");</span>\n<span class=\"linenos\"> 8</span><span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">value1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span>\n<span class=\"linenos\"> 9</span><span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">value2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"apples\"</span><span class=\"p\">;</span>\n<span class=\"linenos\">10</span><span class=\"w\">    </span>\n<span class=\"linenos\">11</span><span class=\"w\">    </span><span class=\"n\">outputFileStream</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">value1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\", </span><span class=\"se\">\\t</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">value2</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"linenos\">12</span>\n<span class=\"linenos\">13</span><span class=\"w\">    </span><span class=\"c1\">// optionally throw error if if the file is not open.</span>\n<span class=\"linenos\">14</span><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">outputFileStream</span><span class=\"p\">.</span><span class=\"n\">is_open</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"linenos\">15</span><span class=\"w\">        </span><span class=\"n\">outputFileStream</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"linenos\">16</span><span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Data successfully written to the file!\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"linenos\">17</span><span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"linenos\">18</span><span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"linenos\">19</span><span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Error: Unable to open the file for writing.\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"linenos\">20</span><span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"linenos\">21</span><span class=\"w\">    </span>\n<span class=\"linenos\">22</span><span class=\"w\">    </span><span class=\"n\">outputFileStream</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n<span class=\"linenos\">23</span><span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"linenos\">24</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationd1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampled1\"> Code Example: Writing to File </a></p>\n<section id=\"code_explanation-content\">\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">std::fstream</span> <span class=\"pre\">streamName(\"fileName.txt\",</span> <span class=\"pre\">std::ios::out);</span></code> is equivalent to <code class=\"docutils literal notranslate\"><span class=\"pre\">std::ofstream</span> <span class=\"pre\">streamName</span> <span class=\"pre\">(\"fileName.txt\");</span></code></p>\n<p>Both create a file-stream named <code class=\"docutils literal notranslate\"><span class=\"pre\">streamName</span></code> and create and open a new file called \u201cfileName.txt\u201d associated with the stream.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&lt;</span></code> the insertion operator inserts formatted information into the file.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">is_open()</span></code> is a member function that checks the stream has an associate file.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">close()</span></code> is good practice; ensure the stream is closed and the file is ready.</p>\n<p>IOStreams can be in one of 4 states, which can be checked by the program; good(), eof(), and fail(). If the file stream fails to open, the stream is in the <code class=\"docutils literal notranslate\"><span class=\"pre\">bad()</span></code> state, which may be a result of using a non-standard operating system. More details can be found in the <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/io/basic_fstream.html\">C++ Reference</a></p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">std::ios::out</span></code> is a <strong>stream mode parameter</strong>. There is also an equivalent <code class=\"docutils literal notranslate\"><span class=\"pre\">std::fstream::out</span></code>; since <code class=\"docutils literal notranslate\"><span class=\"pre\">fstream</span></code> inherits from <code class=\"docutils literal notranslate\"><span class=\"pre\">ios</span></code>, and using the parent is preferable because it is used elsewhere too.</p>\n<div class=\"pst-scrollable-table-container\"><table class=\"table\" id=\"stream-modes\">\n<thead>\n<tr class=\"row-odd\"><th class=\"head\"><p>Mode</p></th>\n<th class=\"head\"><p>Effect</p></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"row-even\"><td><p>ios_base::app</p></td>\n<td><p>\u201cappend\u201d add to the end of the file</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ios_base::ate</p></td>\n<td><p>\u201cat end\u201d - opens and seeks end of file</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>os_base::in</p></td>\n<td><p>For Reading</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p>ios_base::out</p></td>\n<td><p>For writing</p></td>\n</tr>\n<tr class=\"row-even\"><td><p>ios_base::trunc</p></td>\n<td><p>Truncates the file to 0 length</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#adding-data-to-a-file\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Adding Data to a File<a class=\"headerlink\" href=\"#adding-data-to-a-file\" title=\"Permalink to this heading\">#</a></h2><p>Try changing what was written to the file and running the program again. You should find that the contents of the file have been overwritten.</p><p>You will most like want to add information to a file, rather than replace its contents, for that we use a different <strong>stream mode parameters</strong> which control the operation <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&lt;</span></code>.</p>", "a[href=\"#printing-to-file-week-7\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Printing to File (Week 7)<a class=\"headerlink\" href=\"#printing-to-file-week-7\" title=\"Permalink to this heading\">#</a></h1><p>For printing to and reading from a file, the standard library provides <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;fstream&gt;</span></code>. To only read or only write - there are also <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;ifstream&gt;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;ofstream&gt;</span></code> - both parts of <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;fstream&gt;</span></code></p><p>Try the following code: make sure you can find the file created and check its contents.</p>", "a[href=\"#reading-from-a-file\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Reading from a File<a class=\"headerlink\" href=\"#reading-from-a-file\" title=\"Permalink to this heading\">#</a></h2><p>Reading entire file or one line at a time.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
