selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/Camel_case\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/CamelCase_new.svg/330px-CamelCase_new.svg.png\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p>The writing format <b>camel case</b> is the practice of writing phrases without spaces or punctuation and with capitalized words. The format indicates the first word starting with either case, then the following words having an initial uppercase letter. Common examples include <i>YouTube</i>, <i>PowerPoint</i>, <i>HarperCollins</i>, <i>FedEx</i>, <i>iPhone</i>, <i>eBay</i>, and <i>LaGuardia</i>. Camel case is often used as a naming convention in computer programming. It is also sometimes used in online usernames such as <i>JohnSmith</i>, and to make multi-word domain names more legible, for example in promoting <i>EasyWidgetCompany.com</i>.</p>", "a[href^=\"https://en.wikipedia.org/wiki/Camel_case#\"]": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/CamelCase_new.svg/330px-CamelCase_new.svg.png\" alt=\"Wikipedia thumbnail\" style=\"float:left; margin-right:10px;\"><p>The writing format <b>camel case</b> is the practice of writing phrases without spaces or punctuation and with capitalized words. The format indicates the first word starting with either case, then the following words having an initial uppercase letter. Common examples include <i>YouTube</i>, <i>PowerPoint</i>, <i>HarperCollins</i>, <i>FedEx</i>, <i>iPhone</i>, <i>eBay</i>, and <i>LaGuardia</i>. Camel case is often used as a naming convention in computer programming. It is also sometimes used in online usernames such as <i>JohnSmith</i>, and to make multi-word domain names more legible, for example in promoting <i>EasyWidgetCompany.com</i>.</p>", "a[href=\"glossary.html#term-Class\"]": "<dt id=\"term-Class\">Class</dt><dd><p>A user-defined data type - a blueprint for creating objects, encapsulating data (attributes) and functions (methods).</p></dd>", "a[href=\"#user-defined-identifiers\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">User-defined Identifiers<a class=\"headerlink\" href=\"#user-defined-identifiers\" title=\"Permalink to this heading\">#</a></h2><p>Certain words in a C++ program have special meaning and are \u2018reserved\u2019 - meaning they cannot be used as identifiers - these are called <a class=\"reference internal\" href=\"glossary.html#term-Keywords\"><span class=\"xref std std-term\">keywords</span></a>.</p><p>Any other words may be used as identifiers, unless they have already been used in the same <a class=\"reference internal\" href=\"glossary.html#term-Scope\"><span class=\"xref std std-term\">scope</span></a>.</p>", "a[href=\"#the-structure-of-declarations\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">The Structure of Declarations<a class=\"headerlink\" href=\"#the-structure-of-declarations\" title=\"Permalink to this heading\">#</a></h3><p>The structure of a declaration is defined by the C++ grammar and has 5 basics part.</p>", "a[href=\"#keywords\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Keywords<a class=\"headerlink\" href=\"#keywords\" title=\"Permalink to this heading\">#</a></h2><p>Certain words in C++ have special meaning, known as <a class=\"reference internal\" href=\"glossary.html#term-Keywords\"><span class=\"xref std std-term\">keywords</span></a>, which are reserved for the use of the Language Standard.</p><p>The reserved keywords may not be used as object names.</p>", "a[href=\"glossary.html#term-Scope\"]": "<dt id=\"term-Scope\">Scope</dt><dd><p>The context in which a variable, function, or class is defined. May be global, namespace, class, function, block/local.</p></dd>", "a[href=\"#declaration\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Declaration<a class=\"headerlink\" href=\"#declaration\" title=\"Permalink to this heading\">#</a></h2><p>Before an identifier (name) can be used in a C++ program, it must be declared.</p><p>Declaration informs the compiler of the existence of an instance of a specified type of entity and establishes its identifier.</p>", "a[href=\"#declarators\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Declarators<a class=\"headerlink\" href=\"#declarators\" title=\"Permalink to this heading\">#</a></h2><p>A declarator is the \u2018name\u2019 of the new object found in its declaration, combined with any declarator operators/modifiers.</p><p>The type and any type-modifiers are not part of the declarator.</p>", "a[href=\"glossary.html#term-Linkage\"]": "<dt id=\"term-Linkage\">Linkage</dt><dd><p>linkage refers to how names can refer to the same entities across different scopes or translation units. Internal Linkage - Identifiers can only be seen within a translation unit. External Linkage - Identifiers can be seen in other translation units. No Linkage - Identifiers can only be seen in the scope where they are defined. Linkage is determined by how identifiers are declared, and it affects how names can refer to the same object, function, or other entity throughout the program.\nSometimes used in connection with the linker.</p></dd>", "a[href=\"glossary.html#term-Keywords\"]": "<dt id=\"term-Keywords\">Keywords</dt><dd><p>An identifier used by the C++ language standard. Keywords are reserved; they may not be declared as an identifier by a programr. <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/keywords.html\">Keywords in the C++ language</a>.</p></dd>", "a[href=\"#identifiers-and-declarations\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Identifiers and Declarations<a class=\"headerlink\" href=\"#identifiers-and-declarations\" title=\"Permalink to this heading\">#</a></h1><p>Most entities in the C++ language, such as variables, functions, and classes, have an identifier (a name).</p><p>Writing a program usually requires multiple instances of different entities to be created - each must be given a unique identifier, which is then used within the program text to represent the entity, or its value.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
