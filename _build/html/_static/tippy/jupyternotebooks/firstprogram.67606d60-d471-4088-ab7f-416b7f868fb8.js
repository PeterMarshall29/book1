selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program\"]": "<p>\nA <b>\"Hello, World!\" program</b> is usually a simple computer program that emits to the screen a message similar to \"Hello, World!\". A small piece of code in most general-purpose programming languages, this program is used to illustrate a language's basic syntax. Such a program is often the first written by a student of a new programming language, but it can also be used as a sanity check to ensure that the computer software intended to compile or run source code is correctly installed, and that its operator understands how to use it.</p>", "a[href^=\"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program#\"]": "<p>\nA <b>\"Hello, World!\" program</b> is usually a simple computer program that emits to the screen a message similar to \"Hello, World!\". A small piece of code in most general-purpose programming languages, this program is used to illustrate a language's basic syntax. Such a program is often the first written by a student of a new programming language, but it can also be used as a sanity check to ensure that the computer software intended to compile or run source code is correctly installed, and that its operator understands how to use it.</p>", "a[href=\"#exercisea1\"]": "<div class=\"exercise dropdown admonition\" id=\"exercisea1\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 1 </span></p>\n<section id=\"exercise-content\">\n<p>Try making the following changes to the above code - note what happens.</p>\n<ol class=\"arabic simple\">\n<li><p>Remove the semicolon in line 3 or 4.</p></li>\n<li><p>Remove <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> from line 3.</p></li>\n<li><p>Replace the angle brackets <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&gt;</span></code> in the first line with speechmarks <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>.</p></li>\n<li><p>Change the returned value from 0 to 1, and then to a letter.</p></li>\n<li><p>Remove the return line.</p></li>\n<li><p>Add some whitespace (spaces) to the code.</p></li>\n</ol>\n<p>Add or remove spaces anywhere in your code and run the code again. <br/>\nOr try somthing else<br/>\nor something other</p>\n<div class=\"solution hint dropdown admonition\" id=\"solutiona1\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exercisea1\"> Exercise 1</a></p>\n<section id=\"solution-content\">\n<p>1.A semicolon is required need at the end of each statement \u2013 exceptions <code class=\"docutils literal notranslate\"><span class=\"pre\">include</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">includes</span></code> and after <code class=\"docutils literal notranslate\"><span class=\"pre\">{</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">}</span></code>.\n2.<code class=\"docutils literal notranslate\"><span class=\"pre\">cout</span></code> is not part of the c++ core language and comes instead from the <strong>Standard Library</strong>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> denotes the namespace that <code class=\"docutils literal notranslate\"><span class=\"pre\">cout</span></code> belongs to (similar to a folder designation, provided you have included it).\n3. To include components of the standard library angle brackets <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&gt;</span></code> are used, but we can also include additional code written by the programmer in <a class=\"reference internal\" href=\"header_files.html\"><span class=\"doc\">**header files**</span></a>, which are included using speechmarks <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>, i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">\"myheaderfile.h\"</span></code>.</p>\n<div class=\"dropdown admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<p>More on the structure of the C++ language can be found <a class=\"reference internal\" href=\"the_cpp_language.html\"><span class=\"doc\">here</span></a></p>\n</div>\n<ol class=\"arabic simple\" start=\"4\">\n<li><p>Any number you return is converted to an integer, so a float is fine, but a string literal will cause failure.\nThe returned value is reported to whoever called the function, in the case of main() the system is the caller. In linux the returned value is used to confirm successful termination, 0 indicated success \u2013 anything else failure.</p></li>\n<li><p>This is usually only possible in the main function, but not on every platform.</p></li>\n<li><p>Whitespace is ignored in C++ - not true in other languages!</p></li>\n</ol>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#first-c-program\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">First C++ Program<a class=\"headerlink\" href=\"#first-c-program\" title=\"Link to this heading\">#</a></h1><p>The first program that most people ever write prints \u201cHello, World!\u201d the first program that most people ever write, because it is traditionally the first one taught - printing words to screen is as simple as it gets, but proves the software is correctly installed.</p>", "a[href=\"data_types.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">C++ Data Types<a class=\"headerlink\" href=\"#c-data-types\" title=\"Link to this heading\">#</a></h1><h2>Types and Declarations<a class=\"headerlink\" href=\"#types-and-declarations\" title=\"Link to this heading\">#</a></h2><p>For the compiler to make sense of the C++ code you have written, every named object must have a type, and be declared before use, and the types declared must have associate methods that match those used.</p><p>variable1 = variable2 + myFunction(variable3);</p>", "a[href=\"#codea1\"]": "<div class=\"literal-block-wrapper docutils container\" id=\"codea1\">\n<div class=\"code-block-caption\"><span class=\"caption-number\">Listing 1 </span><span class=\"caption-text\">Hello World program</span><a class=\"headerlink\" href=\"#codea1\" title=\"Link to this code\">#</a></div>\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"linenos\">2</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"hll\"><span class=\"linenos\">3</span><span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</span><span class=\"linenos\">4</span><span class=\"w\">\t</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"linenos\">5</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>", "a[href=\"the_cpp_language.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The C++ Language<a class=\"headerlink\" href=\"#the-c-language\" title=\"Link to this heading\">#</a></h1><p>Start with ideas like syntax\u2026</p><p>All the `C++ language syntax is detailed here: <a class=\"reference external\" href=\"https://en.cppreference.com/w/\">cppreference.com</a></p>", "a[href=\"the_cpp_language.html#cpplanguage\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The C++ Language<a class=\"headerlink\" href=\"#the-c-language\" title=\"Link to this heading\">#</a></h1><p>Start with ideas like syntax\u2026</p><p>All the `C++ language syntax is detailed here: <a class=\"reference external\" href=\"https://en.cppreference.com/w/\">cppreference.com</a></p>", "a[href=\"header_files.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Header Files<a class=\"headerlink\" href=\"#header-files\" title=\"Link to this heading\">#</a></h1><p>Sometime a pcp.h will be created in the project \u2013 this is a precompiled header file.\nTo create your own header file. Click in headers, new module, header file.\nThe new file will contain, #pragma once, which is an instruction that this file is only compiled the first time it is used, saving time in future builds.\nNow add:\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nAnd replace  #include <iostream> with  #include #include \u201cMyHeader.h\u201d.</iostream></cmath></algorithm></vector></string></iostream></p>", "a[href=\"#exercisea2\"]": "<div class=\"exercise dropdown admonition\" id=\"exercisea2\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 2 </span></p>\n<section id=\"exercise-content\">\n<p>This code is incorrect. Alter the code so that it runs without error and prints your name.</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"s\">\"iostreams\"</span>\n<span class=\"n\">main</span><span class=\"p\">(){</span>\n<span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"my name is, </span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"s\">\"Peter\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"solution hint dropdown admonition\" id=\"solutiona2\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exercisea2\"> Exercise 2</a></p>\n<section id=\"solution-content\">\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">\t</span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Put your name here!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">\t</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"introduction_to_functions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Functions<a class=\"headerlink\" href=\"#functions\" title=\"Link to this heading\">#</a></h1><p>We define a function when we want a separate computation with a name because doing so:</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
