selector_to_html = {"a[href=\"#initialisation\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialisation<a class=\"headerlink\" href=\"#initialisation\" title=\"Permalink to this heading\">#</a></h1><p><a class=\"reference internal\" href=\"glossary.html#term-Initialisation\"><span class=\"xref std std-term\">Initialisation</span></a> is the setting of the intial value of a variable for the first time (at the time of <a class=\"reference internal\" href=\"glossary.html#term-Construction\"><span class=\"xref std std-term\">construction</span></a>).</p><p>Definiton is therefore decalaration plus initialisation.</p>", "a[href=\"glossary.html#term-Initialiser\"]": "<dt id=\"term-Initialiser\">Initialiser</dt><dd><p>def</p></dd>", "a[href=\"#initialiser-semantics\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialiser Semantics<a class=\"headerlink\" href=\"#initialiser-semantics\" title=\"Permalink to this heading\">#</a></h2><p>If no initializer is specified for an object, the object is default-initialized.</p><p>If no initializer is specified for a reference, the program is ill-formed.</p>", "a[href=\"#initialisers\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialisers<a class=\"headerlink\" href=\"#initialisers\" title=\"Permalink to this heading\">#</a></h2><p>There a differnt ways to intialise an object.</p><p>If an <a class=\"reference internal\" href=\"glossary.html#term-Initialiser\"><span class=\"xref std std-term\">initialiser</span></a> is specified for an object, that initializer determines the initial value of an object.</p>", "a[href=\"glossary.html#term-List-Initialisation\"]": "<dt id=\"term-List-Initialisation\">List Initialisation</dt><dd><p>Initialisatin using <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code>; e.g int myInt {intial value or expression to produce the intial value}</p></dd>", "a[href=\"arithmetic_data_types.html#sizeofnumericvalues\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Max Size of Numeric Values<a class=\"headerlink\" href=\"#max-size-of-numeric-values\" title=\"Permalink to this heading\">#</a></h2><p>The maximum value that can be storde by each <a class=\"reference internal\" href=\"glossary.html#term-Numeric-Data-Type\"><span class=\"xref std std-term\">numeric data type</span></a> depends on number of bits used by the computer architecture.</p><p>Most computers use 64 bits, meaning that 64 bits are used to represent addresses in memory, allowing larger numbers to be stored.</p>", "a[href=\"#missing-inialiser\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">missing inialiser<a class=\"headerlink\" href=\"#missing-inialiser\" title=\"Permalink to this heading\">#</a></h2><p>If no initializer is specified, a <code class=\"docutils literal notranslate\"><span class=\"pre\">global</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">namespace</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">local</span> <span class=\"pre\">static</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">static</span> <span class=\"pre\">member</span></code> (static objects) is initialized to <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code> of the appropriate type. For example:</p>", "a[href=\"#empty-initialiser\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Empty initialiser<a class=\"headerlink\" href=\"#empty-initialiser\" title=\"Permalink to this heading\">#</a></h2><p>Empty Initialiser List {} is used to indicate that a default value is desired. For example:</p>", "a[href=\"glossary.html#term-Assignment-Operator\"]": "<dt id=\"term-Assignment-Operator\">Assignment Operator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">=</span></code></p></dd>", "a[href=\"glossary.html#term-Narrowing\"]": "<dt id=\"term-Narrowing\">Narrowing</dt><dd><p>A narrowing (conversion) occurs when a value is converted from one type to another and the new type is not big enough to represent all possible values of the original type; leading to data loss or undefined behaviors.</p></dd>", "a[href=\"#initialiser-lists\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialiser Lists<a class=\"headerlink\" href=\"#initialiser-lists\" title=\"Permalink to this heading\">#</a></h2><p>More complicated objects can require more than one value as an initializer. This is primarily handled by initializer\nLists delimited by { and }. For example:</p>", "a[href=\"glossary.html#term-Initialisation\"]": "<dt id=\"term-Initialisation\">Initialisation</dt><dd><p>Setting the initial value of an object. Defintion results when initialisation is added to a declaration. Initialization is different from assignment because there is no previous value involved and initialization is done by <a class=\"reference internal\" href=\"#term-Constructors\"><span class=\"xref std std-term\">constructors</span></a>.</p></dd>", "a[href=\"glossary.html#term-Construction\"]": "<dt id=\"term-Construction\">Construction</dt><dd><p>def</p></dd>", "a[href=\"glossary.html#term-Constructors\"]": "<dt id=\"term-Constructors\">Constructors</dt><dd><p>def</p></dd>", "a[href=\"#auto\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Auto<a class=\"headerlink\" href=\"#auto\" title=\"Permalink to this heading\">#</a></h2><p>The type of simple variable can be deduced fr</p><p>When defining a variable, you don\u2019t actually need to state its type explicitly when it can be deduced from the initializer:</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
