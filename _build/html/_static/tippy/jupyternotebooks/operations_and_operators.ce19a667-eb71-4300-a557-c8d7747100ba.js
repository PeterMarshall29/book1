selector_to_html = {"a[href=\"#useful-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Useful functions<a class=\"headerlink\" href=\"#useful-functions\" title=\"Permalink to this heading\">#</a></h2><p>std::max(7,8)\nstd::abs(a)</p>", "a[href=\"#order-of-evaluation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Order of evaluation<a class=\"headerlink\" href=\"#order-of-evaluation\" title=\"Permalink to this heading\">#</a></h2><p>The order of evaluation of any part of any expression, including the order of evaluation of function arguments, is usually unspecified.</p><p>The <a class=\"reference internal\" href=\"glossary.html#term-Compiler\"><span class=\"xref std std-term\">compiler</span></a> can evaluate operands and other subexpressions in any order, and may choose another order when the same expression is evaluated again.</p>", "a[href=\"glossary.html#term-Assignment\"]": "<dt id=\"term-Assignment\">Assignment</dt><dd><p>DEf</p></dd>", "a[href=\"#id1\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Operations and Operators<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this heading\">#</a></h2><p>Each type has different operators \u2013 some are overloaded. + is addition for numeric types, but concatenation for string and char</p><p>Try this code</p>", "a[href=\"#assignment-operators\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Assignment operators<a class=\"headerlink\" href=\"#assignment-operators\" title=\"Permalink to this heading\">#</a></h2><p><a class=\"reference internal\" href=\"glossary.html#term-Assignment\"><span class=\"xref std std-term\">Assignment</span></a> operators modify the value of an object.</p><p><a class=\"reference internal\" href=\"glossary.html#term-Copy-Assignment\"><span class=\"xref std std-term\">Copy Assignment</span></a> replace the contents of an object (often a value) with the contents of a second object, or a new value. The second object is unaffected</p>", "a[href=\"glossary.html#term-Copy-Assignment\"]": "<dt id=\"term-Copy-Assignment\">Copy Assignment</dt><dd><p>Replacement of the contents of one object with the contents of a second object; the second object is unaffected.</p></dd>", "a[href=\"#unspecified-behaiours\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Unspecified Behaiours<a class=\"headerlink\" href=\"#unspecified-behaiours\" title=\"Permalink to this heading\">#</a></h2><p>The behaviour of every part of your code must operate in the way you expect it to, or unexpected outcomes will result.</p><p>Unspecified behaviours are those which may vary between implementations, and which the implementation is not required to document.</p>", "a[href=\"#ternary-operators\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Ternary Operators<a class=\"headerlink\" href=\"#ternary-operators\" title=\"Permalink to this heading\">#</a></h2><p>Example:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">return</span> <span class=\"pre\">(a</span> <span class=\"pre\">&gt;=</span> <span class=\"pre\">b)</span> <span class=\"pre\">?</span> <span class=\"pre\">a</span> <span class=\"pre\">:</span> <span class=\"pre\">b;</span></code></p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">?</span></code> construct is called an arithmetic if or a conditional expression.\nThe returned value will be a if the condition is true and b if the condition is false.\nvalue of (a &gt;= b) ? a : b is a if a &gt;= b and b otherwise.\nThat is, if the condition is true, the ternary operator value a if true, otherwise value b.</p>", "a[href=\"glossary.html#term-Compiler\"]": "<dt id=\"term-Compiler\">Compiler</dt><dd><p>The part of a C++ implementation that produces object code from a translation unit. More generally compilers transform source code into other types of code, but most often into native machine code that is interpreted directly by the <a class=\"reference internal\" href=\"#term-CPU\"><span class=\"xref std std-term\">CPU</span></a>.</p></dd>", "a[href=\"#expressions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Expressions<a class=\"headerlink\" href=\"#expressions\" title=\"Permalink to this heading\">#</a></h2><p>An expression is a sequence of operators and their operands, that specifies a computation.</p><p>Expression evaluation may produce a result (e.g., evaluation of 2 + 2 produces the result 4) and may generate side-effects (e.g. evaluation of std::printf(\u201c%d\u201d, 4) prints the character \u20184\u2019 on the standard output).</p>", "a[href=\"#operations-and-operators\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Operations and Operators<a class=\"headerlink\" href=\"#operations-and-operators\" title=\"Permalink to this heading\">#</a></h1><h2>Expressions<a class=\"headerlink\" href=\"#expressions\" title=\"Permalink to this heading\">#</a></h2><p>An expression is a sequence of operators and their operands, that specifies a computation.</p><p>Expression evaluation may produce a result (e.g., evaluation of 2 + 2 produces the result 4) and may generate side-effects (e.g. evaluation of std::printf(\u201c%d\u201d, 4) prints the character \u20184\u2019 on the standard output).</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
