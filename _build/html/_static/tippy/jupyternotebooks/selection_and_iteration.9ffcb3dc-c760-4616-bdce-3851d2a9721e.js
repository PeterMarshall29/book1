selector_to_html = {"a[href=\"for_loops.html#forever\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Forever<a class=\"headerlink\" href=\"#forever\" title=\"Permalink to this heading\">#</a></h2><p>The for-statement parentheses may not be empty - the compiler will not permit it.</p><p>The minimum argument to a for-statement is <code class=\"docutils literal notranslate\"><span class=\"pre\">(;;)</span></code> .</p>", "a[href=\"#exercisep1\"]": "<div class=\"exercise dropdown admonition\" id=\"exercisep1\">\n<p class=\"admonition-title\">Exercise</p>\n<section id=\"exercise-content\">\n<p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;typeinfo&gt;</span></code> library to confirm the comparison expressions are evaluated to <code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span></code> \u2026</p>\n<div class=\"solution dropdown admonition\" id=\"jupyternotebooks/selection_and_iteration-solution-4\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exercisep1\"> Exercise</a></p>\n<section id=\"solution-content\">\n<p>Add the following:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;typeinfo&gt;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"k\">typeid</span><span class=\"p\">(</span><span class=\"n\">int1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">int2</span><span class=\"p\">).</span><span class=\"n\">name</span><span class=\"p\">()</span><span class=\"w\">  </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// and so on..</span>\n</pre></div>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Value\"]": "<dt id=\"term-Value\">Value</dt><dd><p>The literal stored in a variable. Other usages - see <a class=\"reference internal\" href=\"#term-Value-Categories\"><span class=\"xref std std-term\">Value Categories</span></a>.</p></dd>", "a[href=\"for_loops.html#for\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">For loops<a class=\"headerlink\" href=\"#for-loops\" title=\"Permalink to this heading\">#</a></h1><p>The <a class=\"reference internal\" href=\"glossary.html#term-For-Statement\"><span class=\"xref std std-term\">for-statement</span></a> conditionally executes a statement, or a code-block, repeatedly. Also known as the <a class=\"reference internal\" href=\"glossary.html#term-For-loop\"><span class=\"xref std std-term\">for-loop</span></a>, it is the most frequently used and most important iteration control structure in C++.</p>", "a[href=\"glossary.html#term-Code-Block\"]": "<dt id=\"term-Code-Block\">Code-Block</dt><dd><p>Sequence of <a class=\"reference internal\" href=\"#term-Statements\"><span class=\"xref std std-term\">statements</span></a> enclosed by curly braces <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code>. Also referred to as a <a class=\"reference internal\" href=\"#term-Compound-Statement\"><span class=\"xref std std-term\">compound statement</span></a>.</p></dd>", "a[href=\"glossary.html#term-Expression-Statement\"]": "<dt id=\"term-Expression-Statement\">Expression Statement</dt><dd><p>An expression followed by a semicolon.</p></dd>", "a[href=\"switch_statements.html#switch\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Switch Statements<a class=\"headerlink\" href=\"#switch-statements\" title=\"Permalink to this heading\">#</a></h1><p>An alternative to the if-else-statement ladder is the switch-statement.</p><p>A switch statement is generally easier to read than nested if-else-statements.</p>", "a[href=\"while_loops.html#while\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">While Loops<a class=\"headerlink\" href=\"#while-loops\" title=\"Permalink to this heading\">#</a></h1><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">while</span></code> statement will repeatedly execute a sequence of code statements until a condition becomes false.</p><p>The conditional expression in the while-statement is evaluated before each execution - alternatively the <code class=\"docutils literal notranslate\"><span class=\"pre\">do-while</span></code> statement guarantees the code-block is executed at least once by not checking the condition until after the first execution.</p>", "a[href=\"glossary.html#term-Empty-Statement\"]": "<dt id=\"term-Empty-Statement\">Empty Statement</dt><dd><p>A statement that consists of only a semicolon <code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code>. It does nothing and is often referred to as a <a class=\"reference internal\" href=\"#term-Null-Statement\"><span class=\"xref std std-term\">null statement</span></a>. Empty statements are used where the syntax requires a statement, but the contents are optionally not required, to provide an empty body to a <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">while</span></code> loop, or to carry a label at the end of a compound statement.</p></dd>", "a[href=\"if_statements.html#if\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">If Statements<a class=\"headerlink\" href=\"#if-statements\" title=\"Permalink to this heading\">#</a></h1><p>The if-statement is used to select between two alternatives - changing what the program does each time it runs depending on the choice made at each if-statement.</p><p>At its simplest, an if-statement causes another statement or a code-block to be executed if a condition is true and does nothing if the condition is false.</p>", "a[href=\"#selection\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Selection<a class=\"headerlink\" href=\"#selection\" title=\"Permalink to this heading\">#</a></h2><p>Selection statements conditionally change the control flow - a decision is made to follow one of two possible flows, depending on whether a condition is found to be true or false at the time of checking.</p><p>In C++ the selections statements are the <a class=\"reference internal\" href=\"if_statements.html#if\"><span class=\"std std-ref\">if</span></a>-statement and the <a class=\"reference internal\" href=\"switch_statements.html#switch\"><span class=\"std std-ref\">switch</span></a>-statement.</p>", "a[href=\"#selection-and-iteration\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Selection and Iteration<a class=\"headerlink\" href=\"#selection-and-iteration\" title=\"Permalink to this heading\">#</a></h1><p>Selection and iteration statements are control flow statements - they control the sequential flow of the execution of a program.</p><p><a class=\"reference internal\" href=\"glossary.html#term-Control-Flow\"><span class=\"xref std std-term\">Control flow</span></a> refers to the order in which the program\u2019s statements are executed.</p>", "a[href=\"glossary.html#term-Control-Flow\"]": "<dt id=\"term-Control-Flow\">Control Flow</dt><dd><p>The sequential flow of <em><strong>control</strong></em> through the program - the program\u2019s statement that is being executed at each instant is said to have <strong>control</strong> of the processor. The order in which individual statements, instructions, or function calls of an imperative program are executed, or evaluated.</p></dd>", "a[href=\"glossary.html#term-Type\"]": "<dt id=\"term-Type\">Type</dt><dd><p>A type defines the proper use of a name or an expression.</p></dd>", "a[href=\"#iteration\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Iteration<a class=\"headerlink\" href=\"#iteration\" title=\"Permalink to this heading\">#</a></h2><p>Computer programmes often do the same thing over and over - iteration statements are used to instruct the computer to repeatedly execute the same statements a finite number of times, or until a testable condition changes.</p><p>Iteration statements in C++ are the <a class=\"reference internal\" href=\"for_loops.html#for\"><span class=\"std std-ref\">for</span></a>-statement, the <a class=\"reference internal\" href=\"while_loops.html#while\"><span class=\"std std-ref\">while</span></a>-statement, the do-while-statement, and the range-for statement.</p>", "a[href=\"#jump-statement\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Jump Statement<a class=\"headerlink\" href=\"#jump-statement\" title=\"Permalink to this heading\">#</a></h2><p>Jump-statements unconditionally transfer control to another part of the program.</p><p>The available jump-statements in C++ are:</p>", "a[href=\"#conditions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Conditions<a class=\"headerlink\" href=\"#conditions\" title=\"Permalink to this heading\">#</a></h2><p>Selection and iteration are controlled by evaluation of a Boolean (logical) condition. The condition must evaluate to either true or false.</p><p>There are several ways to create a condition for the selection and iteration statements:</p>", "a[href=\"#examplep1\"]": "<div class=\"code_example dropdown admonition\" id=\"examplep1\">\n<p class=\"admonition-title\">Code Example: Iteration Example </p>\n<section id=\"code_example-content\">\n<p>This is the c++ equivalent of Wheeler\u2019s program.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationp1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplep1\"> Code Example: Iteration Example </a></p>\n<section id=\"code_explanation-content\">\n<p>The while loop repeats the output statement until the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> exceeds 99.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">(i</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">100)</span></code> is the condition (or loop-condition), that must be true if the loop is to run. The first time the condition is false, the program moves past the loop and continues with the next statements.</p>\n<p>The increment assignment <code class=\"docutils literal notranslate\"><span class=\"pre\">++1</span></code> cause the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> to change every loop, which:</p>\n<ol class=\"arabic simple\">\n<li><p>Is used to print an increased value on every iteration.</p></li>\n<li><p>Makes it possible for the loop to end - if <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> were not changed, the condition would remain true forever.</p></li>\n</ol>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Control-Flow-Statements\"]": "<dt id=\"term-Control-Flow-Statements\">Control Flow Statements</dt><dd><p>Selection and iteration statements: <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">switch</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">while</span></code>etc.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
