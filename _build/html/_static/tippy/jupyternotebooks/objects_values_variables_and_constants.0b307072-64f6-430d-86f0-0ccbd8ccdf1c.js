selector_to_html = {"a[href=\"glossary.html#term-Definition\"]": "<dt id=\"term-Definition\">Definition</dt><dd><p>Definitions are declarations that are sufficient to use the entity identified by the name.</p></dd>", "a[href=\"#variables\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Variables<a class=\"headerlink\" href=\"#variables\" title=\"Permalink to this heading\">#</a></h2><p>A <a class=\"reference internal\" href=\"glossary.html#term-Named-Object\"><span class=\"xref std std-term\">named object</span></a> is called a <a class=\"reference internal\" href=\"glossary.html#term-Variable\"><span class=\"xref std std-term\">variable</span></a>.</p><p>In C++ A variable is declared by stating its <strong>type</strong> followed by its <strong>name</strong> followed by <kbd class=\"kbd docutils literal notranslate\">;</kbd>.</p>", "a[href=\"glossary.html#term-Entities\"]": "<dt id=\"term-Entities\">Entities</dt><dd><p>The entities of a C++ program are values, objects, references, functions, enumerators, types, class members, templates, template specializations, and namespaces. ECS consists of three main parts:</p></dd>", "a[href=\"glossary.html#term-Values\"]": "<dt id=\"term-Values\">Values</dt><dd><p>Literals stored in a variable. Other usages, see <a class=\"reference internal\" href=\"#term-Value-Categories\"><span class=\"xref std std-term\">Value Categories</span></a>.</p></dd>", "a[href=\"glossary.html#term-Literals\"]": "<dt id=\"term-Literals\">Literals</dt><dd><p>Literals are the tokens of a C++ program that represent constant values embedded in the source code.</p></dd>", "a[href=\"glossary.html#term-Immutable\"]": "<dt id=\"term-Immutable\">Immutable</dt><dd><p>Fixed, constant, not permitted to change after initialisation.</p></dd>", "a[href=\"glossary.html#term-Objects\"]": "<dt id=\"term-Objects\">Objects</dt><dd></dd>", "a[href=\"#constants\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Constants<a class=\"headerlink\" href=\"#constants\" title=\"Permalink to this heading\">#</a></h2><p>In computer programming, variables may well be constants; i.e. the value of the variable is made <a class=\"reference internal\" href=\"glossary.html#term-Immutable\"><span class=\"xref std std-term\">immutable</span></a>, and cannot be changed after initialisation - but it is still a named object.</p><p>To create a constant, called a \u2018symbolic constant\u2019 \u2013 i.e. a name representing a constant, we can use either <code class=\"docutils literal notranslate\"><span class=\"pre\">constexpr</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">const</span></code> , both of which are modifiers that precede the type.</p>", "a[href=\"glossary.html#term-References\"]": "<dt id=\"term-References\">References</dt><dd><p>The memory address of an object.</p></dd>", "a[href=\"#objects\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Objects<a class=\"headerlink\" href=\"#objects\" title=\"Permalink to this heading\">#</a></h2><p>An <strong>object</strong> is a region of memory holding a value of a specific <strong>type</strong> - the <a class=\"reference internal\" href=\"glossary.html#term-Type\"><span class=\"xref std std-term\">type</span></a> prescribes what kind of information can be placed in the object.</p><p>We can do nothing of interest with a computer without storing data (information). The places in which data is stored are called \u201cobjects\u201d.</p>", "a[href=\"glossary.html#term-Functions\"]": "<dt id=\"term-Functions\">Functions</dt><dd><p>A named sequence of statements that can be invoked/called by a program, optionally using arguments supplied by the function call, to optional return a value to the program. The type of the function includes the number and types of argument and the type of the value returned. Functions are useful because they are reusable, making code more efficient to write and execute.</p></dd>", "a[href=\"glossary.html#term-Enumerations\"]": "<dt id=\"term-Enumerations\">Enumerations</dt><dd><p>User-defined type consisting of a set of named values.</p></dd>", "a[href=\"glossary.html#term-Class-Members\"]": "<dt id=\"term-Class-Members\">Class Members</dt><dd><p>Functions that belong to a class.</p></dd>", "a[href=\"#objects-values-variables-and-constants\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Objects, Values, Variables, and Constants<a class=\"headerlink\" href=\"#objects-values-variables-and-constants\" title=\"Permalink to this heading\">#</a></h1><p>The C++ language is composed of a large number of <a class=\"reference internal\" href=\"glossary.html#term-Entities\"><span class=\"xref std std-term\">entities</span></a>, including: <a class=\"reference internal\" href=\"glossary.html#term-Values\"><span class=\"xref std std-term\">values</span></a>, <a class=\"reference internal\" href=\"glossary.html#term-Objects\"><span class=\"xref std std-term\">objects</span></a>, <a class=\"reference internal\" href=\"glossary.html#term-References\"><span class=\"xref std std-term\">references</span></a>, <a class=\"reference internal\" href=\"glossary.html#term-Functions\"><span class=\"xref std std-term\">functions</span></a>, <a class=\"reference internal\" href=\"glossary.html#term-Enumerations\"><span class=\"xref std std-term\">enumerations</span></a>, <a class=\"reference internal\" href=\"glossary.html#term-Types\"><span class=\"xref std std-term\">types</span></a>, <a class=\"reference internal\" href=\"glossary.html#term-Class-Members\"><span class=\"xref std std-term\">class members</span></a>, <a class=\"reference internal\" href=\"glossary.html#term-Templates\"><span class=\"xref std std-term\">templates</span></a>, and <a class=\"reference internal\" href=\"glossary.html#term-Namespaces\"><span class=\"xref std std-term\">namespaces</span></a> (and a few more advanced examples).</p><p>The individual examples of each entity needed by a program are introduced by a <a class=\"reference internal\" href=\"glossary.html#term-Declaration\"><span class=\"xref std std-term\">declaration</span></a>, which associates each one with a unique <a class=\"reference internal\" href=\"glossary.html#term-Identifier\"><span class=\"xref std std-term\">identifier</span></a> and defines its <a class=\"reference internal\" href=\"glossary.html#term-Type\"><span class=\"xref std std-term\">type</span></a>.</p>", "a[href=\"glossary.html#term-Identifier\"]": "<dt id=\"term-Identifier\">Identifier</dt><dd><p>The <a class=\"reference internal\" href=\"#term-Name\"><span class=\"xref std std-term\">name</span></a> given to any <a class=\"reference internal\" href=\"#term-Entity\"><span class=\"xref std std-term\">entity</span></a> that may have a used defined name.</p></dd>", "a[href=\"glossary.html#term-Variable\"]": "<dt id=\"term-Variable\">Variable</dt><dd><p>A variable is an object or a reference that is not a non-static data member, that is introduced by a declaration - a named object in a scope.</p></dd>", "a[href=\"glossary.html#term-Declaration\"]": "<dt id=\"term-Declaration\">Declaration</dt><dd><p>Declarations introduce names into a C++ program. Each kind of entity is declared differently.</p></dd>", "a[href=\"glossary.html#term-Named-Object\"]": "<dt id=\"term-Named-Object\">Named Object</dt><dd><p>A variable.</p></dd>", "a[href=\"glossary.html#term-Templates\"]": "<dt id=\"term-Templates\">Templates</dt><dd><p>A blueprint for generic and reusable code for functions and classes</p></dd>", "a[href=\"glossary.html#term-Types\"]": "<dt id=\"term-Types\">Types</dt><dd><p>A type defines the proper use of a name or an expression.</p></dd>", "a[href=\"#values\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Values<a class=\"headerlink\" href=\"#values\" title=\"Permalink to this heading\">#</a></h2><p>The data stored in an object is called the <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> \u2013 values need not be numbers.</p><p>A value is a set of bits interpreted according to a type. For example, the value of an object containing the binary code <code class=\"docutils literal notranslate\"><span class=\"pre\">01110000</span></code>:</p>", "a[href=\"glossary.html#term-Type\"]": "<dt id=\"term-Type\">Type</dt><dd><p>A type defines the proper use of a name or an expression.</p></dd>", "a[href=\"glossary.html#term-Namespaces\"]": "<dt id=\"term-Namespaces\">Namespaces</dt><dd><p>Namespaces are used to organise programs in more manageable sections by providing a method for preventing name conflicts in large projects.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
