selector_to_html = {"a[href=\"glossary.html#term-Infix-Operator\"]": "<dt id=\"term-Infix-Operator\">Infix Operator</dt><dd><p>Operator that sits between two variables, denoting an operation using both. As opposed to unary, prefix and postfix, operators that act on one variable positioned before or after it.</p></dd>", "a[href=\"#type-aliases\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Type Aliases<a class=\"headerlink\" href=\"#type-aliases\" title=\"Permalink to this heading\">#</a></h2><p>Sometimes, we need a new name for a type.</p><p>Possible reasons include:</p>", "a[href=\"glossary.html#term-Casting-to-Type\"]": "<dt id=\"term-Casting-to-Type\">Casting to Type</dt><dd><p>Conversion of one type of data safely to another. A variable cannot change its type, so type casting occurs on assignment to a variable of the correct type.</p></dd>", "a[href=\"#fundamental-types-in-c\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Fundamental Types in C++<a class=\"headerlink\" href=\"#fundamental-types-in-c\" title=\"Permalink to this heading\">#</a></h2><p>Types defined in the <a class=\"reference internal\" href=\"glossary.html#term-Core-Language\"><span class=\"xref std std-term\">core language</span></a> are the <a class=\"reference internal\" href=\"glossary.html#term-Fundamental-Types\"><span class=\"xref std std-term\">fundamental types</span></a>:</p>", "a[href=\"glossary.html#term-Template\"]": "<dt id=\"term-Template\">Template</dt><dd><p>A blueprint for generic and reusable code for functions and classes</p></dd>", "a[href=\"#type-system-and-type-safety\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Type System and Type Safety<a class=\"headerlink\" href=\"#type-system-and-type-safety\" title=\"Permalink to this heading\">#</a></h2><p>All expressions (including literal values) are implicitly given a type by the compiler before they\u2019re evaluated.</p><p>The C++ type system is a fundamental aspect of the language - a set of rules applied by the compiler that ensure every variable, function argument, return value, and expression has a specific type.</p>", "a[href=\"#lvalue-and-rvalue\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lvalue</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">rvalue</span></code><a class=\"headerlink\" href=\"#lvalue-and-rvalue\" title=\"Permalink to this heading\">#</a></h2><p>The c++ term ``lvalue` was originally coined to mean <strong>something that can be on the left-hand side of an assignment.</strong></p><p>An <code class=\"docutils literal notranslate\"><span class=\"pre\">lvalue</span></code> is a named object, or an unnamed objected created using <code class=\"docutils literal notranslate\"><span class=\"pre\">new</span></code>.</p>", "a[href=\"glossary.html#term-Fundamental-Types\"]": "<dt id=\"term-Fundamental-Types\">Fundamental Types</dt><dd><p>Types provide by the core language.</p></dd>", "a[href=\"glossary.html#term-Class\"]": "<dt id=\"term-Class\">Class</dt><dd><p>A user-defined data type - a blueprint for creating objects, encapsulating data (attributes) and functions (methods).</p></dd>", "a[href=\"glossary.html#term-Void\"]": "<dt id=\"term-Void\">Void</dt><dd><p>Used to declare a function returns nothing. Cannot be used to declare a variable as having no type. Used to declare a pointer is of universal type i.e. void* pointer to a name thats type is not defined yet.def</p></dd>", "a[href=\"#deducing-a-type-auto-and-decltype\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Deducing a Type: auto and decltype()<a class=\"headerlink\" href=\"#deducing-a-type-auto-and-decltype\" title=\"Permalink to this heading\">#</a></h2><p>C++ provides two mechanisms for deducing a type from an expression - or rather for reporting the type that is already known to the compiler.</p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">auto</span></code> is used to deduce an object\u2019s type from its initializer; the type can be the type of a variable, a const, or a constexpr.</p>", "a[href=\"#casting-to-type\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Casting to Type<a class=\"headerlink\" href=\"#casting-to-type\" title=\"Permalink to this heading\">#</a></h2><p>Although the type of a variable cannot be changed.</p><p>The value of a variable can be copy assigned to another variable that has a different type  - not all permutations are permitted.</p>", "a[href=\"#explicit-casting\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Explicit Casting<a class=\"headerlink\" href=\"#explicit-casting\" title=\"Permalink to this heading\">#</a></h3><p>Some types may be explicitly cast to another, using a type conversion function</p><p>There are several ways to direct that a value is us</p>", "a[href=\"#types-in-c\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Types in C++<a class=\"headerlink\" href=\"#types-in-c\" title=\"Permalink to this heading\">#</a></h1><p>The <strong>type</strong> of a variable defines its properties, the rules it must obey, and the set of operators and functions available to members of each type.</p><p>For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">+</span></code> behaves differently when used an <a class=\"reference internal\" href=\"glossary.html#term-Infix-Operator\"><span class=\"xref std std-term\">infix operator</span></a> between two integers, compared to between two strings.</p>", "a[href=\"#determining-the-type-of-a-variable\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Determining the Type of a Variable<a class=\"headerlink\" href=\"#determining-the-type-of-a-variable\" title=\"Permalink to this heading\">#</a></h2><p>It is tremendously useful to be able to check the type of a variable.</p>", "a[href=\"#implicit-casting\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Implicit Casting<a class=\"headerlink\" href=\"#implicit-casting\" title=\"Permalink to this heading\">#</a></h3><p>Some types are automatically converted by the compiler if there is a mismatch and the type conversion required is one of the permitted built-in conversions - called implicit casting.</p><p>Implicit casting occurs when a single expression is found to include multiple types. e.g. attempted addition of an <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> to a <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code> - although they are both numbers, a decision needs to be made about the type of the result, and some possible operations behave differently between types, such as division.</p>", "a[href=\"glossary.html#term-Standard-Library\"]": "<dt id=\"term-Standard-Library\">Standard Library</dt><dd><p>Collection of facilities (classes and functions) available for inclusion into C++ programs \u2013 separated into namespaces.</p></dd>", "a[href=\"#c-is-a-strongly-typed-language\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">C++ is a <strong>strongly-typed language</strong>.<a class=\"headerlink\" href=\"#c-is-a-strongly-typed-language\" title=\"Permalink to this heading\">#</a></h2><p>Once a variable type is set, for example when a number is cast as a <strong>double</strong>, the type cannot be changed.</p><p>However, type conversion is possible - by copying the value from a variable of one type to a new variable of the different type.</p>", "a[href=\"glossary.html#term-Core-Language\"]": "<dt id=\"term-Core-Language\">Core Language</dt><dd><p>The fundamental components of the C++ language not found in the Standard Library. The libraries are constructed from the core language.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
