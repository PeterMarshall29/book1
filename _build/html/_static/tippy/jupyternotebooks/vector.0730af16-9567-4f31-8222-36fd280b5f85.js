selector_to_html = {"a[href=\"#multi-dimensional-vectors\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Multi-dimensional Vectors<a class=\"headerlink\" href=\"#multi-dimensional-vectors\" title=\"Permalink to this heading\">#</a></h2><p>We can define a vector of vectors.</p>", "a[href=\"#vectors\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Vectors<a class=\"headerlink\" href=\"#vectors\" title=\"Permalink to this heading\">#</a></h1><p>There are several ways to store multiple values in a single variable. <vector>, <array>, and built-in arrays.</array></vector></p><p>The <vector> library provides the most flexible method.</vector></p>", "a[href=\"#examplen2\"]": "<div class=\"code_example dropdown admonition\" id=\"examplen2\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Code Example 29 </span></p>\n<section id=\"code_example-content\">\n<p>Try this code - construct the supporting program.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">mySecondVector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"n\">mySecondVector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">);</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">mySecondVector</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation admonition\" id=\"jupyternotebooks/vector-code_explanation-3\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplen2\"> Code Example 29</a></p>\n<section id=\"code_explanation-content\">\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">push_back()</span></code> is another member function \u2013 it belongs to std::vector and must be called using the <code class=\"docutils literal notranslate\"><span class=\"pre\">.</span></code> notation.</p>\n<p>Line 3 is a range-for-statement, explained <a class=\"reference internal\" href=\"for_loops.html#range-for\"><span class=\"std std-ref\">here</span></a>.</p>\n<p>More than element may be added by <code class=\"docutils literal notranslate\"><span class=\"pre\">push_back()</span></code> by using a list.</p>\n<p>Try adding:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mySecondVector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">({</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">});</span><span class=\"w\"> </span>\n</pre></div>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"for_loops.html#range-for\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Range-For: Traversing a Vector<a class=\"headerlink\" href=\"#range-for-traversing-a-vector\" title=\"Permalink to this heading\">#</a></h2><p>The range for any vector is the half-open sequence [0 : vectorName.size() ) meaning 0 is included, but the last element is <code class=\"docutils literal notranslate\"><span class=\"pre\">vectorName.size()-1</span></code> .</p><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">range-for</span></code> loop uses this half-open sequence.</p>", "a[href=\"#accessing-or-modifying-the-elements-of-a-vector\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Accessing or Modifying the Elements of a <code class=\"docutils literal notranslate\"><span class=\"pre\">vector</span></code><a class=\"headerlink\" href=\"#accessing-or-modifying-the-elements-of-a-vector\" title=\"Permalink to this heading\">#</a></h2><p>To access or modify a vector\u2019s elements we use the index notation, or the at() function.</p>", "a[href=\"#examplen1\"]": "<div class=\"code_example dropdown admonition\" id=\"examplen1\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Code Example 28 </span></p>\n<section id=\"code_example-content\">\n<p>Try this code - construct the supporting program.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown hint admonition\" id=\"jupyternotebooks/vector-code_explanation-1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplen1\"> Code Example 28</a></p>\n<section id=\"code_explanation-content\">\n<p>This code will not work - the character output stream <code class=\"docutils literal notranslate\"><span class=\"pre\">cout</span></code> cannot print a whole vector.</p>\n<p>To print one element of the vector, we can use its index.</p>\n<div class=\"dropdown admonition\">\n<p class=\"admonition-title\">Indexing into a Vector</p>\n<p>To access or modify an individual element of a vector we use the elements index:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">vectorName</span><span class=\"p\">[..</span><span class=\"n\">element_index_here</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p>In computing, most index values start from 0!</p>\n</div>\n</div>\n<p>Try changing the ouptut line to:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n</pre></div>\n</div>\n<p>What happens if you replace 0, with 5? Find out!</p>\n<p>To output all the values of a vector we need to use an iteration statement</p>\n<p>Try this code</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"p\">.</span><span class=\"n\">capacity</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span><span class=\"w\"> </span>\n</pre></div>\n</div>\n<p>Or:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">capacity()</span></code> is a member function of the class <code class=\"docutils literal notranslate\"><span class=\"pre\">vector</span></code> and therefore must be addressed using the <code class=\"docutils literal notranslate\"><span class=\"pre\">.</span></code> notation on an instance of <code class=\"docutils literal notranslate\"><span class=\"pre\">vector</span></code>.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#adding-to-a-vector\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Adding to a Vector<a class=\"headerlink\" href=\"#adding-to-a-vector\" title=\"Permalink to this heading\">#</a></h2><p>A non-existent element cannot be accessed or assigned to in any type of vector or array.</p>", "a[href=\"#check-if-a-vector-is-empty\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Check if a Vector is Empty<a class=\"headerlink\" href=\"#check-if-a-vector-is-empty\" title=\"Permalink to this heading\">#</a></h2><p>Another useful member function checks whether a vector is empty or not.</p><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">empty()</span></code> function returns 1 (true) if the vector is empty and 0 (false) if it contains one or more elements:</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
