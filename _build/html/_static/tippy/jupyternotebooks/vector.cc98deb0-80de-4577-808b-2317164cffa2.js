selector_to_html = {"a[href=\"#useful-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Useful Functions<a class=\"headerlink\" href=\"#useful-functions\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"#examplen1\"]": "<div class=\"code_example dropdown admonition\" id=\"examplen1\">\n<p class=\"admonition-title\">Code Example: Vector Basics </p>\n<section id=\"code_example-content\">\n<p>Try this code - construct the supporting program.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/vector-code_explanation-2\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplen1\"> Code Example: Vector Basics </a></p>\n<section id=\"code_explanation-content\">\n<p>This code will not work - the first problem encountered when learning C++ is that simple character output stream <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> cannot print a whole vector or array.</p>\n<p>There is a simple solution - shown below - but we can start by only trying to print single elements of the vector using the element\u2019s index.</p>\n<div class=\"dropdown admonition\">\n<p class=\"admonition-title\">Indexing into a Vector</p>\n<p>To access or modify an individual element of a vector we use the element\u2019s index i.e. same as an array.</p>\n<p>Indices run from \u20180\u2019 to <code class=\"docutils literal notranslate\"><span class=\"pre\">(number_of_elements</span> <span class=\"pre\">-</span> <span class=\"pre\">1)</span></code> :</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">vectorName</span><span class=\"p\">[..</span><span class=\"n\">element_index_here</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p>In computing, most index values start at 0!</p>\n</div>\n</div>\n<ul class=\"simple\">\n<li><p>Try changing the ouptut line to:</p></li>\n</ul>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n</pre></div>\n</div>\n<ul class=\"simple\">\n<li><p>What happens if you replace 0, with 5? Find out!</p></li>\n</ul>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Subscript-Operator\"]": "<dt id=\"term-Subscript-Operator\">Subscript Operator</dt><dd><p>The subscript operator <code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> is used to access elements in arrays, vectors, other containers, or user-defined types - can be overloaded to provide custom behavior for objects of a class.</p></dd>", "a[href=\"#accessing-or-modifying-the-elements-of-a-vector\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Accessing or Modifying the Elements of a <code class=\"docutils literal notranslate\"><span class=\"pre\">vector</span></code><a class=\"headerlink\" href=\"#accessing-or-modifying-the-elements-of-a-vector\" title=\"Permalink to this heading\">#</a></h2><p>The <a class=\"reference internal\" href=\"glossary.html#term-Subscript-Operator\"><span class=\"xref std std-term\">subscript operator</span></a> and the element\u2019s index is used to access or modify the values contained in a vector.</p><p>A useful alternative is the <code class=\"docutils literal notranslate\"><span class=\"pre\">at()</span></code> member function.</p>", "a[href=\"#multi-dimensional-vectors\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Multi-dimensional Vectors<a class=\"headerlink\" href=\"#multi-dimensional-vectors\" title=\"Permalink to this heading\">#</a></h2><p>We can define a vector of vectors.</p>", "a[href=\"#adding-to-a-vector\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Adding to a Vector<a class=\"headerlink\" href=\"#adding-to-a-vector\" title=\"Permalink to this heading\">#</a></h2><p>A non-existent element cannot be accessed or be created by assignment in C++.</p>", "a[href=\"#vectors\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Vectors<a class=\"headerlink\" href=\"#vectors\" title=\"Permalink to this heading\">#</a></h1><p>There are several ways to store multiple values in a single variable including <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;vector&gt;</span></code> , <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;array&gt;</span></code> , and simple arrays.</p><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;vector&gt;</span></code> library provides the most flexible method.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
