selector_to_html = {"a[href=\"#useful-constants\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Useful Constants<a class=\"headerlink\" href=\"#useful-constants\" title=\"Permalink to this heading\">#</a></h2><p>By including <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;numbers&gt;</span></code> you can access useful values, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">pi</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">e</span></code>.</p><p>Accessed as <code class=\"docutils literal notranslate\"><span class=\"pre\">std::numbers::pi</span></code>.</p>", "a[href=\"#decimal-hexadecimal-octal-and-binary\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Decimal, Hexadecimal, Octal, and Binary.<a class=\"headerlink\" href=\"#decimal-hexadecimal-octal-and-binary\" title=\"Permalink to this heading\">#</a></h2><p>Integer literals may also represent numbers in octal or hexadecimal, instead of decimal or binary.</p><p>Octal is base 8. the units run from 1-7. The value 21 in octal is 17 in decimal. Octal literals start with a 0 followed by the digits of the octal number, so the octal number \u201855\u2019 would be written <code class=\"docutils literal notranslate\"><span class=\"pre\">055</span></code>. Note that the octal \u20180\u2019 remains just <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>.</p>", "a[href=\"#floating-point-literals\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Floating-Point Literals<a class=\"headerlink\" href=\"#floating-point-literals\" title=\"Permalink to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">Float</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code> are both used for <a class=\"reference internal\" href=\"glossary.html#term-Floating-Point-Numbers\"><span class=\"xref std std-term\">floating-point numbers</span></a> - \u201cdouble\u201d denotes double-precision (meaning twice as many bits are used to represent the double values in binary code).</p><p>Examples of how floating-point literals may be typed - <code class=\"docutils literal notranslate\"><span class=\"pre\">3.14</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">.14</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">-3.</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">2.99e8</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">6.63e\u221234</span></code>.</p>", "a[href=\"glossary.html#term-Integer-type\"]": "<dt id=\"term-Integer-type\">Integer type</dt><dd><p>Type for integer values (whole numbers - positive and negative and zero). May be preceded by one or two modifiers - <code class=\"docutils literal notranslate\"><span class=\"pre\">signed</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">unsigned</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">short</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">long</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">long</span> <span class=\"pre\">long</span></code>. The modifiers may be used on their own, and <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> is implied; but <code class=\"docutils literal notranslate\"><span class=\"pre\">signed</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">unsigned</span></code> may also precede <code class=\"docutils literal notranslate\"><span class=\"pre\">char</span></code>.</p></dd>", "a[href=\"#max-size-of-numeric-values\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Max Size of Numeric Values<a class=\"headerlink\" href=\"#max-size-of-numeric-values\" title=\"Permalink to this heading\">#</a></h2><p>The maximum value that can be stored by each <a class=\"reference internal\" href=\"glossary.html#term-Numeric-Data-Type\"><span class=\"xref std std-term\">numeric data type</span></a> depends on the number of bits used by the computer\u2019s architecture.</p><p>Most computers use 64 bits, meaning that 64 bits are used to represent addresses in memory, allowing larger numbers to be stored. A 64-bit architecture means that processors can load and store 64-bit floating-point numbers.</p>", "a[href=\"#integer-types\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Integer Types<a class=\"headerlink\" href=\"#integer-types\" title=\"Permalink to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> is the keyword for the default <a class=\"reference internal\" href=\"glossary.html#term-Integer-type\"><span class=\"xref std std-term\">integer type</span></a>.</p><p>There are a set of other integer types: <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> may be preceded by one or two modifiers - <code class=\"docutils literal notranslate\"><span class=\"pre\">signed</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">unsigned</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">short</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">long</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">long</span> <span class=\"pre\">long</span></code>.</p>", "a[href=\"#exampleh1\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleh1\">\n<p class=\"admonition-title\">Code Example: Size of Numeric Types </p>\n<section id=\"code_example-content\">\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;limits&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"size of long (int) \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">long</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" Bytes\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"size of long long \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">long</span><span class=\"w\"> </span><span class=\"kt\">long</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" Bytes\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"size of long long \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"mf\">1l</span><span class=\"n\">l</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" Bytes\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"largest int == \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">max</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"largest float == \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"kt\">float</span><span class=\"o\">&gt;::</span><span class=\"n\">max</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"largest double == \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;::</span><span class=\"n\">max</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"largest long double == \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"kt\">long</span><span class=\"w\"> </span><span class=\"kt\">double</span><span class=\"o\">&gt;::</span><span class=\"n\">max</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"char is signed == \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;::</span><span class=\"n\">is_signed</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationh1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleh1\"> Code Example: Size of Numeric Types </a></p>\n<section id=\"code_explanation-content\">\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Min()</span></code> is the smallest positive value.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Lowest()</span></code> is the most negative value, where applicable.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Numeric-Data-Type\"]": "<dt id=\"term-Numeric-Data-Type\">Numeric Data Type</dt><dd><p>The data types for numeric values - each represents a different type of number to different levels of precision. Includes <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code>. Some data types require additional specifiers, see the <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/language/types.html\">C++ Reference \u2013 Data Types</a></p></dd>", "a[href=\"#formatting-octal-and-hexadecimal-outputs\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Formatting Octal and Hexadecimal Outputs<a class=\"headerlink\" href=\"#formatting-octal-and-hexadecimal-outputs\" title=\"Permalink to this heading\">#</a></h3><p>Integer values can be output in octal, or hexadecimal as follows:</p>", "a[href=\"#calculations\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Calculations<a class=\"headerlink\" href=\"#calculations\" title=\"Permalink to this heading\">#</a></h2><p>It is often the case that a program will make decisions based on whether two values are identical.</p><p>A little care must be taken when dealing with floating point numbers. In some languages alternative methods to calculate the same number will yield different values.</p>", "a[href=\"#void-type\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Void Type<a class=\"headerlink\" href=\"#void-type\" title=\"Permalink to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">void</span></code> is also a type - but it has an empty set of values. Void is an incomplete type that cannot be completed (consequently, objects of type void are disallowed). There are no arrays of void, nor references to void, however, pointers to <code class=\"docutils literal notranslate\"><span class=\"pre\">void</span></code> and functions returning type <code class=\"docutils literal notranslate\"><span class=\"pre\">void</span></code> are permitted.</p>", "a[href=\"#arithmetic-data-types\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Arithmetic Data Types<a class=\"headerlink\" href=\"#arithmetic-data-types\" title=\"Permalink to this heading\">#</a></h1><p>There are a lot of numeric data types but to start learning C++ we only need two of them for general purpose computing.</p><p>The default integer type used for integers and the double type for floating-point numbers including those in scientific notation.</p>", "a[href=\"glossary.html#term-Standard-Library\"]": "<dt id=\"term-Standard-Library\">Standard Library</dt><dd><p>Collection of facilities (classes and functions) available for inclusion into C++ programmes \u2013 separated into namespaces.</p></dd>", "a[href=\"#scientific-notation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Scientific Notation<a class=\"headerlink\" href=\"#scientific-notation\" title=\"Permalink to this heading\">#</a></h2><p>Scientific notation is formatted using a lower or upper case <code class=\"docutils literal notranslate\"><span class=\"pre\">e</span></code> between the mantissa and the exponent.</p>", "a[href=\"#checking-the-size-limits-of-numeric-type-of-your-c-implementation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Checking the Size Limits of Numeric Type of Your C++ Implementation<a class=\"headerlink\" href=\"#checking-the-size-limits-of-numeric-type-of-your-c-implementation\" title=\"Permalink to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">sizeof()</span></code> returns the number of bytes used to store values of that type.</p><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;limits&gt;</span></code> component of the <a class=\"reference internal\" href=\"glossary.html#term-Standard-Library\"><span class=\"xref std std-term\">Standard Library</span></a> has some useful function such as <code class=\"docutils literal notranslate\"><span class=\"pre\">max()</span></code> that will return the largest value that can be stored in that type, and <code class=\"docutils literal notranslate\"><span class=\"pre\">lowest()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">min()</span></code>.</p>", "a[href=\"glossary.html#term-Floating-Point-Numbers\"]": "<dt id=\"term-Floating-Point-Numbers\">Floating-Point Numbers</dt><dd><p>Numbers with a decimal point. Represented in code by the addition of <code class=\"docutils literal notranslate\"><span class=\"pre\">.0</span></code> to whole numbers.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
