selector_to_html = {"a[href=\"#functions\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Functions<a class=\"headerlink\" href=\"#functions\" title=\"Permalink to this heading\">#</a></h1><p>Programmers often want to use the same <a class=\"reference internal\" href=\"glossary.html#term-Code-Block\"><span class=\"xref std std-term\">code-block</span></a> repeatedly - in the same program, or across many programmes.</p><p>A code-block can be made reusable by encapsulating it into a function.</p>", "a[href=\"#pass-by-reference-and-pass-by-constant-reference\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pass-by-Reference and Pass-by-Constant-Reference<a class=\"headerlink\" href=\"#pass-by-reference-and-pass-by-constant-reference\" title=\"Permalink to this heading\">#</a></h2><p>Calling a function using by including variable as arguments to populate a functions parameter list, is called pass-by-value.</p><p>It is often better not to pass a value directly into a function.</p>", "a[href=\"#functions-calling-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Functions Calling Functions<a class=\"headerlink\" href=\"#functions-calling-functions\" title=\"Permalink to this heading\">#</a></h2><p>Often functions call other functions. The function that makes the call, is sometimes called the \u2018caller\u2019 and the called function the \u2018callee\u2019</p><p>When one function calls another - control passes to the second function. When the second function returns, control passes back.</p>", "a[href=\"glossary.html#term-Pass-by-Reference\"]": "<dt id=\"term-Pass-by-Reference\">Pass-by-Reference</dt><dd><p>Passing a reference to a variable as the argument of a function call. Allows the modification of that variable by the function.</p></dd>", "a[href=\"glossary.html#term-Reference\"]": "<dt id=\"term-Reference\">Reference</dt><dd><p>The memory address of an object.</p></dd>", "a[href=\"glossary.html#term-Function-Declaration\"]": "<dt id=\"term-Function-Declaration\">Function Declaration</dt><dd><p>Statement of the name, types of any arguments, and the return type of a function.</p></dd>", "a[href=\"glossary.html#term-Header-Files\"]": "<dt id=\"term-Header-Files\">Header Files</dt><dd><p>Header files in C++ are essential for organizing and managing code in large projects. They contain declarations of functions, classes, variables, and other identifiers, that inform the compiler about the existence and type of these elements without providing their actual implementation. This separation allows multiple source files to share the same declarations, ensuring consistency and reducing errors, and include them wherever needed, reducing redundancy and improving code maintainability.</p></dd>", "a[href=\"glossary.html#term-Passed-by-Value\"]": "<dt id=\"term-Passed-by-Value\">Passed by Value</dt><dd><p>Passing a variable name into a function, which results in a local copy of the variable being created that may be used within the function, preserving the original.</p></dd>", "a[href=\"#default-arguments\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Default Arguments<a class=\"headerlink\" href=\"#default-arguments\" title=\"Permalink to this heading\">#</a></h2><p>Function parameters may be given default values. If a call to the function does not provide a value for a parameter, then the default value is used, otherwise the passed in value is given preference.</p><p>Default parameters must appear at the end of the parameter list, because once a parameter has a default value, all following parameters must also have default values.</p>", "a[href=\"#function-return-types\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Function Return Types<a class=\"headerlink\" href=\"#function-return-types\" title=\"Permalink to this heading\">#</a></h2><p>A function may return a value of any type (the type must be in scope).</p><p>A function may not return:</p>", "a[href=\"glossary.html#term-Function-Definition\"]": "<dt id=\"term-Function-Definition\">Function-Definition</dt><dd><p>Function declaration that includes the <a class=\"reference internal\" href=\"#term-Function-Body\"><span class=\"xref std std-term\">function-body</span></a>.</p></dd>", "a[href=\"#function-signature\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Function Signature<a class=\"headerlink\" href=\"#function-signature\" title=\"Permalink to this heading\">#</a></h2><p>Every function has a signature, which consists of its name and its parameter-type-list.</p><p>The signature also contains the enclosing namespace, unless it is a member function, when its signature contains the class of which the function is a member instead of the enclosing namespace.</p>", "a[href=\"glossary.html#term-Function-Body\"]": "<dt id=\"term-Function-Body\">Function-Body</dt><dd><p>Sequence of statements to be executed when the function is called.</p></dd>", "a[href=\"#exampleu2\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleu2\">\n<p class=\"admonition-title\">Code Example: Function Parameters and Arguments </p>\n<section id=\"code_example-content\">\n<p>Run this code.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">squareOf</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">squareOf</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationu2\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleu2\"> Code Example: Function Parameters and Arguments </a></p>\n<section id=\"code_explanation-content\">\n<p>The definition of <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf()</span></code> declares a single parameter called \u2018x\u2019 of type <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>.</p>\n<ul class=\"simple\">\n<li><p>The type of <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf()</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span> <span class=\"pre\">(int)</span></code>.</p></li>\n</ul>\n<p>To call <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf()</span></code> its name must be included in a code-statement followed by <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code> with either an integer value in the parentheses, or an integer type variable that must have been initialised with a value before the call.</p>\n<ul class=\"simple\">\n<li><p>Parameters declared in the function declaration/definition become local variables of the same name that may be used within the body of the function - having the value that was passed in.</p></li>\n<li><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf()</span></code> function returns an integer value when it is called and, in the <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> function, that value is immediately used by the character output stream - i.e. treated as an expression.</p></li>\n<li><p>If the return value is needed more than once, then it must be preserved by copy assignment to another variable.</p></li>\n<li><p>If a return value is not used, it is better practice to declare return type as <code class=\"docutils literal notranslate\"><span class=\"pre\">void</span></code>. It is also common practice to put <code class=\"docutils literal notranslate\"><span class=\"pre\">return;</span></code> at the end of a void function - though not strictly necessary.</p></li>\n</ul>\n<div class=\"note dropdown admonition\">\n<p class=\"admonition-title\">Ways to Exit a Function</p>\n<p>There are 4 ways for the program to exit a function.</p>\n<ul class=\"simple\">\n<li><p>Executing a <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span></code> statement - <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span></code> can be positioned at more than one point in a function within selection and iteration statements.</p></li>\n<li><p><a class=\"reference internal\" href=\"glossary.html#term-Falling-Through\"><span class=\"xref std std-term\">Falling through</span></a> - arriving at the end of the function code block and not finding a <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span></code> - usually only acceptable for <code class=\"docutils literal notranslate\"><span class=\"pre\">void</span></code>.</p></li>\n<li><p>Throwing an <a class=\"reference internal\" href=\"glossary.html#term-Exception\"><span class=\"xref std std-term\">exception</span></a> - this can be handled programmatically.</p></li>\n<li><p>By invoking another function that fails to return.</p></li>\n</ul>\n<p>The programmer should always ensure there is a <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span></code>, or an <code class=\"docutils literal notranslate\"><span class=\"pre\">error</span></code>, for every logically possible way out of a function.</p>\n</div>\n</section>\n</div>\n<div class=\"exercise dropdown admonition\" id=\"exerciseu2\">\n<p class=\"admonition-title\">Exercise</p>\n<section id=\"exercise-content\">\n<ol class=\"arabic simple\">\n<li><p>Correct the code so that incrementing by two in each loop is controlled solely by the for-statement argument.</p></li>\n<li><p>Instead of using the returned value directly in the <code class=\"docutils literal notranslate\"><span class=\"pre\">std::out</span></code>, assign it to a variable and use that variable in the output stream statement.</p></li>\n<li><ul class=\"simple\">\n<li><p>Try moving the definition of <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf()</span></code> to below the main function.</p></li>\n<li><p>Try moving the definition of <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf()</span></code> to inside the main function.</p></li>\n</ul>\n</li>\n<li><p>Try changing the function declaration so that it expects a parameter of type <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code>.</p></li>\n</ol>\n<div class=\"solution dropdown admonition\" id=\"solutionu2\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exerciseu2\"> Exercise</a></p>\n<section id=\"solution-content\">\n<ol class=\"arabic simple\">\n<li><p>Put <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span> <span class=\"pre\">+=</span> <span class=\"pre\">2</span></code> as the increment argument and delete <code class=\"docutils literal notranslate\"><span class=\"pre\">++i</span></code> in the function-body.</p></li>\n<li><ul class=\"simple\">\n<li><p>Adding a new integer declaration before the for-loop, <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span> <span class=\"pre\">temp;</span></code>.</p></li>\n<li><p>Copy assign the returned value inside the for-loop, <code class=\"docutils literal notranslate\"><span class=\"pre\">temp</span> <span class=\"pre\">=</span> <span class=\"pre\">squareOf(i)</span></code>.</p></li>\n<li><p>Replace <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf(i)</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">temp</span></code> inside the <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> statement.</p></li>\n</ul>\n</li>\n<li><p>The function could only be placed above <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> - because a function cannot be used before it has been declared. A separate declaration can be used to avoid this issue.</p></li>\n<li><p><strong>Integers</strong> can be converted to <strong>doubles</strong> at run-time, so the code works.</p></li>\n</ol>\n</section>\n</div>\n</section>\n</div></section>\n</div>", "a[href=\"#functions-with-arguments\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Functions with Arguments<a class=\"headerlink\" href=\"#functions-with-arguments\" title=\"Permalink to this heading\">#</a></h2><p>When a function is called values may be <em><strong>passed in</strong></em> as <a class=\"reference internal\" href=\"glossary.html#term-Arguments\"><span class=\"xref std std-term\">arguments</span></a> to the function.</p><p>These values become <a class=\"reference internal\" href=\"glossary.html#term-Local-Variables\"><span class=\"xref std std-term\">local variables</span></a> that can be used within the function. The outcome of the function call thus changes in response to the supplied variables.</p>", "a[href=\"glossary.html#term-Return-statement\"]": "<dt id=\"term-Return-statement\">Return-statement</dt><dd><p>Statement that causes a function call to end, returning control to the program/function that made the call, possibly sending a value back to the caller.</p></dd>", "a[href=\"#exerciseu2\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseu2\">\n<p class=\"admonition-title\">Exercise</p>\n<section id=\"exercise-content\">\n<ol class=\"arabic simple\">\n<li><p>Correct the code so that incrementing by two in each loop is controlled solely by the for-statement argument.</p></li>\n<li><p>Instead of using the returned value directly in the <code class=\"docutils literal notranslate\"><span class=\"pre\">std::out</span></code>, assign it to a variable and use that variable in the output stream statement.</p></li>\n<li><ul class=\"simple\">\n<li><p>Try moving the definition of <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf()</span></code> to below the main function.</p></li>\n<li><p>Try moving the definition of <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf()</span></code> to inside the main function.</p></li>\n</ul>\n</li>\n<li><p>Try changing the function declaration so that it expects a parameter of type <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code>.</p></li>\n</ol>\n<div class=\"solution dropdown admonition\" id=\"solutionu2\">\n<p class=\"admonition-title\">Solution to<a class=\"reference internal\" href=\"#exerciseu2\"> Exercise</a></p>\n<section id=\"solution-content\">\n<ol class=\"arabic simple\">\n<li><p>Put <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span> <span class=\"pre\">+=</span> <span class=\"pre\">2</span></code> as the increment argument and delete <code class=\"docutils literal notranslate\"><span class=\"pre\">++i</span></code> in the function-body.</p></li>\n<li><ul class=\"simple\">\n<li><p>Adding a new integer declaration before the for-loop, <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span> <span class=\"pre\">temp;</span></code>.</p></li>\n<li><p>Copy assign the returned value inside the for-loop, <code class=\"docutils literal notranslate\"><span class=\"pre\">temp</span> <span class=\"pre\">=</span> <span class=\"pre\">squareOf(i)</span></code>.</p></li>\n<li><p>Replace <code class=\"docutils literal notranslate\"><span class=\"pre\">squareOf(i)</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">temp</span></code> inside the <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> statement.</p></li>\n</ul>\n</li>\n<li><p>The function could only be placed above <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> - because a function cannot be used before it has been declared. A separate declaration can be used to avoid this issue.</p></li>\n<li><p><strong>Integers</strong> can be converted to <strong>doubles</strong> at run-time, so the code works.</p></li>\n</ol>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Keyword\"]": "<dt id=\"term-Keyword\">Keyword</dt><dd><p>An identifier used by the C++ language standard. Keywords are reserved; they may not be declared as an identifier by a programr. <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/keywords.html\">Keywords in the C++ language</a>.</p></dd>", "a[href=\"#function-declarations-and-definitions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Function Declarations and Definitions<a class=\"headerlink\" href=\"#function-declarations-and-definitions\" title=\"Permalink to this heading\">#</a></h2><p>Every entity, including functions, must be declared before they may be used.</p><p>A <a class=\"reference internal\" href=\"glossary.html#term-Function-Declaration\"><span class=\"xref std std-term\">function declaration</span></a> has the same form as the <a class=\"reference internal\" href=\"glossary.html#term-Function-Definition\"><span class=\"xref std std-term\">function-definition</span></a> up to the closing parenthesis, but then the declaration is terminated by a semicolon, not by the function body.</p>", "a[href=\"glossary.html#term-Constant\"]": "<dt id=\"term-Constant\">Constant</dt><dd><p>A variable or function parameter that is immutable - the value cannot be changed after it has been initialised. Set using the <code class=\"docutils literal notranslate\"><span class=\"pre\">const</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">constexpr</span></code> modifiers at declaration.</p></dd>", "a[href=\"glossary.html#term-Tuple\"]": "<dt id=\"term-Tuple\">Tuple</dt><dd><p>A container that allows grouping of multiple values of potentially different types into a single object.</p></dd>", "a[href=\"glossary.html#term-Identifier\"]": "<dt id=\"term-Identifier\">Identifier</dt><dd><p>The <a class=\"reference internal\" href=\"#term-Name\"><span class=\"xref std std-term\">name</span></a> given to any <a class=\"reference internal\" href=\"#term-Entity\"><span class=\"xref std std-term\">entity</span></a> that may have a used defined name.</p></dd>", "a[href=\"#return-type-deduction\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Return Type Deduction<a class=\"headerlink\" href=\"#return-type-deduction\" title=\"Permalink to this heading\">#</a></h2><p>If the <code class=\"docutils literal notranslate\"><span class=\"pre\">decl-specifier-seq</span></code> of the function declaration contains the keyword <code class=\"docutils literal notranslate\"><span class=\"pre\">auto</span></code> the return type will be deduced by the compiler from the type of the variable used in the return statement.</p>", "a[href=\"glossary.html#term-Passed-by-reference\"]": "<dt id=\"term-Passed-by-reference\">Passed by reference</dt><dd><p>Passing a reference to a variable as the argument of a function call. Allows the modification of that variable by the function.</p></dd>", "a[href=\"glossary.html#term-Function\"]": "<dt id=\"term-Function\">Function</dt><dd><p>A named sequence of statements that can be invoked/called by a program, optionally using arguments supplied by the function call, to optionally return a value to the program. The type of the function includes the comma separated list of the types of its argument and the type of the value returned. Functions are useful because they are reusable, making code more efficient to write and execute. Functions can be identified by a name with <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code>attached.</p></dd>", "a[href=\"#functions-with-multiple-returned-values\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Functions with multiple Returned Values<a class=\"headerlink\" href=\"#functions-with-multiple-returned-values\" title=\"Permalink to this heading\">#</a></h2><p>More than one value of more than one type can be returned from a function.</p><p>There are several ways to program a function for multiple returns.</p>", "a[href=\"#exampleu1\"]": "<div class=\"code_example dropdown admonition\" id=\"exampleu1\">\n<p class=\"admonition-title\">Code Example: Introduction to Functions </p>\n<section id=\"code_example-content\">\n<p>Run this code, which demonstrates a simple function declaration and call.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span><span class=\"c1\"> </span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">myFirstFunction</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">myFirstFunction</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationu1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#exampleu1\"> Code Example: Introduction to Functions </a></p>\n<section id=\"code_explanation-content\">\n<div class=\"sd-card sd-sphinx-override sd-mb-3 sd-shadow-sm docutils\">\n<div class=\"sd-card-body docutils\">\n<p class=\"sd-card-text\">This is the <a class=\"reference internal\" href=\"glossary.html#term-Function-Definition\"><span class=\"xref std std-term\">function-definition</span></a>.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">myFirstFunction</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<ul class=\"simple\">\n<li><p class=\"sd-card-text\">The statement(s) inside the curly braces <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code> (a code-block) are the <a class=\"reference internal\" href=\"glossary.html#term-Function-Body\"><span class=\"xref std std-term\">function-body</span></a>.</p></li>\n<li><p class=\"sd-card-text\">The function-<a class=\"reference internal\" href=\"glossary.html#term-Identifier\"><span class=\"xref std std-term\">identifier</span></a> (name) is <em><strong>myFirstFuncton</strong></em> - which is user-defined.</p></li>\n</ul>\n<p class=\"sd-card-text\">The <a class=\"reference internal\" href=\"glossary.html#term-Keyword\"><span class=\"xref std std-term\">keyword</span></a> before the identifier, specifies the type of the value that will be returned when the function completes its execution.</p>\n<ul class=\"simple\">\n<li><p class=\"sd-card-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Void</span></code> indicates that nothing is returned by this function, and therefore we do not need to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span></code> keyword.</p></li>\n<li><p class=\"sd-card-text\">The empty parentheses <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code> indicate that this function takes no <a class=\"reference internal\" href=\"glossary.html#term-Arguments\"><span class=\"xref std std-term\">arguments</span></a>. (Arguments are discussed below\u2026)</p></li>\n</ul>\n<p class=\"sd-card-text\">The type of this function is <code class=\"docutils literal notranslate\"><span class=\"pre\">void()</span></code>.</p>\n<ul class=\"simple\">\n<li><p class=\"sd-card-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> indicates that <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> returns an integer, hence we require a <a class=\"reference internal\" href=\"glossary.html#term-Return-statement\"><span class=\"xref std std-term\">return-statement</span></a> i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span> <span class=\"pre\">0;</span></code>, and the type of <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">int()</span></code>.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span></code> <a class=\"reference internal\" href=\"glossary.html#term-Keyword\"><span class=\"xref std std-term\">keyword</span></a> specifies what the function returns at the end of its execution.</p></li>\n</ul>\n<p class=\"sd-card-text\">In the example above, <code class=\"docutils literal notranslate\"><span class=\"pre\">myFirstFunction()</span></code> is effectively replaced by the returned value if there is one, after all the actions of the function have been completed.</p>\n<p class=\"sd-card-text\">If a function definition has declared that a particular type of data (an integer value in case of <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code>) will be returned, then whatever comes after the <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span></code> keyword must equate to that type or be a literal of that type.</p>\n</div>\n</div>\n<div class=\"sd-card sd-sphinx-override sd-mb-3 sd-shadow-sm docutils\">\n<div class=\"sd-card-body docutils\">\n<p class=\"sd-card-text\">This is the function-body - the code that will be executed every time the function is <em><strong>called</strong></em>.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p class=\"sd-card-text\">If there are nested blocks inside the function, the outermost block is the function body.</p>\n</div>\n</div>\n<div class=\"sd-card sd-sphinx-override sd-mb-3 sd-shadow-sm docutils\">\n<div class=\"sd-card-body docutils\">\n<p class=\"sd-card-text\">This is a <a class=\"reference internal\" href=\"glossary.html#term-1\"><span class=\"xref std std-term\">function call</span></a>.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">myFirstFunction</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n<ul class=\"simple\">\n<li><p class=\"sd-card-text\">To call a function we state its name followed by <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code>.</p></li>\n<li><p class=\"sd-card-text\">If the function takes arguments, their values must be supplied in the parentheses.</p></li>\n</ul>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p class=\"sd-card-text\">The function must be placed outside of the main function.</p>\n</div>\n<p class=\"sd-card-text\">For now, we will place the functions above the main function, but in future all functions should be placed in <a class=\"reference internal\" href=\"glossary.html#term-Header-Files\"><span class=\"xref std std-term\">header files</span></a>, using the <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span></code> directive to make them available to <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code>.</p>\n</div>\n</div>\n<div class=\"dropdown admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>The statement before the function body, followed by a <code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code> would be a <a class=\"reference internal\" href=\"glossary.html#term-Function-Declaration\"><span class=\"xref std std-term\">function declaration</span></a>, which would look like this:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">myFirstFunction</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\">   </span><span class=\"c1\">//function prototype/declaration of myFirstFunction</span>\n</pre></div>\n</div>\n</div>\n<p>Function prototypes and declarations are used in addition to their definitions to give us more flexibility over where we may put the function definition.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-1\"]": "<dt id=\"term-1\">Function Call</dt><dd><p>A function is \u2018called\u2019 or \u2018invoked\u2019 by a statement of the function name followed by the values to be passed to the function in parenthesis. Any value returned by the function can be used by <a class=\"reference internal\" href=\"#term-Copy-Assignment\"><span class=\"xref std std-term\">copy-assignment</span></a>.</p></dd>", "a[href=\"#function-templates\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Function Templates<a class=\"headerlink\" href=\"#function-templates\" title=\"Permalink to this heading\">#</a></h2><p>A function template is similar to a class template; it generates concrete functions based on the template arguments.</p><p>In many cases, the template can infer the type arguments and therefore it isn\u2019t necessary to explicitly specify them.</p>", "a[href=\"glossary.html#term-Structured-Binding\"]": "<dt id=\"term-Structured-Binding\">Structured Binding</dt><dd><p>Structured bindings allow you to decompose structured objects like tuples, arrays, or maps into individual variables for cleaner and more readable code.</p></dd>", "a[href=\"glossary.html#term-Code-Block\"]": "<dt id=\"term-Code-Block\">Code-Block</dt><dd><p>Sequence of <a class=\"reference internal\" href=\"#term-Statements\"><span class=\"xref std std-term\">statements</span></a> enclosed by curly braces <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code>. Also referred to as a <a class=\"reference internal\" href=\"#term-Compound-Statement\"><span class=\"xref std std-term\">compound statement</span></a>.</p></dd>", "a[href=\"glossary.html#term-Memory-Address\"]": "<dt id=\"term-Memory-Address\">Memory Address</dt><dd><p>A computer memory address is a unique identifier assigned to a specific location in a computer\u2019s memory, allowing the CPU and other hardware components to access and manipulate stored data efficiently. Memory addresses are typically represented as an array of hexadecimal values of a fixed length.</p></dd>", "a[href=\"glossary.html#term-Statements\"]": "<dt id=\"term-Statements\">Statements</dt><dd><p>Statements are fragments of the C++ program that are executed in sequence, or that are used to control the execution flow. The body of any function is a sequence of statements, which may include declaration statements, <a class=\"reference internal\" href=\"#term-Expression-Statements\"><span class=\"xref std std-term\">expression statements</span></a>, and return statements. Other statements include if-statements, while-statements, do-statements, and switch-statements. Simple statements end with a semicolon, but iteration and selection statements are often terminated by <code class=\"docutils literal notranslate\"><span class=\"pre\">}</span></code> ended their code block.</p></dd>", "a[href=\"glossary.html#term-Exception\"]": "<dt id=\"term-Exception\">Exception</dt><dd><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">std::exception</span></code> class provides methods for dealing with errors using the <code class=\"docutils literal notranslate\"><span class=\"pre\">throw</span></code> expression. Includes <code class=\"docutils literal notranslate\"><span class=\"pre\">std::bad_alloc</span></code> thrown when memory allocation fails, <code class=\"docutils literal notranslate\"><span class=\"pre\">std::bad_cast</span></code> thrown when a dynamic_cast fails during runtime, <code class=\"docutils literal notranslate\"><span class=\"pre\">std::bad_typeid</span></code> thrown when attempting to use typeid on a null pointer to a polymorphic type, <code class=\"docutils literal notranslate\"><span class=\"pre\">std::bad_exception</span></code> used to handle unexpected exceptions in a program, <code class=\"docutils literal notranslate\"><span class=\"pre\">std::logic_error</span></code> represents errors that can be detected before runtime, <code class=\"docutils literal notranslate\"><span class=\"pre\">std::invalid_argument</span></code> thrown when an invalid argument is passed to a function, <code class=\"docutils literal notranslate\"><span class=\"pre\">std::domain_error</span></code> thrown when a mathematically invalid domain is used, <code class=\"docutils literal notranslate\"><span class=\"pre\">std::length_error</span></code> thrown when an operation exceeds the maximum allowable size, <code class=\"docutils literal notranslate\"><span class=\"pre\">std::out_of_range</span></code>thrown when an argument is outside the expected range.</p></dd>", "a[href=\"glossary.html#term-Passing-by-Constant-Reference\"]": "<dt id=\"term-Passing-by-Constant-Reference\">Passing by Constant Reference</dt><dd><p>Passing by reference by declaring the function parameter <code class=\"docutils literal notranslate\"><span class=\"pre\">const</span></code> to prevent modification of the variable by the function\u2019s execution.</p></dd>", "a[href=\"glossary.html#term-Falling-Through\"]": "<dt id=\"term-Falling-Through\">Falling Through</dt><dd><p>When a program reaches the end of code-block and just continues onto the next statements. Causes an error for a function if a return is expected but permitted for <code class=\"docutils literal notranslate\"><span class=\"pre\">void</span></code>.</p></dd>", "a[href=\"glossary.html#term-Local-Variables\"]": "<dt id=\"term-Local-Variables\">Local Variables</dt><dd><p>Variable declared within the current scope.</p></dd>", "a[href=\"glossary.html#term-Arguments\"]": "<dt id=\"term-Arguments\">Arguments</dt><dd><p>Values passed to a function or template. For templates, the arguments are usually types.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
