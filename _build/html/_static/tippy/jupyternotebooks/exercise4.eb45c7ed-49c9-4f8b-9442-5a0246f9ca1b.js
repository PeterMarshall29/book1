selector_to_html = {"a[href=\"#exerciseex46\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseex46\">\n<p class=\"admonition-title\">Exercise  3F  </p>\n<section id=\"exercise-content\">\n<p>Write a program that:</p>\n<ul class=\"simple\">\n<li><p>Asks the user to input a series of integer values to be inserted into a new vector</p></li>\n<li><p>Stops accepting input when a letter is typed</p></li>\n<li><p>Tells the user which values have been repeated an odd number of times.</p></li>\n</ul>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">goes</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">....</span>\n</pre></div>\n</div>\n</div>\n</div>\n</section>\n</div>", "a[href=\"#exerciseex42\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseex42\">\n<p class=\"admonition-title\">Exercise  3B  </p>\n<section id=\"exercise-content\">\n<p>Write a program that ask the user for 5 integers, initialises a 5-element array with those values and then prints out the value.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">goes</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">....</span>\n</pre></div>\n</div>\n</div>\n</div>\n</section>\n</div>", "a[href=\"#exerciseex41\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseex41\">\n<p class=\"admonition-title\">Exercise  3A  </p>\n<section id=\"exercise-content\">\n<p>Write a program that demonstrates the use of a range for loop to print the elements of a vector.</p>\n<p>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> as the loop variable, and compare printing <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> to printing <code class=\"docutils literal notranslate\"><span class=\"pre\">yourVector[i]</span></code> in each iteration.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">goes</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">....</span>\n</pre></div>\n</div>\n</div>\n</div>\n</section>\n</div>", "a[href=\"#exercises-week-2-part-2\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Exercises Week 2 Part 2<a class=\"headerlink\" href=\"#exercises-week-2-part-2\" title=\"Permalink to this heading\">#</a></h1><p>Using arrays and vectors.</p>", "a[href=\"#exerciseex43\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseex43\">\n<p class=\"admonition-title\">Exercise  3C  </p>\n<section id=\"exercise-content\">\n<p>Write a program to merge two 5 element arrays into a single 10 element array and neatly print out the answer.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">goes</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">..</span>\n</pre></div>\n</div>\n</div>\n</div>\n</section>\n</div>", "a[href=\"#exerciseex45\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseex45\">\n<p class=\"admonition-title\">Exercise  3E  </p>\n<section id=\"exercise-content\">\n<p>Write a program that creates an array of integer elements that are either ones or zeros and then rearranges the array so that all the zeroes come first.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">goes</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">....</span>\n</pre></div>\n</div>\n</div>\n</div>\n</section>\n</div>", "a[href=\"#exerciseex410\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseex410\">\n<p class=\"admonition-title\">Exercise  3H  </p>\n<section id=\"exercise-content\">\n<p>The algorithms library provides functions for a variety of purposes.</p>\n<p><a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/algorithm.html\">https://en.cppreference.com/w/cpp/algorithm.html</a></p>\n<p>Investigate the \u2018sort\u2019 function <code class=\"docutils literal notranslate\"><span class=\"pre\">std::sort()</span></code> and write a program that will sort the elements of a vector into order of increasing or decreasing size.</p>\n<p>Hint: The <code class=\"docutils literal notranslate\"><span class=\"pre\">begin()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">end()</span></code> functions from <code class=\"docutils literal notranslate\"><span class=\"pre\">std::vector</span></code> might be useful.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">goes</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">....</span>\n</pre></div>\n</div>\n</div>\n</div>\n</section>\n</div>", "a[href=\"#exerciseex47\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseex47\">\n<p class=\"admonition-title\">Exercise  3G  </p>\n<section id=\"exercise-content\">\n<p>Write a program that creates a string vector and then removes any strings that contains a numeric digit.</p>\n<p>Hint: Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">std::isdigit()</span></code> function, which works on <code class=\"docutils literal notranslate\"><span class=\"pre\">char</span></code> type and comes from the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;cctype&gt;</span></code> library.</p>\n<p>Hint: Look into the use of <code class=\"docutils literal notranslate\"><span class=\"pre\">std::erase</span></code> - could this be helpful? Think about what happens to the vector - how can you make it work.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">goes</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">....</span>\n</pre></div>\n</div>\n</div>\n</div>\n</section>\n</div>", "a[href=\"#exerciseex44\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseex44\">\n<p class=\"admonition-title\">Exercise  3D  </p>\n<section id=\"exercise-content\">\n<p>Write a program that asks the user for the number of elements in their array, then the input of those elements.\nAnd then searches that array for a specific number of the users choosing and, if the number is found, reports its position in the array etc.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">goes</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">....</span>\n</pre></div>\n</div>\n</div>\n</div>\n</section>\n</div>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
