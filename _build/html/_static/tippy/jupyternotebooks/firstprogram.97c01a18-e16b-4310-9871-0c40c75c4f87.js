selector_to_html = {"a[href=\"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program\"]": "<p>\nA <b>\"Hello, World!\" program</b> is usually a simple computer program that emits to the screen a message similar to \"Hello, World!\". A small piece of code in most general-purpose programming languages, this program is used to illustrate a language's basic syntax. Such a program is often the first written by a student of a new programming language, but it can also be used as a sanity check to ensure that the computer software intended to compile or run source code is correctly installed, and that its operator understands how to use it.</p>", "a[href^=\"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program#\"]": "<p>\nA <b>\"Hello, World!\" program</b> is usually a simple computer program that emits to the screen a message similar to \"Hello, World!\". A small piece of code in most general-purpose programming languages, this program is used to illustrate a language's basic syntax. Such a program is often the first written by a student of a new programming language, but it can also be used as a sanity check to ensure that the computer software intended to compile or run source code is correctly installed, and that its operator understands how to use it.</p>", "a[href=\"header_files.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Header Files<a class=\"headerlink\" href=\"#header-files\" title=\"Permalink to this heading\">#</a></h1><p>Sometime a pcp.h will be created in the project \u2013 this is a precompiled header file.\nTo create your own header file. Click in headers, new module, header file.\nThe new file will contain, #pragma once, which is an instruction that this file is only compiled the first time it is used, saving time in future builds.\nNow add:\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nAnd replace  #include <iostream> with  #include #include \u201cMyHeader.h\u201d.</iostream></cmath></algorithm></vector></string></iostream></p>", "a[href=\"glossary.html#term-Header-Files\"]": "<dt id=\"term-Header-Files\">Header Files</dt><dd><p>Header files in C++ are essential for organizing and managing code in large projects. They contain declarations of functions, classes, variables, and other identifiers, that inform the compiler about the existence and type of these elements without providing their actual implementation. This separation allows multiple source files to share the same declarations, ensuring consistency and reducing errors, and include them wherever needed, reducing redundancy and improving code maintainability.</p></dd>", "a[href=\"glossary.html#term-Insertion-Operator\"]": "<dt id=\"term-Insertion-Operator\">Insertion Operator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;&gt;</span></code> - used with input streams to assign data to variables.</p></dd>", "a[href=\"char_and_string.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Characters and Strings<a class=\"headerlink\" href=\"#characters-and-strings\" title=\"Permalink to this heading\">#</a></h1><h2>Character Data Types<a class=\"headerlink\" href=\"#character-data-types\" title=\"Permalink to this heading\">#</a></h2><p>In C++ there are a range of character sets and character set encodings available. Char variables are represented by 8 bits, which puts a limit on the character set of 256 items.</p><p>The basic, and default character type is <code class=\"docutils literal notranslate\"><span class=\"pre\">char</span></code>. There will be no immediate need to investigate any others.</p>", "a[href=\"glossary.html#term-Case-Sensitive\"]": "<dt id=\"term-Case-Sensitive\">Case Sensitive</dt><dd><p>Upper and lower case letters are interpreted as different symbols and different values. If a keyword is all lower case, you MUST use all lower case. The name <code class=\"docutils literal notranslate\"><span class=\"pre\">myFunction</span></code> is distinct from the name <code class=\"docutils literal notranslate\"><span class=\"pre\">myfunction</span></code>. Adopting a strict convention for naming, such as <a class=\"reference internal\" href=\"#term-Camel-Case\"><span class=\"xref std std-term\">camel case</span></a> makes it easier to avoid this mistake.</p></dd>", "a[href=\"glossary.html#term-Escape-Sequence\"]": "<dt id=\"term-Escape-Sequence\">Escape Sequence</dt><dd><p>Used in programming languages to represent special characters within a string or character literal. They are identified by the prefix backslash <code class=\"docutils literal notranslate\"><span class=\"pre\">\\</span></code>. Examples are <code class=\"docutils literal notranslate\"><span class=\"pre\">\\n</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">\\t</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">\\\\</span></code> to represent \u2018newline\u2019, \u2018tab\u2019 - and to identify that a backslash is simply a backslash literal.</p></dd>", "a[href=\"#examplea1\"]": "<div class=\"code_example admonition\" id=\"examplea1\">\n<p class=\"admonition-title\">Code Example: First Program </p>\n<section id=\"code_example-content\">\n<div class=\"literal-block-wrapper docutils container\" id=\"codea1\">\n<div class=\"code-block-caption\"><span class=\"caption-number\">Listing 1 </span><span class=\"caption-text\">Hello World program</span><a class=\"headerlink\" href=\"#codea1\" title=\"Permalink to this code\">#</a></div>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"linenos\">2</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"hll\"><span class=\"linenos\">3</span><span class=\"w\">  </span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</span><span class=\"linenos\">4</span><span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"linenos\">5</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n<p>Type the above code into the empty code window below. Turn on the Live Code editor using the Rocket Icon at the top of the page.</p>\n<p>Please type the code exactly as shown - the program will fail if there are any mistakes in the \u2018syntax\u2019.</p>\n<p>In <a class=\"reference internal\" href=\"#codea1\"><span class=\"std std-ref\">Listing 1</span></a> - the highlighted statement is the instruction that the programmer actually wanted to implement - everything else is required to create a working C++ program.</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">!</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationa1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplea1\"> Code Example: First Program </a></p>\n<section id=\"code_explanation-content\">\n<p>The parts of the \u201cHello, World!\u201d program:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n</pre></div>\n</div>\n<p>C++ programs rely upon libraries - you will not get far without at least one of these, because the additional libraries include basic \u2018facilities\u2019 that your program is going to need, such as the code for the commands required to allow you to print out a value to the computer\u2019s display.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span></code> instructs the computer to provide access to the library named in the angle brackets <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&gt;</span></code>.</p>\n<p>```{syntax} <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span></code></p>\n<dl class=\"myst field-list simple\">\n<dt class=\"field-odd\">class<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p>dropdown\n<code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span></code> is a <a class=\"reference internal\" href=\"glossary.html#term-Directive\"><span class=\"xref std std-term\">directive</span></a> instructing the <a class=\"reference internal\" href=\"glossary.html#term-Preprocessor\"><span class=\"xref std std-term\">preprocessor</span></a> to copy the contents of the named library or header file into the source file.</p>\n</dd>\n</dl>\n<p>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">&lt;facility_name_here&gt;</span></code> to include <a class=\"reference internal\" href=\"glossary.html#term-Standard-Library-Facilities\"><span class=\"xref std std-term\">standard library facilities</span></a> and <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">\"header_file_name.h\"</span></code> for user-defined <a class=\"reference internal\" href=\"glossary.html#term-Header-Files\"><span class=\"xref std std-term\">header files</span></a>.</p>\n<p><a class=\"reference internal\" href=\"glossary.html#term-Standard-Library-Facilities\"><span class=\"xref std std-term\">standard library facilities</span></a> are components of the <a class=\"reference internal\" href=\"glossary.html#term-Standard-Library\"><span class=\"xref std std-term\">standard library</span></a>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>`&lt;iostream&gt;` is the part of the {term}`standard library` that contains specific functions for {term}`input` and {term}`output` i.e. writing to the computer's display and accepting inputs from the keyboard etc.\n\n```{code-block} c++\nint main() {\n**code statements go here**\nreturn 0;\n}\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> is a <a class=\"reference internal\" href=\"glossary.html#term-Function\"><span class=\"xref std std-term\">function</span></a>. Functions are explained <a class=\"reference internal\" href=\"introduction_to_functions.html\"><span class=\"doc\">here</span></a>, but you can safely leave this topic until week 3.</p>\n<p>All C++ programs require a <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> function (or an equivalent). Longer programs may have many functions - but the <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> function is always the starting point for the logical implementation of every program.</p>\n<p>Briefly:</p>\n<ul class=\"simple\">\n<li><p>\u201cmain\u201d is the name of the function.</p></li>\n<li><p>The empty parentheses (parens) `main()\u2019 indicate that the main function takes no inputs.</p></li>\n<li><p>The leading <a class=\"reference internal\" href=\"glossary.html#term-Keyword\"><span class=\"xref std std-term\">keyword</span></a> <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> indicates that when the rest of the instructions in the <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> function have been executed, the program will be end by sending (returning) an integer value.</p></li>\n</ul>\n<p>To get started - just add <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span> <span class=\"pre\">0;</span></code> to the bottom of all your <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> functions.</p>\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">cout</span></code> is the command used for writing to screen; pronounced \u201csee-out\u201d and called the <strong>character output stream</strong>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">std</span></code> identifies that <code class=\"docutils literal notranslate\"><span class=\"pre\">cout</span></code> is found in the standard library facilities - there is no need to specify which facility.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">::</span></code> is the <a class=\"reference internal\" href=\"glossary.html#term-Scope-Resolution-Operator\"><span class=\"xref std std-term\">scope resolution operator</span></a> - think of it as a way of describing the location or ownership of parts of the syntax in order to access them.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&lt;</span></code> is the <a class=\"reference internal\" href=\"glossary.html#term-Insertion-Operator\"><span class=\"xref std std-term\">insertion operator</span></a>; often called the \u2018write to\u2019 operator.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">\"Hello,</span> <span class=\"pre\">World!\\n\"</span></code> is a <code class=\"docutils literal notranslate\"><span class=\"pre\">string</span></code>. String <a class=\"reference internal\" href=\"glossary.html#term-Literals\"><span class=\"xref std std-term\">literals</span></a> are delimited (bracketed) by <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>; explained <a class=\"reference internal\" href=\"char_and_string.html\"><span class=\"doc\">here</span></a>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">\\n</span></code> is an <a class=\"reference internal\" href=\"glossary.html#term-Escape-Sequence\"><span class=\"xref std std-term\">escape sequence</span></a> - the escaped character <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code> instructs the computer to print anything after it on a new line.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#first-c-program\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">First C++ Program<a class=\"headerlink\" href=\"#first-c-program\" title=\"Permalink to this heading\">#</a></h1><p>The first program that most people ever write simply prints \u201cHello, World!\u201d to a display device, mainly because it has become a tradition to teach this first. Printing words to screen is also the simplest way to confirm that your software is correctly installed on your system.</p>", "a[href=\"#exercisea2\"]": "<div class=\"exercise dropdown admonition\" id=\"exercisea2\">\n<p class=\"admonition-title\">Exercise  Practice Fixing Syntax Errors  </p>\n<section id=\"exercise-content\">\n<p>This code is incorrect. Correct the mistakes in the syntax so that the code will run and print your name.</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"s\">\"iostreams\"</span>\n<span class=\"n\">main</span><span class=\"p\">(){</span>\n<span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"my name is, </span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"s\">\"Peter\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"solution dropdown admonition\" id=\"solutiona2\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exercisea2\"> Exercise  Practice Fixing Syntax Errors  </a></p>\n<section id=\"solution-content\">\n<p>Try not to look at the solutions until you have attempted the exercise\u2026 you will find that both your understanding and retention are improved compared to just looking at a solution.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Put your name here!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Literals\"]": "<dt id=\"term-Literals\">Literals</dt><dd><p>Literals are the tokens of a C++ program that represent constant values embedded in the source code.</p></dd>", "a[href=\"glossary.html#term-Directive\"]": "<dt id=\"term-Directive\">Directive</dt><dd><p>Also known as preprocessor directives - instructions that are processed before compilation of the C++ code begins. Directives start with <code class=\"docutils literal notranslate\"><span class=\"pre\">#</span></code> and must lie at the top of the document. Used for including files, such as libraries, and defining <a class=\"reference internal\" href=\"#term-Macros\"><span class=\"xref std std-term\">macros</span></a>, and conditional compilation (<code class=\"docutils literal notranslate\"><span class=\"pre\">#if</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">#ifdef</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">#ifndef</span></code>).</p></dd>", "a[href=\"glossary.html#term-Scope-Resolution-Operator\"]": "<dt id=\"term-Scope-Resolution-Operator\">Scope Resolution Operator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">::</span></code> - links an entity to its container; like a folder reference. The container defines the scope of the entity.</p></dd>", "a[href=\"glossary.html#term-Namespace\"]": "<dt id=\"term-Namespace\">Namespace</dt><dd><p>Entities declared inside a namespace block are placed in a namespace <a class=\"reference internal\" href=\"#term-Scope\"><span class=\"xref std std-term\">scope</span></a>, which prevents them from being mistaken for identically named entities in other scopes. Entities declared outside a namespace are in the global namespace. Users may define namespaces.</p></dd>", "a[href=\"#c-comments\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">C++ Comments<a class=\"headerlink\" href=\"#c-comments\" title=\"Permalink to this heading\">#</a></h2><p><a class=\"reference internal\" href=\"glossary.html#term-Comments\"><span class=\"xref std std-term\">Comments</span></a> are plain text added to a C++ source file that will be not part of the program - they are removed before the source code is compiled.</p><p>Comments are used as notes for anyone trying to understand the program, and reminders to the authors of what they meant when they wrote the code.</p>", "a[href=\"glossary.html#term-Standard-Library-Facilities\"]": "<dt id=\"term-Standard-Library-Facilities\">Standard Library Facilities</dt><dd><p>The individual components of the Standard Library made available using the <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">&lt;&gt;</span></code> directive.</p></dd>", "a[href=\"the_cpp_language.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">The C++ Language<a class=\"headerlink\" href=\"#the-c-language\" title=\"Permalink to this heading\">#</a></h1><p>The <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/C%2B%2B\">C++</a> language is one of the most powerful programming languages available today. It was created by Danish computer scientist <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bjarne_Stroustrup\">Bjarne_Stroustrup</a> and first released in 1985.</p><p>C++ is widely used, high-level, general-purpose language that can write code to runs from the glass (building apps with graphical user interfaces) down to the metal (direct control of hardware and manipulation of memory).</p>", "a[href=\"glossary.html#term-Floating-Point-Number\"]": "<dt id=\"term-Floating-Point-Number\">Floating-Point Number</dt><dd><p>Number with a decimal point. Represented in code by the addition of <code class=\"docutils literal notranslate\"><span class=\"pre\">.0</span></code> to whole numbers.</p></dd>", "a[href=\"glossary.html#term-Function\"]": "<dt id=\"term-Function\">Function</dt><dd><p>A named sequence of statements that can be invoked/called by a program, optionally using arguments supplied by the function call, to optionally return a value to the program. The type of the function includes the comma separated list of the types of its argument and the type of the value returned. Functions are useful because they are reusable, making code more efficient to write and execute. Functions can be identified by a name with <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code>attached.</p></dd>", "a[href=\"#codea1\"]": "<div class=\"literal-block-wrapper docutils container\" id=\"codea1\">\n<div class=\"code-block-caption\"><span class=\"caption-number\">Listing 1 </span><span class=\"caption-text\">Hello World program</span><a class=\"headerlink\" href=\"#codea1\" title=\"Permalink to this code\">#</a></div>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"linenos\">2</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"hll\"><span class=\"linenos\">3</span><span class=\"w\">  </span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</span><span class=\"linenos\">4</span><span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"linenos\">5</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>", "a[href=\"glossary.html#term-Keyword\"]": "<dt id=\"term-Keyword\">Keyword</dt><dd><p>An identifier used by the C++ language standard. Keywords are reserved; they may not be declared as an identifier by a programr. <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/keywords.html\">Keywords in the C++ language</a>.</p></dd>", "a[href=\"introduction_to_functions.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Functions<a class=\"headerlink\" href=\"#functions\" title=\"Permalink to this heading\">#</a></h1><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span></code> <a class=\"reference internal\" href=\"glossary.html#term-Keyword\"><span class=\"xref std std-term\">keyword</span></a> specifies what the function returns.\nIf a function definition has declared that a particular type of data (an integer value in this case) will be returned, then whatever comes after the <code class=\"docutils literal notranslate\"><span class=\"pre\">return</span></code> keyword must equate to that type. In this case we just type a value, but a variable or code that yields the required value is more common.</p><p>Programmers often want to use the same <a class=\"reference internal\" href=\"glossary.html#term-Code-Block\"><span class=\"xref std std-term\">code-block</span></a> repeatedly - in the same program, or across many programmes.</p>", "a[href=\"#exercisea1\"]": "<div class=\"exercise dropdown admonition\" id=\"exercisea1\">\n<p class=\"admonition-title\">Exercise  First Program - Syntax Rules  </p>\n<section id=\"exercise-content\">\n<p>Try making the following changes to the above code - run the code after each change and note what happens.</p>\n<ul class=\"simple\">\n<li><p>Remove the semicolon in line 3 or 4.</p></li>\n<li><p>Remove <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> from line 3.</p></li>\n<li><p>Replace the angle brackets <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&gt;</span></code> in the first line with speech marks <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>.</p></li>\n<li><p>Remove the return line.</p></li>\n<li><p>Add some whitespace (spaces) to the code.</p></li>\n<li><p>Change some letters to capitals</p></li>\n<li><p>Change the returned value from 0 to 1, then to 2.0, and then to a letter.</p></li>\n<li><p>Change the return value to <code class=\"docutils literal notranslate\"><span class=\"pre\">'r'</span></code> and then to <code class=\"docutils literal notranslate\"><span class=\"pre\">\"r\"</span></code>.</p></li>\n<li><p>Change the return value to <code class=\"docutils literal notranslate\"><span class=\"pre\">'0'</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">\"0\"</span></code> - note the code number stated in the terminal output.</p></li>\n</ul>\n<div class=\"solution dropdown admonition\" id=\"solutiona1\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exercisea1\"> Exercise  First Program - Syntax Rules  </a></p>\n<section id=\"solution-content\">\n<ul class=\"simple\">\n<li><p>A semicolon is required at the end of each statement \u2013 exceptions after directive such as <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span></code> and after <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code>.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">cout</span></code> is not part of the <strong>C++ core language</strong> and comes instead from the <strong>Standard Library</strong>. Only parts of the core languages do not require <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> denotes the <a class=\"reference internal\" href=\"glossary.html#term-Namespace\"><span class=\"xref std std-term\">namespace</span></a> that <code class=\"docutils literal notranslate\"><span class=\"pre\">cout</span></code> belongs to (like a folder designation but only works if you \u2018included\u2019 the required library component).</p></li>\n<li><p>To include components of the standard library angle brackets <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&gt;</span></code> are used, but we can also include additional code written by the programmer in <a class=\"reference internal\" href=\"header_files.html\"><span class=\"doc\">**header files**</span></a>, which are included using speech marks <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code> instead i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">#include</span> <span class=\"pre\">\"myheaderfile.h\"</span></code>.</p></li>\n<li><p>This is usually only possible in the main function, but not on every platform.</p></li>\n<li><p>Whitespace is ignored in C++ - not true in other languages!</p></li>\n<li><p>C++ is <a class=\"reference internal\" href=\"glossary.html#term-Case-Sensitive\"><span class=\"xref std std-term\">case sensitive</span></a>.</p></li>\n</ul>\n<p>Note: The following works differently in the \u2018Live Code\u2019 editor.</p>\n<ul class=\"simple\">\n<li><p>Only <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">0.0</span></code> working in <code class=\"docutils literal notranslate\"><span class=\"pre\">Live</span> <span class=\"pre\">Code</span></code>.</p></li>\n</ul>\n<p>In Visual Studio, or Xcode, you would find the following:</p>\n<ul class=\"simple\">\n<li><p>Any number you return is converted to an integer, so a <a class=\"reference internal\" href=\"glossary.html#term-Floating-Point-Number\"><span class=\"xref std std-term\">floating-point number</span></a> will work, but a non-numeric character cause failure because it will be interpreted as a variable name.</p></li>\n<li><p>Single quotes denote the \u2018char\u2019 type which is used for single characters only. \u2018char\u2019 converts to <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, so is acceptable. Double quotes denote the <code class=\"docutils literal notranslate\"><span class=\"pre\">string</span></code> type or an array of <code class=\"docutils literal notranslate\"><span class=\"pre\">char</span></code> type, which do not convert to <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">'0'</span></code> has code 48 and <code class=\"docutils literal notranslate\"><span class=\"pre\">\"0\"</span></code> does not work. Again not in live editor.</p></li>\n<li><p>The returned value is reported to whoever called the function, in the case of main() the system is the caller. In Linux the returned value is used to confirm successful termination, 0 indicated success \u2013 anything else failure.</p></li>\n</ul>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Preprocessor\"]": "<dt id=\"term-Preprocessor\">Preprocessor</dt><dd><p>Before the source code is passed to the compiler, the preprocessor handles directives (#include, #define, and #ifdef), replacing macros and copying the contents of libraries and header files into the source file, and removing any comments - to create a modified/preprocessed source file that is ready to be compiled.</p></dd>", "a[href=\"glossary.html#term-Standard-Library\"]": "<dt id=\"term-Standard-Library\">Standard Library</dt><dd><p>Collection of facilities (classes and functions) available for inclusion into C++ programmes \u2013 separated into namespaces.</p></dd>", "a[href=\"glossary.html#term-Comments\"]": "<dt id=\"term-Comments\">Comments</dt><dd><p>Comments are plain text in a computer program that are only intended as a note to the programr. Comments are useful as in-code documentation and are also used by programrs to hide sections of a program from the compiler temporarily - useful during development/debugging.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
