selector_to_html = {"a[href=\"#pointer-expressions-and-arithmetic\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Expressions and Arithmetic<a class=\"headerlink\" href=\"#pointer-expressions-and-arithmetic\" title=\"Permalink to this heading\">#</a></h3><p>A limited set of arithmetic operations can be performed on pointers. Pointers may be:</p>", "a[href=\"#this-advanced-topic\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">This - Advanced Topic<a class=\"headerlink\" href=\"#this-advanced-topic\" title=\"Permalink to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">this</span></code> is only useful when dealing with classes, when <code class=\"docutils literal notranslate\"><span class=\"pre\">this</span></code> becomes a shorthand way of referring to the innermost enclosing class.</p><p>The keyword <code class=\"docutils literal notranslate\"><span class=\"pre\">this</span></code> is used as an expression (<a class=\"reference internal\" href=\"glossary.html#term-prvalue\"><span class=\"xref std std-term\">prvalue</span></a>), being a built-in pointer - and the associated value can be accessed using <code class=\"docutils literal notranslate\"><span class=\"pre\">*this</span></code>.</p>", "a[href=\"#pointers\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers<a class=\"headerlink\" href=\"#pointers\" title=\"Permalink to this heading\">#</a></h1><p>An <a class=\"reference internal\" href=\"glossary.html#term-Object\"><span class=\"xref std std-term\">object</span></a> in C++ is a region of memory holding a value. Each region of memory can also be identified by its <a class=\"reference internal\" href=\"glossary.html#term-Memory-Address\"><span class=\"xref std std-term\">memory address</span></a>.</p><p>The value of an object can be accessed using either its identifier, or its address. Referring to an object\u2019s address, instead of its value, can make a program more efficient, and access to memory addresses is useful for memory management.</p>", "a[href=\"glossary.html#term-Indirection\"]": "<dt id=\"term-Indirection\">Indirection</dt><dd><p>Returning the value of the object associated with a pointer - accomplished by prefixing <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> to the pointer\u2019s identifier in an expression.</p></dd>", "a[href=\"#pointers-to-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers to Functions<a class=\"headerlink\" href=\"#pointers-to-functions\" title=\"Permalink to this heading\">#</a></h2><p>Functions are also stored in memory and therefore have a unique address allowing us to define a pointer to a function in a similar manner to a pointer to an object.</p><p>In C++ there are only two operations permitted on functions - calling the function and obtaining the functions address.</p>", "a[href=\"#nullptr\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Nullptr<a class=\"headerlink\" href=\"#nullptr\" title=\"Permalink to this heading\">#</a></h2><p>A pointer should always point at an object, otherwise dereferencing is not valid.</p><p>If there is no object to point at, or if it is useful to represent the idea that no object is available (e.g., for the end of a list), the pointer may be given the value <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code>.</p>", "a[href=\"glossary.html#term-Declarator-operator\"]": "<dt id=\"term-Declarator-operator\">Declarator-operator</dt><dd><p>Operators used to modify the type of a variable, function, or object being declared. e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code> for pointers, and <code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> for arrays.</p></dd>", "a[href=\"#examplev0\"]": "<div class=\"code_example dropdown admonition\" id=\"examplev0\">\n<p class=\"admonition-title\">Code Example: Pointers </p>\n<section id=\"code_example-content\">\n<p>This program demonstrates the definition and use of a pointer.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">myPointerTo_myInt</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">myInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">myPointerTo_myInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">myInt</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"The Value of myInt is \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"The memory address of myInt is \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">myInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"The value of myPointerTo_myInt is \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myPointerTo_myInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"The contents (value) of the object (memory location) pointed to by myPointerTo_myInt is \"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">myPointerTo_myInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// separate line is only for readability</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">myPointerTo_myInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"The modified contents of the object pointed to by myPointerTo_myInt is \"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">myPointerTo_myInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// separate line is only for readability</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"myInt now has the value of: \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myInt</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"solutionv0\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplev0\"> Code Example: Pointers </a></p>\n<section id=\"code_explanation-content\">\n<p>This is the declaration of a pointer.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">myPointerTo_myInt</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> modifies the declaration to indicate that <code class=\"docutils literal notranslate\"><span class=\"pre\">myPointerTo_myInt</span></code> is a pointer to an integer variable i.e. the type of <code class=\"docutils literal notranslate\"><span class=\"pre\">myPointerTo_myInt</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">pointer</span> <span class=\"pre\">to</span> <span class=\"pre\">int</span></code>.</p>\n<p>A pointer <strong>only</strong> contains the memory address of another object.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">myPointerTo_myInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">myInt</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p>This line initialises the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">myPointerTo_myInt</span></code> by copy assignment - the pointer now contains the memory address of <code class=\"docutils literal notranslate\"><span class=\"pre\">myInt</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;myInt</span></code> - evaluates to the memory address of <code class=\"docutils literal notranslate\"><span class=\"pre\">myInt</span></code> - i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;myInt</span></code> = \u201cmemory address of <code class=\"docutils literal notranslate\"><span class=\"pre\">myInt</span></code>\u201d.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">myPointerTo_myInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span><span class=\"w\"> </span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">*myPointerTo_myInt</span></code> is the value of the object pointer at by the pointer i.e. the value of the variable <code class=\"docutils literal notranslate\"><span class=\"pre\">myInt</span></code> - this is called dereferencing.</p>\n<p>Note: the use of the <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> is different when attached to an existing pointer in comparison to when used in a declaration.</p>\n<p>Dereferencing can also be used to modify the object pointed at - in this example, the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">myInt</span></code> was changed to \u201810\u2019 by dereferencing.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Pointer\"]": "<dt id=\"term-Pointer\">Pointer</dt><dd><p>A named object (variable) that stores the memory address of another object.</p></dd>", "a[href=\"#examplev6\"]": "<div class=\"code_example dropdown admonition\" id=\"examplev6\">\n<p class=\"admonition-title\">Code Example: Pointers and Booleans </p>\n<section id=\"code_example-content\">\n<p>Examples of Pointers used as Booleans</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">myFunction</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">myPointer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">myBoolean1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">myPointer</span><span class=\"p\">;</span><span class=\"w\">            </span><span class=\"c1\">// Narrowing conversion to a Boolean - not a copy!</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myBoolean1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">myBoolean2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">myPointer</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// Initialised with the Boolean result of a comparison expression</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myBoolean1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">myPointer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Pointing to an Object\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Pointing to the nullptr\"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">tempInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">myPointerToTempInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">tempInt</span><span class=\"p\">;</span><span class=\"w\">     </span>\n<span class=\"w\">    </span><span class=\"n\">myFunction</span><span class=\"p\">(</span><span class=\"n\">myPointerToTempInt</span><span class=\"p\">);</span>\n<span class=\"w\">    </span>\n<span class=\"w\">    </span><span class=\"n\">myPointerToTempInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">myFunction</span><span class=\"p\">(</span><span class=\"n\">myPointerToTempInt</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationv6\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplev6\"> Code Example: Pointers and Booleans </a></p>\n<section id=\"code_explanation-content\">\n<p>Note: when used on pointers, <code class=\"docutils literal notranslate\"><span class=\"pre\">==</span></code> and the other comparison operators compare their memory addresses, which are the values of the pointers - i.e. the values of the objects to which the pointers point, are not being compared.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">(myPointer)</span></code> is equivalent to <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">(myPointer</span> <span class=\"pre\">!=</span> <span class=\"pre\">nullptr)</span></code>. The compiler knows a Boolean is required and implicitly converts the pointer, obviating the comparison expression.</p>\n<p>It is usually better to use shorter code - fewer opportunities to make mistakes - and in this case we have a clear expression for testing the validity of the pointer i.e. does it point at an actual object.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Memory-Address\"]": "<dt id=\"term-Memory-Address\">Memory Address</dt><dd><p>A computer memory address is a unique identifier assigned to a specific location in a computer\u2019s memory, allowing the CPU and other hardware components to access and manipulate stored data efficiently. Memory addresses are typically represented as an array of hexadecimal values of a fixed length.</p></dd>", "a[href=\"glossary.html#term-Undefined-Behaviour\"]": "<dt id=\"term-Undefined-Behaviour\">Undefined Behaviour</dt><dd><p>Behaiour the is unpredictable, being unspecified by the language and often implementation dependent. Ill-formed programs have issues with syntax or semantics that may be caught by the compiler - other issues are not caught, and lead to programs that are not reliable being undefined by the standard in execution.</p></dd>", "a[href=\"glossary.html#term-rvalue\"]": "<dt id=\"term-rvalue\">rvalue</dt><dd><p>The expression appearing on the right-hand side of an assignment operator or in the {} for list initialisation. rvalues are not always on the RHS, but if the same expression could be used on RHS, it\u2019s probably an rvalue. rvalue expressions including literals, function calls, arithmetic and logical evaluations and comparisons, whose evaluation computes the value of an operand of a built-in operator (no result object) or initializes an object (a result object is created). The result object may be a variable, an object created by new-expression, or a temporary created by temporary materialization. An rvalue expression is either prvalue or xvalue \u2013 see the cppreference for details.</p></dd>", "a[href=\"#examplev1\"]": "<div class=\"code_example dropdown admonition\" id=\"examplev1\">\n<p class=\"admonition-title\">Code Example: Introduction to Pointers </p>\n<section id=\"code_example-content\">\n<p>This code shows examples of pointers to different types.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;vector&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">myVector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mf\">5.9</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mf\">1.1</span><span class=\"p\">,</span><span class=\"mf\">2.3</span><span class=\"p\">,</span><span class=\"mf\">4.5</span><span class=\"p\">,</span><span class=\"mf\">5.6</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"kt\">double</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">myPointerToMyVector</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">myPointerToMyVector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">myVector</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\">  </span><span class=\"c1\">//Assigns address of 4th element to the pointer</span>\n<span class=\"w\">        </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">myPointerToMyVector</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myPointerToMyVector</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" - is the address of the object pointed to by the pointer. </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//prints the address of myVector</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" - is the value held at the memory address pointed at by the pointer. </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">//prints the value of myVector[3]</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationv1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplev1\"> Code Example: Introduction to Pointers </a></p>\n<section id=\"code_explanation-content\">\n<p>For a type <code class=\"docutils literal notranslate\"><span class=\"pre\">T</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">T*</span></code> is of type \u2018pointer to object of type T\u2019, which is usually shortened to \u2018pointer to T\u2019 e.g. \u2018pointer to int\u2019, or \u2018pointer to double\u2019 etc.</p>\n<p>That is, a variable of type <code class=\"docutils literal notranslate\"><span class=\"pre\">T*</span></code> may only hold the address of an object of type <code class=\"docutils literal notranslate\"><span class=\"pre\">T</span></code>.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#pointers-and-type\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers and Type<a class=\"headerlink\" href=\"#pointers-and-type\" title=\"Permalink to this heading\">#</a></h2><p>Each pointer points to an object of a specified <code class=\"docutils literal notranslate\"><span class=\"pre\">type</span></code>, so the pointer is said to be of type <code class=\"docutils literal notranslate\"><span class=\"pre\">pointer</span> <span class=\"pre\">to</span> <span class=\"pre\">'type'</span></code>, e.g. a pointer to an <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> has the type <code class=\"docutils literal notranslate\"><span class=\"pre\">pointer</span> <span class=\"pre\">to</span> <span class=\"pre\">int</span></code>.</p><p>Although the pointer value is only a memory location, to ensure security in the type-system, it is not permitted to assign a declared pointer a value of a different type i.e. a pointer to an <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> cannot be assigned the address of a <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code> - the compiler will not permit it.</p>", "a[href=\"glossary.html#term-Free-store\"]": "<dt id=\"term-Free-store\">Free store</dt><dd><p><a class=\"reference internal\" href=\"#term-Memory\"><span class=\"xref std std-term\">memory</span></a> allocated by <code class=\"docutils literal notranslate\"><span class=\"pre\">new</span></code>; also called <a class=\"reference internal\" href=\"#term-Dynamic-Memory\"><span class=\"xref std std-term\">dynamic memory</span></a>. Dynamic memory is an amount of memory of indeterminate size used up during execution of a program as new objects are created. Often standard library facilities, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">vector</span></code>, can be used to avoid explicit use of the free store.</p></dd>", "a[href=\"#pointer-arithmetic-and-arrays\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Arithmetic and Arrays<a class=\"headerlink\" href=\"#pointer-arithmetic-and-arrays\" title=\"Permalink to this heading\">#</a></h2><p>In C++, the name of an array can be used as a pointer to its initial element i.e. anywhere that a program might require a pointer object, the programmer may put the name of an array, because the array will be interpreted as a pointer to its first element.</p><p>Arrays may not be passed by value because there is no copying assignment for arrays - i.e. a function parameter cannot have the array copied to it - arrays can only be passed by reference.</p>", "a[href=\"glossary.html#term-Object\"]": "<dt id=\"term-Object\">Object</dt><dd></dd>", "a[href=\"#references\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this heading\">#</a></h2><p>A reference is an <a class=\"reference internal\" href=\"glossary.html#term-Alias\"><span class=\"xref std std-term\">alias</span></a> for an existing object or function - therefore, a reference cannot be initialised until the referenced entity exists.</p><p>References are not objects - so, there cannot be arrays of references or pointers to references.</p>", "a[href=\"glossary.html#term-Alias\"]": "<dt id=\"term-Alias\">Alias</dt><dd><p>An alternative name - declared to refer to an existing object, that can be used anywhere the original identifier would be used.</p></dd>", "a[href=\"#passing-functions-as-arguments-to-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Passing Functions as Arguments to Functions<a class=\"headerlink\" href=\"#passing-functions-as-arguments-to-functions\" title=\"Permalink to this heading\">#</a></h2><p>It is often useful to call a function and specify that it will call another function by including the name of the chosen function in the same way as you include values in the argument list.</p><p>Functions cannot be passed directly as arguments in C++. There are two ways to use functions as arguments to be passed-in to another function:</p>", "a[href=\"glossary.html#term-lvalue\"]": "<dt id=\"term-lvalue\">lvalue</dt><dd><p>An expression whose evaluation determines the identity of an object or function. The name of the object or function - basically, the left-hand side of an assignment operation or the name before the {}.</p></dd>", "a[href=\"#pointers-and-booleans\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers and Booleans<a class=\"headerlink\" href=\"#pointers-and-booleans\" title=\"Permalink to this heading\">#</a></h2><p>A pointer can be implicitly converted to a <code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span></code>. i.e. if the context requires a Boolean, but a pointer is given, the compiler converts the pointer to <code class=\"docutils literal notranslate\"><span class=\"pre\">Bool</span></code>.</p><p>All non-null pointers are implicitly converted to true - pointers with the value <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code> convert to <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code>.</p>", "a[href=\"glossary.html#term-prvalue\"]": "<dt id=\"term-prvalue\">prvalue</dt><dd><p>\u2018pure <a class=\"reference internal\" href=\"#term-rvalue\"><span class=\"xref std std-term\">rvalue</span></a>\u2019 expressions including literals, function calls, arithmetic and logical evaluations and comparisons, whose evaluation computes the value of an operand of a built-in operator (no result object) or initializes an object (a result object is created). The result object may be a variable, an object created by new-expression, or a \u2018temporary\u2019 created by temporary materialization.</p></dd>", "a[href=\"glossary.html#term-New\"]": "<dt id=\"term-New\">New</dt><dd><p>Keyword in C++ used to dynamically allocate memory on the heap for objects or variables during runtime. <code class=\"docutils literal notranslate\"><span class=\"pre\">new</span></code> allocates the required amount of memory on the heap; and calls a constructor (if there is one) to initialise the newly allocated object/memory.</p></dd>", "a[href=\"glossary.html#term-Dereferencing\"]": "<dt id=\"term-Dereferencing\">Dereferencing</dt><dd><p>Returning the value of the object associated with a pointer - accomplished by prefixing <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> to the pointer\u2019s identifier in an expression.</p></dd>", "a[href=\"#examplev5\"]": "<div class=\"code_example dropdown admonition\" id=\"examplev5\">\n<p class=\"admonition-title\">Code Example: The Null Pointer </p>\n<section id=\"code_example-content\">\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code>:</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ptrToInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\">  </span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ptrToDouble</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"c1\">// initialises the new pointer to null </span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ptrToString</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ptrToInt2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">ptrToInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\t'</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">ptrToDouble</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\t'</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">ptrToString</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\t'</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">ptrToInt2</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationv5\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplev5\"> Code Example: The Null Pointer </a></p>\n<section id=\"code_explanation-content\">\n<p>There is just one <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code>, which can be used for every pointer type, rather than a null pointer for each pointer type. <code class=\"docutils literal notranslate\"><span class=\"pre\">Nullptr</span></code> is of type <code class=\"docutils literal notranslate\"><span class=\"pre\">pointer</span></code>.</p>\n<p>Before <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code> was introduced, zero (0) was used as a notation for the null pointer; now assignment to integer literal zero gives a pointer the value <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code>. This is not obvious using Live Code, but if you try running the code in Visual Studio - rather than four zeros, you will find that <code class=\"docutils literal notranslate\"><span class=\"pre\">0000000000000000</span></code> is printed four times, each being the memory address of the <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code>.</p>\n<p>No object is allocated with at memory address <code class=\"docutils literal notranslate\"><span class=\"pre\">0000000000000000</span></code>, which is the most common representation of \u2018nullptr\u2019.</p>\n<p>Zero (0) is an <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>. However, the standard conversions allow \u20180\u2019 to be used as a constant of \u2018pointer\u2019 or \u2018pointer-to-member\u2019 type.</p>\n<p>It is best not to use <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code> because it is an <a class=\"reference internal\" href=\"glossary.html#term-Implementation\"><span class=\"xref std std-term\">implementation</span></a> defined <a class=\"reference internal\" href=\"glossary.html#term-Macro\"><span class=\"xref std std-term\">macro</span></a> and there may be difference in implementation, e.g. NULL might be 0 or 0L.</p>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code> makes code more readable than alternatives and avoids potential confusion when a function is overloaded to accept either a pointer or an integer.</p>\n</section>\n</div>\n<hr class=\"docutils\"/>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ptrToInt</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\">  </span><span class=\"n\">ptrToInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptrToInt</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"exercise dropdown admonition\" id=\"jupyternotebooks/introduction_to_pointers-exercise-17\">\n<p class=\"admonition-title\">Exercise</p>\n<section id=\"exercise-content\">\n<p>What happens if we use an uninitialised pointer? Most compilers will prevent this but try running the above code in the Live Code Editor\u2026.</p>\n<p>Run the code several times - note the changing memory address.</p>\n<p>Try changing the pointers type to double* and std::string* - what happens?</p>\n<p>Dereferencing an uninitialised pointer is an <a class=\"reference internal\" href=\"glossary.html#term-Undefined-Behaviour\"><span class=\"xref std std-term\">undefined behaviour</span></a>.</p>\n</section>\n</div><hr class=\"docutils\"/>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ptrToInt2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">ptrToInt2</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">ptrToInt2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptrToInt2</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<p>Dereferencing the <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code> is also an undefined behaviour - <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code> does not point to a valid memory location.</p>\n<p>Best practice is to always check a pointer is not the <code class=\"docutils literal notranslate\"><span class=\"pre\">nullptr</span></code>, before dereferencing it. For example, as follows:</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">myInt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">myPointer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">myInt</span><span class=\"p\">;</span><span class=\"w\">    </span><span class=\"c1\">// change to = nullptr</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">myPointer</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"k\">nullptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">myPointer</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Pointer is null!\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Macro\"]": "<dt id=\"term-Macro\">Macro</dt><dd><p>A <strong>macro</strong> is a fragment of code which has been given a name. Whenever the name is used, it is replaced by the contents of the macro. There are two kinds of macros. They differ mostly in what they look like when they are used. Object-like macros resemble data objects when used, function-like macros resemble function calls.</p></dd>", "a[href=\"#new-and-delete\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">New and Delete<a class=\"headerlink\" href=\"#new-and-delete\" title=\"Permalink to this heading\">#</a></h2><p>The <a class=\"reference internal\" href=\"glossary.html#term-New\"><span class=\"xref std std-term\">new</span></a> operator is used to allocate memory space on the <a class=\"reference internal\" href=\"glossary.html#term-Free-store\"><span class=\"xref std std-term\">free store</span></a>.</p>", "a[href=\"#pointers-into-arrays\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Pointers into Arrays<a class=\"headerlink\" href=\"#pointers-into-arrays\" title=\"Permalink to this heading\">#</a></h3>", "a[href=\"#examplev7\"]": "<div class=\"code_example dropdown admonition\" id=\"examplev7\">\n<p class=\"admonition-title\">Code Example: Pointer in Arrays </p>\n<section id=\"code_example-content\">\n<p>Run this code:</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">myArray</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ptrTo_myArray</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">myArray</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// pointer to initial element (implicit conversion)</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ptrTo_myArray2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">myArray</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// pointer to initial element</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ptrTo_myArray3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">myArray</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// pointer to one-beyond-last element</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">ptrTo_myArray4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">myArray</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// pointer to other elements</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myArray</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">ptrTo_myArray</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptrTo_myArray</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">ptrTo_myArray2</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptrTo_myArray2</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">ptrTo_myArray3</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptrTo_myArray3</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">ptrTo_myArray4</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptrTo_myArray4</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationv7\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplev7\"> Code Example: Pointer in Arrays </a></p>\n<section id=\"code_explanation-content\">\n<p>Attempting to print an array to the output stream results in printing only the address of the first element.</p>\n<p>It is worth noting how similar the memory addresses are - this is to be expected but is not guaranteed and easily missed. Check the final (rightmost) digits first when comparing memory addresses, the initial digits are likely to be very similar across elements of an array.</p>\n<p>Taking a pointer to the element number that is one beyond the end of an array is guaranteed to work, and is necessary for many algorithms, however, since such a pointer does not in fact point to an element of the array, it may not be used for reading or writing.</p>\n<div class=\"exercise dropdown admonition\" id=\"jupyternotebooks/introduction_to_pointers-exercise-14\">\n<p class=\"admonition-title\">Exercise</p>\n<section id=\"exercise-content\">\n<p>Try adding <code class=\"docutils literal notranslate\"><span class=\"pre\">5</span></code> and then <code class=\"docutils literal notranslate\"><span class=\"pre\">6</span></code> and then subtracting <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">myArray</span></code> in the assignment to <code class=\"docutils literal notranslate\"><span class=\"pre\">ptrTo_myArray3</span></code>.</p>\n</section>\n</div><p>The result of taking the address of the element before the initial element, or beyond one-past-the-last element, is undefined and should be avoided.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Implementation\"]": "<dt id=\"term-Implementation\">Implementation</dt><dd><p>Different versions of C++, produced by different organisations. Some behaviours are defined by the ISO C++ Standard, others depend on the implementation.</p></dd>", "a[href=\"#pointer-arithmetic\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Pointer Arithmetic<a class=\"headerlink\" href=\"#pointer-arithmetic\" title=\"Permalink to this heading\">#</a></h3><p>Pointer arithmetic is used to move execution of the program to different elements of an array using subtraction and addition of integers on pointers.</p><p>Adding an integer \u2018n\u2019 to a pointer produces a new pointer that points to the array element that is \u2018n\u2019 positions further along in memory.</p>", "a[href=\"#void-advanced-topic\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Void* - Advanced Topic<a class=\"headerlink\" href=\"#void-advanced-topic\" title=\"Permalink to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">void*</span></code> is the \u2018pointer to an object of unknown type\u2019.</p><p>In low-level code, it is sometimes necessary to store or pass along an address of a memory location without knowing the type of the object stored - <code class=\"docutils literal notranslate\"><span class=\"pre\">void*</span></code> is used.</p>", "a[href=\"#examplev11\"]": "<div class=\"code_example dropdown admonition\" id=\"examplev11\">\n<p class=\"admonition-title\">Code Example: Functions as Function Arguments </p>\n<section id=\"code_example-content\">\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">passedString1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">passedString2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">passedString1</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s\">\" \"</span><span class=\"p\">).</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">passedString2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"nf\">prepend</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">passedString1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">passedString2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">passedString2</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s\">\" \"</span><span class=\"p\">).</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">passedString1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"nf\">combine</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">passedString1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">passedString2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">passedFunction</span><span class=\"p\">)(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">passedFunction</span><span class=\"p\">)(</span><span class=\"n\">passedString1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">passedString2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">myString</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Hello World\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">myString</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">myString</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"s\">\"from Lboro Physics!\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">append</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">myString</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Good Morning and\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">prepend</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/introduction_to_pointers-code_explanation-24\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplev11\"> Code Example: Functions as Function Arguments </a></p>\n<section id=\"code_explanation-content\">\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">combine()</span></code> function takes 3 arguments - two strings and a pointer to a function of type <code class=\"docutils literal notranslate\"><span class=\"pre\">std::string(std::string,</span> <span class=\"pre\">std::string)</span></code> i.e. a function that takes in two strings and returns a string.</p>\n<p>When a function is called - the parentheses only contain the variable names, or the literals, of the correct type in the correct order - so only the name of the pointer is used i.e. no trailing parentheses, hence not arguments included - the passed in function is not being called at that point and its arguments are not yet required.</p>\n<p>In <code class=\"docutils literal notranslate\"><span class=\"pre\">main()</span></code> the second line prints the new value assigned to <code class=\"docutils literal notranslate\"><span class=\"pre\">myString</span></code> from the return of the call to the <code class=\"docutils literal notranslate\"><span class=\"pre\">combine()</span></code> function.</p>\n<p>The call to <code class=\"docutils literal notranslate\"><span class=\"pre\">combine()</span></code> includes two strings and the address of a function. The <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code> is unnecessary because a pointer to a function was declared in the parameter list of <code class=\"docutils literal notranslate\"><span class=\"pre\">combine()</span></code> and a function name will be interpreted as the address of the same function by the compiler - but it is useful to remind yourself that the address is being passed by including the <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code>.</p>\n<p>Inside <code class=\"docutils literal notranslate\"><span class=\"pre\">combine()</span></code>, the two passed-in strings are used to construct a call to whatever function (of the correct type) was named in the function call. Again, the <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> and the extra parentheses are unnecessary.</p>\n<div class=\"exercise dropdown admonition\" id=\"jupyternotebooks/introduction_to_pointers-exercise-25\">\n<p class=\"admonition-title\">Exercise</p>\n<section id=\"exercise-content\">\n<p>Remove any unnecessary <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code> from the above code and check it still compiles and works in the same manner as before. Be careful! some of <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code> are required.</p>\n</section>\n</div></section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Unary\"]": "<dt id=\"term-Unary\">Unary</dt><dd><p>Describing an operator that operates on a single operand, such as the negation operator. Unary operators are further classified as prefix and postfix. The alternative is an <a class=\"reference internal\" href=\"#term-Infix-Operator\"><span class=\"xref std std-term\">infix operator</span></a>.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
