selector_to_html = {"a[href=\"glossary.html#term-String-Data-Type\"]": "<dt id=\"term-String-Data-Type\">String Data Type</dt><dd><p>Data consisting of a sequence of characters, bracketed by <code class=\"docutils literal notranslate\"><span class=\"pre\">\"\"</span></code>.</p></dd>", "a[href=\"glossary.html#term-Core-Language\"]": "<dt id=\"term-Core-Language\">Core Language</dt><dd><p>The fundamental components of the C++ language not found in the Standard Library. The libraries are constructed from the core language.</p></dd>", "a[href=\"glossary.html#term-Operands\"]": "<dt id=\"term-Operands\">Operands</dt><dd><p>def</p></dd>", "a[href=\"glossary.html#term-Integer-type\"]": "<dt id=\"term-Integer-type\">Integer type</dt><dd><p>Type for integer values (whole numbers - all both positive and negative and zero). Maybe preceded by one or two modifiers - <code class=\"docutils literal notranslate\"><span class=\"pre\">signed</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">unsigned</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">short</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">long,</span> </code>long long<code class=\"docutils literal notranslate\"><span class=\"pre\">.</span> <span class=\"pre\">The</span> <span class=\"pre\">modifiers</span> <span class=\"pre\">may</span> <span class=\"pre\">be</span> <span class=\"pre\">used</span> <span class=\"pre\">on</span> <span class=\"pre\">their</span> <span class=\"pre\">own,</span> <span class=\"pre\">and</span> <span class=\"pre\">int</span> <span class=\"pre\">is</span> <span class=\"pre\">implied;</span> <span class=\"pre\">but</span> </code>signed<code class=\"docutils literal notranslate\"><span class=\"pre\">and</span></code>unsigned<code class=\"docutils literal notranslate\"><span class=\"pre\">may</span> <span class=\"pre\">also</span> <span class=\"pre\">precede</span></code>char.</p></dd>", "a[href=\"glossary.html#term-Terminator\"]": "<dt id=\"term-Terminator\">Terminator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code> or {} - which close statements.</p></dd>", "a[href=\"glossary.html#term-Variable\"]": "<dt id=\"term-Variable\">Variable</dt><dd><p>A variable is an object or a reference that is not a non-static data member, that is introduced by a declaration - a named object in a scope.</p></dd>", "a[href=\"#strings\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Strings<a class=\"headerlink\" href=\"#strings\" title=\"Permalink to this heading\">#</a></h2><p>Another useful type of variable is the <code class=\"docutils literal notranslate\"><span class=\"pre\">string</span></code> type. A <a class=\"reference internal\" href=\"glossary.html#term-String\"><span class=\"xref std std-term\">string</span></a> is a series of individual characters.</p><p>To use string-type variables we need an additional component of the standard library, <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;string&gt;</span></code> to be included.</p>", "a[href=\"glossary.html#term-Variables\"]": "<dt id=\"term-Variables\">Variables</dt><dd><p>A variable is an object or a reference that is not a non-static data member, that is introduced by a declaration - a named object in a scope.</p></dd>", "a[href=\"glossary.html#term-Reserved-Characters\"]": "<dt id=\"term-Reserved-Characters\">Reserved Characters</dt><dd><p>Some characters cannot be freely used because they have special meaning in the syntax. Some may be overloaded. Examples: <code class=\"docutils literal notranslate\"><span class=\"pre\">#</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">\\</span></code>, arithmetic operators, comparison operators, punctuation symbols.</p></dd>", "a[href=\"glossary.html#term-String\"]": "<dt id=\"term-String\">String</dt><dd><p>def</p></dd>", "a[href=\"glossary.html#term-Expression-Statement\"]": "<dt id=\"term-Expression-Statement\">Expression Statement</dt><dd><p>An expression followed by a semicolon.</p></dd>", "a[href=\"glossary.html#term-Floating-Point-Numbers\"]": "<dt id=\"term-Floating-Point-Numbers\">Floating-Point Numbers</dt><dd><p>Numbers with a decimal point. Represented in code by the addition of <code class=\"docutils literal notranslate\"><span class=\"pre\">.0</span></code> to whole numbers.</p></dd>", "a[href=\"glossary.html#term-Code-Block\"]": "<dt id=\"term-Code-Block\">Code Block</dt><dd><p>Sequence of <a class=\"reference internal\" href=\"#term-Statements\"><span class=\"xref std std-term\">statements</span></a> enclosed by curly braces <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code>. Also called a <a class=\"reference internal\" href=\"#term-Compound-Statement\"><span class=\"xref std std-term\">compound statement</span></a>.</p></dd>", "a[href=\"glossary.html#term-Null-Statement\"]": "<dt id=\"term-Null-Statement\">Null Statement</dt><dd><p>The <a class=\"reference internal\" href=\"#term-Empty-Statement\"><span class=\"xref std std-term\">Empty statement</span></a>: valid in C++ and can be used in certain scenarios where a statement is syntactically required but no action is needed.</p></dd>", "a[href=\"#more-data-types\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">More Data Types<a class=\"headerlink\" href=\"#more-data-types\" title=\"Permalink to this heading\">#</a></h2><p>In addition to strings, and integers, we need variable from the <a class=\"reference internal\" href=\"glossary.html#term-Floating-Point-Number-Types\"><span class=\"xref std std-term\">floating-point number types</span></a> and <a class=\"reference internal\" href=\"glossary.html#term-Char-Type\"><span class=\"xref std std-term\">char type</span></a>.</p>", "a[href=\"glossary.html#term-Operators\"]": "<dt id=\"term-Operators\">Operators</dt><dd><p>def</p></dd>", "a[href=\"selection_and_iteration.html#selection\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Selection<a class=\"headerlink\" href=\"#selection\" title=\"Permalink to this heading\">#</a></h2><p>Selection statements conditonally change the control flow.</p><p>A decison is made to follow one of two possible flows, depending on whether a condition is found to be true or false at the time of checking.</p>", "a[href=\"#escape-characters\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Escape Characters<a class=\"headerlink\" href=\"#escape-characters\" title=\"Permalink to this heading\">#</a></h2><p><a class=\"reference internal\" href=\"glossary.html#term-Escape-Sequences\"><span class=\"xref std std-term\">Escape sequences</span></a>, or \u2018escape characters\u2019, are used to represent special characters within a string or character literal.</p><p>Certain characters in the program have to be represented with <a class=\"reference internal\" href=\"glossary.html#term-Escape-Sequences\"><span class=\"xref std std-term\">escape sequences</span></a> because the are <a class=\"reference internal\" href=\"glossary.html#term-Reserved-Characters\"><span class=\"xref std std-term\">reserved characters</span></a> that have specific meaning to the compiler.</p>", "a[href=\"selection_and_iteration.html#iteration\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Iteration<a class=\"headerlink\" href=\"#iteration\" title=\"Permalink to this heading\">#</a></h2><p>Computer programmes often repeat the same execution of the same lines of code - Iteration statements instruct the computer to repeat the same statements a finite number of times, or until a testable condition changes.</p><p>Iterations statements in C++ are the <a class=\"reference internal\" href=\"for_loops.html#for\"><span class=\"std std-ref\">for</span></a>-statement, the <a class=\"reference internal\" href=\"while_loops.html#while\"><span class=\"std std-ref\">while</span></a>-statement, the do-while-statement, and the range-for statement.</p>", "a[href=\"glossary.html#term-Literal\"]": "<dt id=\"term-Literal\">Literal</dt><dd><p>A fixed value written directly into a program. e.g. the number \u20181\u2019, generally found on the RHS of assignment operations. The notation used for Boolean types, character types, string types, numeric types etc., e.g. the work <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> is a Boolean literal when used appropriately.</p></dd>", "a[href=\"#learing-the-basics\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Learing the Basics<a class=\"headerlink\" href=\"#learing-the-basics\" title=\"Permalink to this heading\">#</a></h1><p>Once you have learned some basic components of the C++ language, understanding the language becomes much easier, because you will be able to write simple programmes to try out each new concept.</p><p>This page leads you through some basic exercies, much of the explanation is left until later chapters - this page is not intended to present the full syntax.</p>", "a[href=\"glossary.html#term-Floating-Point-Number-Types\"]": "<dt id=\"term-Floating-Point-Number-Types\">Floating-Point Number Types</dt><dd><p>Float, Double, and Long Double. Floating-point literals are interpreted as <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code> type unless the letter f or l is added as a suffix.</p></dd>", "a[href=\"glossary.html#term-Empty-Statement\"]": "<dt id=\"term-Empty-Statement\">Empty Statement</dt><dd><p>A statement that consists of only a semicolon <code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code>. It does nothing and is often referred to as a <a class=\"reference internal\" href=\"#term-Null-Statement\"><span class=\"xref std std-term\">null statement</span></a>. Empty statements are used where the syntax requires a statement but the contents are optionally not required, to provide an empty body to a for or while loop, or to carry a label in the end of a compound statement.</p></dd>", "a[href=\"#variables\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Variables<a class=\"headerlink\" href=\"#variables\" title=\"Permalink to this heading\">#</a></h2><p>A computer programme that can only perform arithmetic on <a class=\"reference internal\" href=\"glossary.html#term-Literal\"><span class=\"xref std std-term\">literal</span></a> values written into the original programme code would not be very useful.</p><p>Instead programmes must be able ask for the numeric values that are to be used in the calculations.</p>", "a[href=\"glossary.html#term-Directives\"]": "<dt id=\"term-Directives\">Directives</dt><dd><p>def</p></dd>", "a[href=\"#basic-arithmetic-operations\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Basic Arithmetic Operations<a class=\"headerlink\" href=\"#basic-arithmetic-operations\" title=\"Permalink to this heading\">#</a></h2><p>All programmeming languages carry out basic arithmetic operations. Normally we do not use a computer as a simple calculator, but most programmes carry out some arithmetic operations as part of their execution.</p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> can be used to demonstrate the basic arithmetic operations.</p>", "a[href=\"glossary.html#term-Char-Type\"]": "<dt id=\"term-Char-Type\">Char Type</dt><dd><p>Type for representing individual characters. Character literals are enclosed by <code class=\"docutils literal notranslate\"><span class=\"pre\">'</span> <span class=\"pre\">'</span></code>. Also an integer type - each character has an associate integer value.</p></dd>", "a[href=\"#expressions-and-statements\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Expressions and Statements<a class=\"headerlink\" href=\"#expressions-and-statements\" title=\"Permalink to this heading\">#</a></h2><p>A computer programme is a sequences of statements, which are executed sequentially when the programme runs.</p>", "a[href=\"glossary.html#term-Numeric-Data-Type\"]": "<dt id=\"term-Numeric-Data-Type\">Numeric Data Type</dt><dd><p>The data types for numeric values - each represents a different type of number to different levels of precision. Includes <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code>. Some data types require additional specifiers, see the <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/language/types.html\">C++ Reference \u2013 Data Types</a></p></dd>", "a[href=\"glossary.html#term-Name\"]": "<dt id=\"term-Name\">Name</dt><dd><p>An identifier. (A minority of names are not identifiers - advanced).</p></dd>", "a[href=\"#exerciseb1\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseb1\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 4 </span></p>\n<section id=\"exercise-content\">\n<p>Using the live code editor above, find out what happens when:</p>\n<ul class=\"simple\">\n<li><p>You define a second integer variable <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code>, with a value and intstruct the program to print out <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">+</span> <span class=\"pre\">b</span></code>? Try it in the live-code space above.</p></li>\n<li><p>What would happen if you declare the second variable after the <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> statement? Find out.</p></li>\n</ul>\n<p>After a variable has been declared and given a value, the value can be changed.</p>\n<ul class=\"simple\">\n<li><p>Add <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">=</span> <span class=\"pre\">10;</span></code> after the first <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> and another output statement to print the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> again.</p></li>\n</ul>\n<div class=\"solution dropdown note admonition\" id=\"solutionb1\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exerciseb1\"> Exercise 4</a></p>\n<section id=\"solution-content\">\n<ul class=\"simple\">\n<li><p>Now the program has evaluated the arithmetic sum of the values contained in <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> - and sent that single value to the character output stream.</p></li>\n<li></li>\n</ul>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#mathematical-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Mathematical Functions<a class=\"headerlink\" href=\"#mathematical-functions\" title=\"Permalink to this heading\">#</a></h2><p>To access additional mathematical functions we can include the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;cmath&gt;</span></code> component of the standard library.</p>", "a[href=\"glossary.html#term-Expression\"]": "<dt id=\"term-Expression\">Expression</dt><dd><p>A series of operators and names the produce a value or may designate objects or functions. Simplest example would be an arithmetic statement.</p></dd>", "a[href=\"glossary.html#term-Modulo-Operator\"]": "<dt id=\"term-Modulo-Operator\">Modulo Operator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">%</span></code> Infix operator for modulo operations that returns the remainder after dividing the LHS number by the RHS number. In C++ this operation only applies to <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> type and is truncating, meaning the quotient, whether positive or negative, is rounded towards before the remainder is determined. Other languages used \u2018floored\u2019 or \u2018rounded\u2019, and for every new language you will need to determine which is applied, because different results are produced.</p></dd>", "a[href=\"#exerciseb3\"]": "<div class=\"exercise dropdown admonition\" id=\"exerciseb3\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 6 </span></p>\n<section id=\"exercise-content\">\n<p>Try to fix this code:</p>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"p\">;</span>\n<span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.0</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.5</span><span class=\"p\">;</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"solution note dropdown admonition\" id=\"solutionb3\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exerciseb3\"> Exercise 6</a></p>\n<section id=\"solution-content\">\n<div class=\"highlight-cpp notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(){</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">52</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.0</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">12.5</span><span class=\"p\">;</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">string</span></code> type variables are part of the standard library, and must be referenced by prefixing with <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">char</span></code> are all part of the <a class=\"reference internal\" href=\"glossary.html#term-Core-Language\"><span class=\"xref std std-term\">core language</span></a>, and should not have <code class=\"docutils literal notranslate\"><span class=\"pre\">std::</span></code> attached.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Escape-Sequences\"]": "<dt id=\"term-Escape-Sequences\">Escape Sequences</dt><dd><p>Used in programming languages to represent special characters within a string or character literal. They are identified by the prefix backslash <code class=\"docutils literal notranslate\"><span class=\"pre\">\\</span></code>. Examples are <code class=\"docutils literal notranslate\"><span class=\"pre\">\\n</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">\\t</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">\\\\</span></code> to represent \u2018newline\u2019, \u2018tab\u2019 - and to identify that a backslash is just a back slash literal.</p></dd>", "a[href=\"glossary.html#term-Type\"]": "<dt id=\"term-Type\">Type</dt><dd><p>A type defines the proper use of a name or an expression.</p></dd>", "a[href=\"glossary.html#term-Value\"]": "<dt id=\"term-Value\">Value</dt><dd><p>def</p></dd>", "a[href=\"glossary.html#term-Scope\"]": "<dt id=\"term-Scope\">Scope</dt><dd><p>def</p></dd>", "a[href=\"glossary.html#term-Concatenation\"]": "<dt id=\"term-Concatenation\">Concatenation</dt><dd><p>Joining of two strings together. Accomplished by the concatenation operator <code class=\"docutils literal notranslate\"><span class=\"pre\">+</span></code>or a built-in function.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
