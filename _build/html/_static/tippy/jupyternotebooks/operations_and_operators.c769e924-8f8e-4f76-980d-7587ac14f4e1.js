selector_to_html = {"a[href=\"#order-of-evaluation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Order of evaluation<a class=\"headerlink\" href=\"#order-of-evaluation\" title=\"Permalink to this heading\">#</a></h2><p>The order of evaluation of any part of any expression, including the order of evaluation of function arguments, is usually unspecified. The <a class=\"reference internal\" href=\"glossary.html#term-Compiler\"><span class=\"xref std std-term\">compiler</span></a> can evaluate operands and other subexpressions in any order and may choose another order when the same expression is evaluated again.</p><p>There is no concept of left-to-right or right-to-left evaluation in C++. This is not to be confused with left-to-right and right-to-left associativity of operators:</p>", "a[href=\"#comparison-operators\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Comparison Operators<a class=\"headerlink\" href=\"#comparison-operators\" title=\"Permalink to this heading\">#</a></h2><p>Comparison operators are used to form expressions which return a <code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span></code> i.e. the expression evaluates to either <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code>.</p>", "a[href=\"glossary.html#term-Compiler\"]": "<dt id=\"term-Compiler\">Compiler</dt><dd><p>The part of a C++ implementation that produces object code from a translation unit. Compilers transform source code into other types of code - most often, into native machine code that is interpreted directly by the <a class=\"reference internal\" href=\"#term-CPU\"><span class=\"xref std std-term\">CPU</span></a>.</p></dd>", "a[href=\"glossary.html#term-Comma-Operator\"]": "<dt id=\"term-Comma-Operator\">Comma Operator</dt><dd><p>The comma operator allows multiple expressions to be evaluated sequentially, returning the value of the last expression. Used when a single expression is required but it is desirable to perform multiple operations at that point in the code.</p></dd>", "a[href=\"glossary.html#term-Type\"]": "<dt id=\"term-Type\">Type</dt><dd><p>A type defines the proper use of a name or an expression.</p></dd>", "a[href=\"#exercisek5\"]": "<div class=\"exercise dropdown admonition\" id=\"exercisek5\">\n<p class=\"admonition-title\">Exercise</p>\n<section id=\"exercise-content\">\n<p>Is the modulus truncating or flooring in c++?</p>\n<div class=\"solution admonition\" id=\"jupyternotebooks/operations_and_operators-solution-3\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exercisek5\"> Exercise</a></p>\n<section id=\"solution-content\">\n<p>It is truncating i.e. always rounds towards zero. Flooring is always rounded downwards. Swift is truncated \u2013 Python is floored.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#short-circuiting\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Short Circuiting<a class=\"headerlink\" href=\"#short-circuiting\" title=\"Permalink to this heading\">#</a></h2><p>It may be possible to correctly evaluate a compound logical expression without evaluating all the individual expressions.</p><p>For example, if the condition being checked is: <code class=\"docutils literal notranslate\"><span class=\"pre\">A</span> <span class=\"pre\">&amp;&amp;</span> <span class=\"pre\">B</span></code>. It is only necessary to check that <code class=\"docutils literal notranslate\"><span class=\"pre\">B</span></code> is true when <code class=\"docutils literal notranslate\"><span class=\"pre\">A</span></code> has first been found to be true. If <code class=\"docutils literal notranslate\"><span class=\"pre\">A</span> <span class=\"pre\">==</span> <span class=\"pre\">false</span></code>, it does not matter what <code class=\"docutils literal notranslate\"><span class=\"pre\">B</span></code> evaluates to because <code class=\"docutils literal notranslate\"><span class=\"pre\">A</span> <span class=\"pre\">&amp;&amp;</span> <span class=\"pre\">B</span> <span class=\"pre\">==</span> <span class=\"pre\">false</span></code>.</p>", "a[href=\"glossary.html#term-Concatenation\"]": "<dt id=\"term-Concatenation\">Concatenation</dt><dd><p>Joining of two strings together. Accomplished by the concatenation operator <code class=\"docutils literal notranslate\"><span class=\"pre\">+</span></code>or a built-in function.</p></dd>", "a[href=\"glossary.html#term-Value-Category\"]": "<dt id=\"term-Value-Category\">Value Category</dt><dd><p>Each C++ expression (an operator with its operands, literals, variables, etc.) is characterized by two independent properties: a type and a <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/language/value_category.html\">value category</a>. The include lvalues and rvalues.</p></dd>", "a[href=\"#expressions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Expressions<a class=\"headerlink\" href=\"#expressions\" title=\"Permalink to this heading\">#</a></h2><p>An expression is a sequence of operators and their operands, that specifies a computation.</p><p>Expression evaluation may produce a result (e.g. evaluation of 2 + 2 produces the result 4) and may generate side-effects (unexpected behaviours).</p>", "a[href=\"#ternary-operators\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Ternary Operators<a class=\"headerlink\" href=\"#ternary-operators\" title=\"Permalink to this heading\">#</a></h2><p>Example:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">return</span> <span class=\"pre\">(a</span> <span class=\"pre\">&gt;=</span> <span class=\"pre\">b)</span> <span class=\"pre\">?</span> <span class=\"pre\">a</span> <span class=\"pre\">:</span> <span class=\"pre\">b;</span></code></p><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">?</span></code> construct is called an \u2018arithmetic if\u2019 or a conditional expression.</p>", "a[href=\"#id1\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Operations and Operators<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this heading\">#</a></h2><p>Each <a class=\"reference internal\" href=\"glossary.html#term-Type\"><span class=\"xref std std-term\">type</span></a> can only be operated on by specific operators. It would not make sense for every operator to work on all types or in the same way on different types, e.g. multiplication using <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> on two strings would make no sense.</p><p>Some operators are <strong>overloaded</strong> - meaning they do work on different types, but not necessarily in the same manner.</p>", "a[href=\"#assignment-operators\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Assignment operators<a class=\"headerlink\" href=\"#assignment-operators\" title=\"Permalink to this heading\">#</a></h2><p><a class=\"reference internal\" href=\"glossary.html#term-Assignment\"><span class=\"xref std std-term\">Assignment</span></a>-operators modify the value of an object.</p><p><a class=\"reference internal\" href=\"glossary.html#term-Copy-Assignment\"><span class=\"xref std std-term\">Copy-Assignment</span></a> replaces the contents of an object (often a value) with the contents of a second object. The copied object is unaffected by copy-assignment.</p>", "a[href=\"#the-comma-operator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">The Comma Operator<a class=\"headerlink\" href=\"#the-comma-operator\" title=\"Permalink to this heading\">#</a></h2><p>The most common use of a comma in C++ us as a separator. For example, to declare or define multiple variable of the same type:</p>", "a[href=\"glossary.html#term-Copy-Assignment\"]": "<dt id=\"term-Copy-Assignment\">Copy-Assignment</dt><dd><p>Replacement of the contents of one object with the contents of a second object; the second object is unaffected by the operation. Can also initialise an object.</p></dd>", "a[href=\"#exercisek2\"]": "<div class=\"exercise dropdown admonition\" id=\"exercisek2\">\n<p class=\"admonition-title\"><span class=\"caption-number\">Exercise 3 </span>  Ternary Operator  </p>\n<section id=\"exercise-content\">\n<p>Complete this code using the ternary operator to print out the name of the \u2018enemy\u2019 that is closest.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">city1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Enter the name of city 1...\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">city1</span><span class=\"p\">;</span><span class=\"w\"> </span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">dist1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Enter the distance to city 1 from Glasgow...\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">dist1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">city2</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Enter the name of city 1...\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">city2</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">dist2</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Enter the distance to city 1 from Glasgow...\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">dist2</span><span class=\"p\">;</span>\n<span class=\"w\">    </span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"solution dropdown note admonition\" id=\"solutionk2\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exercisek2\"> Exercise 3  Ternary Operator  </a></p>\n<section id=\"solution-content\">\n<p>Try variations on this code:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">dist2</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">dist1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"City 2 </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"City 1 </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#subscript-operator\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Subscript Operator<a class=\"headerlink\" href=\"#subscript-operator\" title=\"Permalink to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> is the subscript operator, which is used to index into arrays and other containers - refer to the later chapters on arrays or vectors.</p>", "a[href=\"glossary.html#term-Assignment\"]": "<dt id=\"term-Assignment\">Assignment</dt><dd><p>Modification of the current value of an object using an assignment operator. Simplest case is using the simple assignment operator <code class=\"docutils literal notranslate\"><span class=\"pre\">=</span></code>; i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">LHS</span> <span class=\"pre\">=</span> <span class=\"pre\">RHS;</span></code>.</p></dd>", "a[href=\"#operations-and-operators\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Operations and Operators<a class=\"headerlink\" href=\"#operations-and-operators\" title=\"Permalink to this heading\">#</a></h1><h2>Expressions<a class=\"headerlink\" href=\"#expressions\" title=\"Permalink to this heading\">#</a></h2><p>An expression is a sequence of operators and their operands, that specifies a computation.</p><p>Expression evaluation may produce a result (e.g. evaluation of 2 + 2 produces the result 4) and may generate side-effects (unexpected behaviours).</p>", "a[href=\"#unspecified-behaviours\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Unspecified Behaviours<a class=\"headerlink\" href=\"#unspecified-behaviours\" title=\"Permalink to this heading\">#</a></h2><p>The behaviour of every part of your code must operate in the way you expect it to, or unexpected outcomes will result.</p><p>Unspecified behaviours are those which may vary between implementations, and which the implementation is not required to document. There are several types of undefined behaviours. Some behaviour varies between implementations and can be allowed for by checking the documentation for your implementation and conforming to the rules.</p>", "a[href=\"#boolean-logical-operators\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Boolean (Logical) Operators<a class=\"headerlink\" href=\"#boolean-logical-operators\" title=\"Permalink to this heading\">#</a></h2>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
