selector_to_html = {"a[href=\"glossary.html#term-Constructors\"]": "<dt id=\"term-Constructors\">Constructors</dt><dd><p>Special member functions that are automatically called when an object of its class is created. Constructors have the same name as their class and have no return type.</p></dd>", "a[href=\"#auto\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Auto<a class=\"headerlink\" href=\"#auto\" title=\"Permalink to this heading\">#</a></h2><p>When defining a variable, it is not always necessary to explicitly state its type - although it is almost always better to do so.</p><p>In some cases, the \u2018type\u2019 might not be known ahead of time - the type can be deduced from the initialiser using <code class=\"docutils literal notranslate\"><span class=\"pre\">auto</span></code>.</p>", "a[href=\"#empty-initialiser-list-value-initialisation-and-zero-initialisation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Empty Initialiser List, Value-Initialisation and Zero-Initialisation<a class=\"headerlink\" href=\"#empty-initialiser-list-value-initialisation-and-zero-initialisation\" title=\"Permalink to this heading\">#</a></h2><p>If an object is initialised with an empty initialiser list <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code> it is first zero-initialised, and then value-initialised, if possible.</p><p>If the variable is a <a class=\"reference internal\" href=\"glossary.html#term-Scalar\"><span class=\"xref std std-term\">scalar</span></a> (arithmetic, pointer, or enum type) they are only zero-initialised.</p>", "a[href=\"glossary.html#term-Print-Debugging\"]": "<dt id=\"term-Print-Debugging\">Print Debugging</dt><dd><p>Using strategically positioned print statements to follow the control flow of a program\u2019s execution. The print statements may just include an index to identify which statement produced it, or more detailed error/exception outputs.</p></dd>", "a[href=\"#exercisem1\"]": "<div class=\"exercise dropdown admonition\" id=\"exercisem1\">\n<p class=\"admonition-title\">Exercise  Initialisation  </p>\n<section id=\"exercise-content\">\n<p>The following code should not run as written. Look at the error messages and try to correct the problem.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">double</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">7.77</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">myFirstInt3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\">       </span><span class=\"c1\">// Direct-list-initialisation</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">mySecondInt3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\">    </span><span class=\"c1\">// Copy-list-initialisation</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">myThirdInt3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\">         </span><span class=\"c1\">// Copy-initialisation </span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">myFourthInt3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\">        </span><span class=\"c1\">// Direct-initialisation</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myFirstInt3</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">mySecondInt3</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myThirdInt3</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myFourthInt3</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"solution dropdown admonition\" id=\"solutionm1\">\n<p class=\"admonition-title\">Solution to <a class=\"reference internal\" href=\"#exercisem1\"> Exercise  Initialisation  </a></p>\n<section id=\"solution-content\">\n<p>Removing the tow uses of list-initialisation will allow the code to run - the problem is that the double values may be \u2018implicitly\u2019 converted to integers, but this costs some of the information - narrowing - which is not allowed for <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code></p>\n<p>The code can be made to work using <code class=\"docutils literal notranslate\"><span class=\"pre\">static_cast</span></code> to forces an explicit conversion.</p>\n<p>Try replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> with <code class=\"docutils literal notranslate\"> <span class=\"pre\">static_cast&lt;int&gt;(b)</span></code> inside the two <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code></p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Narrowing\"]": "<dt id=\"term-Narrowing\">Narrowing</dt><dd><p>A narrowing (conversion) occurs when a value is converted from one type to another and the new type is not big enough to represent all possible values of the original type - leading to data loss or undefined behaviours.</p></dd>", "a[href=\"glossary.html#term-Free-store\"]": "<dt id=\"term-Free-store\">Free store</dt><dd><p><a class=\"reference internal\" href=\"#term-Memory\"><span class=\"xref std std-term\">memory</span></a> allocated by <code class=\"docutils literal notranslate\"><span class=\"pre\">new</span></code>; also called <a class=\"reference internal\" href=\"#term-Dynamic-Memory\"><span class=\"xref std std-term\">dynamic memory</span></a>. Dynamic memory is an amount of memory of indeterminate size used up during execution of a program as new objects are created. Often standard library facilities, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">vector</span></code>, can be used to avoid explicit use of the free store.</p></dd>", "a[href=\"#initialiser-lists\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialiser Lists<a class=\"headerlink\" href=\"#initialiser-lists\" title=\"Permalink to this heading\">#</a></h2><p>More complicated objects can require more than one value as an initializer. This is primarily handled by initializer lists delimited by <code class=\"docutils literal notranslate\"><span class=\"pre\">{</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">}</span></code>. For example:</p>", "a[href=\"glossary.html#term-Initialiser\"]": "<dt id=\"term-Initialiser\">Initialiser</dt><dd><p>The syntax used to initialise a new variable.</p></dd>", "a[href=\"glossary.html#term-Definition\"]": "<dt id=\"term-Definition\">Definition</dt><dd><p>Definitions are declarations that are sufficient to use the entity identified by the name.</p></dd>", "a[href=\"#list-initialisation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">List-Initialisation<a class=\"headerlink\" href=\"#list-initialisation\" title=\"Permalink to this heading\">#</a></h2><p>Initialization using only <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code> is called <a class=\"reference internal\" href=\"glossary.html#term-List-Initialisation\"><span class=\"xref std std-term\">list-initialisation</span></a> and is usually the best choice because it can be used in every context you will encounter.</p><p>It is recommended that list initialisation is used for anything more complicated that a simple variable - even though not having the <a class=\"reference internal\" href=\"glossary.html#term-Assignment-Operator\"><span class=\"xref std std-term\">assignment operator</span></a>, <code class=\"docutils literal notranslate\"><span class=\"pre\">=</span></code>, may be a little disconcerting at first.</p>", "a[href=\"glossary.html#term-Copy-initialisation\"]": "<dt id=\"term-Copy-initialisation\">Copy-initialisation</dt><dd><p>Initialising an object from another object using the assignment operator.</p></dd>", "a[href=\"glossary.html#term-Initialisation\"]": "<dt id=\"term-Initialisation\">Initialisation</dt><dd><p>Setting the initial value of an object. Definition results when initialisation is added to a declaration. Initialization is different from assignment because the object had no previous value and initialization is done by <a class=\"reference internal\" href=\"#term-Constructors\"><span class=\"xref std std-term\">constructors</span></a>.</p></dd>", "a[href=\"glossary.html#term-Declaration\"]": "<dt id=\"term-Declaration\">Declaration</dt><dd><p>Declarations introduce names/identifiers into a C++ program. Each kind of entity is declared differently.</p></dd>", "a[href=\"glossary.html#term-Assignment\"]": "<dt id=\"term-Assignment\">Assignment</dt><dd><p>Modification of the current value of an object using an assignment operator. Simplest case is using the simple assignment operator <code class=\"docutils literal notranslate\"><span class=\"pre\">=</span></code>; i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">LHS</span> <span class=\"pre\">=</span> <span class=\"pre\">RHS;</span></code>.</p></dd>", "a[href=\"glossary.html#term-Default-Constructor\"]": "<dt id=\"term-Default-Constructor\">Default-Constructor</dt><dd><p>Constructor that is automatically invoked when an object of a class is created without any  arguments - used to construct an object when no user initialisation is provided, using default values instead.</p></dd>", "a[href=\"glossary.html#term-Construction\"]": "<dt id=\"term-Construction\">Construction</dt><dd><p>Creating a new object \u2013 also called instantiation, when referring to a class.</p></dd>", "a[href=\"glossary.html#term-List-Initialisation\"]": "<dt id=\"term-List-Initialisation\">List-Initialisation</dt><dd><p>Initialization using <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code> e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span> <span class=\"pre\">myInt</span> <span class=\"pre\">{initial</span> <span class=\"pre\">value</span> <span class=\"pre\">or</span> <span class=\"pre\">expression</span> <span class=\"pre\">to</span> <span class=\"pre\">produce</span> <span class=\"pre\">the</span> <span class=\"pre\">initial</span> <span class=\"pre\">value};</span></code></p></dd>", "a[href=\"glossary.html#term-Static-Duration\"]": "<dt id=\"term-Static-Duration\">Static Duration</dt><dd><p>Lifetime of the program\u2019s execution - duration of static variables - all global variables.</p></dd>", "a[href=\"glossary.html#term-Scalar\"]": "<dt id=\"term-Scalar\">Scalar</dt><dd><p>A type that holds a single value of a defined range. Scalars include arithmetic types (integral or floating-point values), enumeration type members, pointer types, pointer-to-member types, and <code class=\"docutils literal notranslate\"><span class=\"pre\">std::nullptr_t</span></code>. Fundamental types are typically scalar types.</p></dd>", "a[href=\"glossary.html#term-Assignment-Operator\"]": "<dt id=\"term-Assignment-Operator\">Assignment Operator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">=</span></code>. The simple assignment operator. Used to assign a value to a variable, by <a class=\"reference internal\" href=\"#term-Literal-assignment\"><span class=\"xref std std-term\">literal-assignment</span></a>, <a class=\"reference internal\" href=\"#term-Copy-Assignment\"><span class=\"xref std std-term\">copy-assignment</span></a>, or evaluation assignment, and for <a class=\"reference internal\" href=\"#term-Initialisation\"><span class=\"xref std std-term\">initialisation</span></a>. [compound-assignment operators](assignment operators).</p></dd>", "a[href=\"glossary.html#term-Type-System\"]": "<dt id=\"term-Type-System\">Type System</dt><dd><p>The set of rules prescribing how each object may be used according to their types.</p></dd>", "a[href=\"#initialisation\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Initialisation<a class=\"headerlink\" href=\"#initialisation\" title=\"Permalink to this heading\">#</a></h1><p><a class=\"reference internal\" href=\"glossary.html#term-Initialisation\"><span class=\"xref std std-term\">Initialisation</span></a> is the setting of the initial value of a variable at the time of <a class=\"reference internal\" href=\"glossary.html#term-Construction\"><span class=\"xref std std-term\">construction</span></a>.</p><p><a class=\"reference internal\" href=\"glossary.html#term-Definition\"><span class=\"xref std std-term\">Definition</span></a> is <a class=\"reference internal\" href=\"glossary.html#term-Declaration\"><span class=\"xref std std-term\">declaration</span></a> combined with initialisation.</p>", "a[href=\"#zero-initialization\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Zero-initialization<a class=\"headerlink\" href=\"#zero-initialization\" title=\"Permalink to this heading\">#</a></h3><p>Initialisation of a variable to the zero value of its type:</p>", "a[href=\"#missing-initialisers-default-initialisation\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Missing Initialisers - Default Initialisation<a class=\"headerlink\" href=\"#missing-initialisers-default-initialisation\" title=\"Permalink to this heading\">#</a></h2><p>Default-initialisation refers to the way C++ handles initialisation when no initialiser has been specified.</p><p>The manner of default-initialisation depends on the entity. Objects can be default-initialized, but if no initializer is specified for a reference, the program is ill-formed.</p>", "a[href=\"#initialisers\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Initialisers<a class=\"headerlink\" href=\"#initialisers\" title=\"Permalink to this heading\">#</a></h2><p>There are different ways to initialise an object.</p><p>If an <a class=\"reference internal\" href=\"glossary.html#term-Initialiser\"><span class=\"xref std std-term\">initialiser</span></a> is specified for an object, that initializer determines the initial value of an object.</p>", "a[href=\"glossary.html#term-Default-Initialised\"]": "<dt id=\"term-Default-Initialised\">Default-Initialised</dt><dd><p>Type of initialisation that occurs when there is no initialiser. Actual method of default-initialisation depends on the entity.</p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
