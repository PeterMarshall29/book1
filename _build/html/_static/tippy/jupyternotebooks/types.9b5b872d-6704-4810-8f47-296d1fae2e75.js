selector_to_html = {"a[href=\"#types-in-c\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Types in C++<a class=\"headerlink\" href=\"#types-in-c\" title=\"Permalink to this heading\">#</a></h1><p>The <strong>type</strong> of a variable defines its properties, the rules it must obey, and the set of operators and functions availabe to members of each type.</p><p>For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">+</span></code> behaves differently when used an an <a class=\"reference internal\" href=\"glossary.html#term-Infix-Operator\"><span class=\"xref std std-term\">infix operator</span></a> between two integers, compared to between two strings.</p>", "a[href=\"#c-is-a-strongly-typed-language\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">C++ is a <strong>strongly-typed language</strong>.<a class=\"headerlink\" href=\"#c-is-a-strongly-typed-language\" title=\"Permalink to this heading\">#</a></h2><p>Once a variable type is set, for example when a number is cast as a <strong>double</strong>, the type cannot be changed.</p><p>However type conversion is possible - by copying a the value from a variable of one type, to a new variable of the different type.</p>", "a[href=\"glossary.html#term-Standard-Library\"]": "<dt id=\"term-Standard-Library\">Standard Library</dt><dd><p>Collecton of facilities available for inclusion into C++ programs</p></dd>", "a[href=\"#explicit-casting\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Explicit Casting<a class=\"headerlink\" href=\"#explicit-casting\" title=\"Permalink to this heading\">#</a></h3><p>Some types may be explicitly cast to another, using a type conversion function</p><p>There are several ways to direct that a value is us</p>", "a[href=\"#type-system-and-type-safety\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Type System and Type Safety<a class=\"headerlink\" href=\"#type-system-and-type-safety\" title=\"Permalink to this heading\">#</a></h2><p>All expressions (including literal values) are implicitly given a type by the compiler before they\u2019re evaluated.</p><p>The C++ type system is a fundamental aspect of the language - a set of rules applied by the compliler that ensure every variable, function argument, return value, and expression has a specific type.</p>", "a[href=\"#determining-the-type-of-a-variable\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Determining the Type of a Variable<a class=\"headerlink\" href=\"#determining-the-type-of-a-variable\" title=\"Permalink to this heading\">#</a></h2><p>It is tremendously useful to be able to check the type of a variable.</p>", "a[href=\"glossary.html#term-Core-Language\"]": "<dt id=\"term-Core-Language\">Core Language</dt><dd><p>def</p></dd>", "a[href=\"glossary.html#term-Casting-to-Type\"]": "<dt id=\"term-Casting-to-Type\">Casting to Type</dt><dd><p>def</p></dd>", "a[href=\"glossary.html#term-Class\"]": "<dt id=\"term-Class\">Class</dt><dd><p>more basic    ;A blueprint for creating objects, encapsulating data (attributes) and functions (methods).</p></dd>", "a[href=\"glossary.html#term-Infix-Operator\"]": "<dt id=\"term-Infix-Operator\">Infix Operator</dt><dd><p>Operator that sits between two variables, denoting an operation using both. As opposed to unary, prefix and postfix operators that act on one variable position before or after it.</p></dd>", "a[href=\"#casting-to-type\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Casting to Type<a class=\"headerlink\" href=\"#casting-to-type\" title=\"Permalink to this heading\">#</a></h2><p>Although the type of a variable cannot be changed.</p><p>The value of a variable can be copy assigned to another variable that has a differnt type  - not all permutations are permitted.</p>", "a[href=\"glossary.html#term-Template\"]": "<dt id=\"term-Template\">Template</dt><dd><p>A blueprint for generic and reusable code for functions and classes</p></dd>", "a[href=\"#implicit-casting\"]": "<h3 class=\"tippy-header\" style=\"margin-top: 0;\">Implicit Casting<a class=\"headerlink\" href=\"#implicit-casting\" title=\"Permalink to this heading\">#</a></h3><p>Some types are automatically converted by the compiler if their is a mismatch and the type conversion required is one of the permitted built-in conversions - called implicit casting.</p><p>Implicit casting occurs when a single expression is found to include multiple types. e.g. attempted addition of an <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> to a <code class=\"docutils literal notranslate\"><span class=\"pre\">double</span></code> - although they are both numbers, a decision needs to made about the type of the result, and some possible operations behave differently beteen types, such as division.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
