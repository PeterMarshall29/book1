selector_to_html = {"a[href=\"#examplen2\"]": "<div class=\"code_example dropdown admonition\" id=\"examplen2\">\n<p class=\"admonition-title\">Code Example: Modifying Vectors - push_back() </p>\n<section id=\"code_example-content\">\n<p>Try this code - construct the supporting program.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">mySecondVector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"n\">mySecondVector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">);</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">mySecondVector</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation admonition\" id=\"jupyternotebooks/vector-code_explanation-7\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplen2\"> Code Example: Modifying Vectors - push_back() </a></p>\n<section id=\"code_explanation-content\">\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">push_back()</span></code> is another member function \u2013 it belongs to <code class=\"docutils literal notranslate\"><span class=\"pre\">std::vector</span></code> and must be called using the <code class=\"docutils literal notranslate\"><span class=\"pre\">.</span></code> notation.</p>\n<p>Line 3 is a range-for-statement, explained <a class=\"reference internal\" href=\"for_loops.html#range-for\"><span class=\"std std-ref\">here</span></a>.</p>\n<p>More than one element may be added by <code class=\"docutils literal notranslate\"><span class=\"pre\">push_back()</span></code> by using a list i.e. put a curly brace <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code> enclosed, comma delimited sequence of values in the parens.</p>\n<div class=\"exercise dropdown admonition\" id=\"jupyternotebooks/vector-exercise-8\">\n<p class=\"admonition-title\">Exercise</p>\n<section id=\"exercise-content\">\n<p>Try adding the following to your previous example code:</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mySecondVector</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">({</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">});</span><span class=\"w\"> </span>\n</pre></div>\n</div>\n</section>\n</div></section>\n</div>\n</section>\n</div>", "a[href=\"#useful-functions\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Useful Functions<a class=\"headerlink\" href=\"#useful-functions\" title=\"Permalink to this heading\">#</a></h2>", "a[href=\"#vectors\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Vectors<a class=\"headerlink\" href=\"#vectors\" title=\"Permalink to this heading\">#</a></h1><p>In C++, there are a variety of objects that can be used to store multiple values of the same type in a single variable including <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;vector&gt;</span></code> , <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;array&gt;</span></code> , and simple arrays.</p><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;vector&gt;</span></code> library provides the most flexible method - a <code class=\"docutils literal notranslate\"><span class=\"pre\">std::vector</span></code> is a sequence of elements that can be accessed by their index using <code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> , the <a class=\"reference internal\" href=\"glossary.html#term-Subscript-Operator\"><span class=\"xref std std-term\">subscript operator</span></a>.</p>", "a[href=\"#adding-to-a-vector\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Adding to a Vector<a class=\"headerlink\" href=\"#adding-to-a-vector\" title=\"Permalink to this heading\">#</a></h2><p>A non-existent element cannot be accessed or be created by assignment in C++.</p>", "a[href=\"glossary.html#term-Subscript-Operator\"]": "<dt id=\"term-Subscript-Operator\">Subscript Operator</dt><dd><p>The subscript operator <code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> is used to access elements in arrays, vectors, other containers, or user-defined types - can be overloaded to provide custom behavior for objects of a class.</p></dd>", "a[href=\"#examplen1\"]": "<div class=\"code_example dropdown admonition\" id=\"examplen1\">\n<p class=\"admonition-title\">Code Example: Vector Basics </p>\n<section id=\"code_example-content\">\n<p>Try this code - construct the supporting program.</p>\n<div class=\"cell tag_remove-output tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/vector-code_explanation-2\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplen1\"> Code Example: Vector Basics </a></p>\n<section id=\"code_explanation-content\">\n<p>This code will not compile - one of the first issues encountered when learning C++ is that the character output stream <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> cannot print a whole vector or array.</p>\n<p>There is a simple solution - shown below - but we can start by only printing single elements of the vector using the element\u2019s index.</p>\n<div class=\"dropdown admonition\">\n<p class=\"admonition-title\">Indexing into a Vector</p>\n<p>To access or modify an individual element of a vector we use the element\u2019s index i.e. same as an array.</p>\n<p>Indices run from \u20180\u2019 to <code class=\"docutils literal notranslate\"><span class=\"pre\">(number_of_elements</span> <span class=\"pre\">-</span> <span class=\"pre\">1)</span></code> :</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">vectorName</span><span class=\"p\">[..</span><span class=\"n\">element_index_here</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p>In computing, most index values start at 0!</p>\n</div>\n</div>\n<ul class=\"simple\">\n<li><p>Try changing the ouptut line to:</p></li>\n</ul>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">myFirstVector</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n</pre></div>\n</div>\n<ul class=\"simple\">\n<li><p>What happens if you replace 0, with 5? Find out!</p></li>\n</ul>\n</section>\n</div>\n</section>\n</div>", "a[href=\"for_loops.html#range-for\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Range-For: Traversing a Vector<a class=\"headerlink\" href=\"#range-for-traversing-a-vector\" title=\"Permalink to this heading\">#</a></h2><p>A variant of the for-statement is the range-based for-statement or range-for loop, which is used to iterate over a range.</p><p>A range is defined as anything that you can iterate through e.g. arrays or containers like std::vector that have member functions <code class=\"docutils literal notranslate\"><span class=\"pre\">begin()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">end()</span></code>.</p>", "a[href=\"#multi-dimensional-vectors\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Multi-dimensional Vectors<a class=\"headerlink\" href=\"#multi-dimensional-vectors\" title=\"Permalink to this heading\">#</a></h2><p>We can define a vector of vectors.</p>", "a[href=\"glossary.html#term-Iterator\"]": "<dt id=\"term-Iterator\">Iterator</dt><dd><p>Iterators are objects that act as pointers to elements within a container (arrays, vectors, lists, etc.) making it simple to traverse and manipulate the elements of a container without exposing the underlying structure e.g. the user may not need to know the number of elements in advance, or the type of container. Some functions specifically require iterators, which are most easily produced in these cases by another member function, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">begin()</span></code>.</p></dd>", "a[href=\"#accessing-or-modifying-the-elements-of-a-vector\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Accessing or Modifying the Elements of a <code class=\"docutils literal notranslate\"><span class=\"pre\">vector</span></code><a class=\"headerlink\" href=\"#accessing-or-modifying-the-elements-of-a-vector\" title=\"Permalink to this heading\">#</a></h2><p>The <a class=\"reference internal\" href=\"glossary.html#term-Subscript-Operator\"><span class=\"xref std std-term\">subscript operator</span></a> and the element\u2019s index is used to access or modify the values contained in a vector.</p><p>A useful alternative is the <code class=\"docutils literal notranslate\"><span class=\"pre\">at()</span></code> member function.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
