selector_to_html = {"a[href=\"#formatting-numeric-output\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Formatting Numeric Output<a class=\"headerlink\" href=\"#formatting-numeric-output\" title=\"Permalink to this heading\">#</a></h2><p>The default output for a floating-point number is 6 digits. The number is rounded to give the best approximation that can be printed with 6 digits, but this may not be sufficient to enable you to spot rounding or truncation errors. The value stored by the computer will have more digits, so comparisons may fail.</p>", "a[href=\"#input-and-output\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Input and Output<a class=\"headerlink\" href=\"#input-and-output\" title=\"Permalink to this heading\">#</a></h1><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;iostream&gt;</span></code> component of the <a class=\"reference internal\" href=\"glossary.html#term-Standard-Library\"><span class=\"xref std std-term\">standard library</span></a> provides the tools used to interact with programmes, using the keyboard and computer display for input and output.</p><p>These basic functions are vital to learning programming because they enable the programmer to follow the progress of a program\u2019s execution - without some output to the display you will have little insight into what the program is doing.</p>", "a[href=\"glossary.html#term-Extraction-Operator\"]": "<dt id=\"term-Extraction-Operator\">Extraction Operator</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;&gt;</span></code></p></dd>", "a[href=\"#examplec22\"]": "<div class=\"code_example dropdown admonition\" id=\"examplec22\">\n<p class=\"admonition-title\">Code_Example (Practice with IOStream)</p>\n<section id=\"code_example-content\">\n<p>Enter the following into the Live Code editor - which should work.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"p\">;</span>\n<span class=\"linenos\">2</span><span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">honorific</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Dr\"</span><span class=\"p\">;</span>\n<span class=\"linenos\">3</span><span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"p\">;</span>\n<span class=\"linenos\">4</span><span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Please type your surname!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"linenos\">5</span><span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"p\">;</span><span class=\"w\">  </span>\n<span class=\"linenos\">6</span><span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">honorific</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\", you are \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" years old!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">!</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"exercise dropdown admonition\" id=\"jupyternotebooks/input_and_output-exercise-4\">\n<p class=\"admonition-title\">Exercise</p>\n<section id=\"exercise-content\">\n<ul class=\"simple\">\n<li><p>Change the code to ask the user to input their honorific, followed by their first name, followed by their surname, followed by their age.</p></li>\n<li><p>Find out what happens if you respond with 4 words, rather than 3 words and a number.</p></li>\n<li><p>Change the existing output line to print <code class=\"docutils literal notranslate\"><span class=\"pre\">surname</span> <span class=\"pre\">*</span> <span class=\"pre\">2</span></code> and then try <code class=\"docutils literal notranslate\"><span class=\"pre\">surname</span> <span class=\"pre\">+</span> <span class=\"pre\">age</span></code>.</p></li>\n</ul>\n</section>\n</div><div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/input_and_output-code_explanation-5\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplec22\"> Code_Example (Practice with IOStream)</a></p>\n<section id=\"code_explanation-content\">\n<p>The program, with the altered and added code lines, should be similar to this\u2026</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Please type your honorific, followed by your first name, followed by your surname, followed by your age</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">honorific</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">honorific</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">firstName</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\", you are \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">age</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\" years old!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p>Attempting to add or multiply a string and integer is not permitted by the <a class=\"reference internal\" href=\"glossary.html#term-Type-System\"><span class=\"xref std std-term\">type system</span></a>.</p>\n<p>If a fourth string is input, when the program expects an integer, a null value is recorded, which unfortunately overwrote the existing value, if there was one, and is why the program printed \u20180\u2019.</p>\n<p>A professional program would need to be able to catch this type of input error. Older C++ version might give a random value such as \u2018-96738\u2019.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"glossary.html#term-Standard-Library\"]": "<dt id=\"term-Standard-Library\">Standard Library</dt><dd><p>Collection of facilities (classes and functions) available for inclusion into C++ programmes \u2013 separated into namespaces.</p></dd>", "a[href=\"#printf\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">printf()<a class=\"headerlink\" href=\"#printf\" title=\"Permalink to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">printf()</span></code> is used to print formatted output - this section can safely be left until later. <code class=\"docutils literal notranslate\"><span class=\"pre\">printf()</span></code> requires <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;cstdio&gt;</span></code>.</p>", "a[href=\"glossary.html#term-Type-System\"]": "<dt id=\"term-Type-System\">Type System</dt><dd><p>The set of rules prescribing how each object may be used according to their types.</p></dd>", "a[href=\"#the-getline-function\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">getline()</span></code> function<a class=\"headerlink\" href=\"#the-getline-function\" title=\"Permalink to this heading\">#</a></h2><p>An alternative to <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cin</span></code> is to use <code class=\"docutils literal notranslate\"><span class=\"pre\">getline()</span></code>, which will ignore whitespace and collect every character before <kbd class=\"kbd docutils literal notranslate\">return</kbd> into a single string.</p><p>The downside is that you may need to split up the string later. See <a class=\"reference external\" href=\"https://en.cppreference.com/w/cpp/io/basic_stringstream.html\">sstream</a> for further information on how to separate a string.</p>", "a[href=\"#examplec1\"]": "<div class=\"code_example dropdown admonition\" id=\"examplec1\">\n<p class=\"admonition-title\">Code_Example (Basic IOStream Statements)</p>\n<section id=\"code_example-content\">\n<p>Type the following code into the empty code window below, add the missing program statements, and run the completed code.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Please type your surname!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"linenos\">2</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"p\">;</span>\n<span class=\"linenos\">3</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"p\">;</span>\n<span class=\"linenos\">4</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"linenos\">5</span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<div class=\"cell tag_remove-output docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">!</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/input_and_output-code_explanation-1\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplec1\"> Code_Example (Basic IOStream Statements)</a></p>\n<section id=\"code_explanation-content\">\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">cin</span></code> is the character input stream, pronounced \u2018see - in\u2019; used to read input from the keyboard.</p>\n<p>The input stream records all the characters entered until the user hits the <kbd class=\"kbd docutils literal notranslate\">return</kbd> key in a part of the computer memory called the buffer.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;&gt;</span></code> is called the \u201cextraction\u201d operator - used with <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cin</span></code>, it tells the computer what to do with the input - usually to store the value in a variable.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"linenos\">1</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span>\n<span class=\"linenos\">2</span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;string&gt;</span>\n<span class=\"linenos\">3</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"linenos\">4</span><span class=\"w\">  </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"p\">;</span><span class=\"w\">    </span><span class=\"c1\">//Declares a variable of type string.</span>\n<span class=\"linenos\">5</span><span class=\"w\">  </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Please type your surname!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//This is a 'prompt'; a message to the user with instructions.</span>\n<span class=\"linenos\">6</span><span class=\"w\">  </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"p\">;</span><span class=\"w\">    </span><span class=\"c1\">//Character input stream, takes input from console until 'return' (aka 'newline') is pressed. </span>\n<span class=\"linenos\">7</span><span class=\"w\">  </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Hello, \"</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">surname</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"linenos\">8</span><span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"linenos\">9</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">\"Hello,</span> <span class=\"pre\">\"</span></code> is a string-literal. <code class=\"docutils literal notranslate\"><span class=\"pre\">Surname</span></code> is a variable of type <code class=\"docutils literal notranslate\"><span class=\"pre\">string</span></code>.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#using-std-cout-with\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Using std::cout with <vector><a class=\"headerlink\" href=\"#using-std-cout-with\" title=\"Permalink to this heading\">#</a></vector></h2><p>If indexing into a vector is inconvenient, another option is to overload the insertion operator <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&lt;</span></code> using a template to accommodate the variety of types accepted by <code class=\"docutils literal notranslate\"><span class=\"pre\">vector</span></code>.</p><p>This is most likely beyond the scope of this module, but to demonstrate the possibility\u2026</p>", "a[href=\"glossary.html#term-Buffer\"]": "<dt id=\"term-Buffer\">Buffer</dt><dd><p>A memory space used for temporarily storing data before processing (e.g. assigning to a variable), or writing to a file. Buffers are necessary because of the vast differences in speed between data producers and consumers.</p></dd>", "a[href=\"#newline-std-endl-vs-n\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Newline - <code class=\"docutils literal notranslate\"><span class=\"pre\">std::endl</span></code> vs <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\n'</span></code><a class=\"headerlink\" href=\"#newline-std-endl-vs-n\" title=\"Permalink to this heading\">#</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">std::endl</span></code> inserts a newline character into the output sequence and is therefore almost the same as <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\n'</span></code>.</p><p>It is better to use <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\n'</span></code> to output a newline. Using <code class=\"docutils literal notranslate\"><span class=\"pre\">std::endl</span></code> is often inefficient because <code class=\"docutils literal notranslate\"><span class=\"pre\">endl</span></code> additionally flushes the output stream - it forces the output to appear in real time (advanced concept).</p>", "a[href=\"glossary.html#term-Extraction\"]": "<dt id=\"term-Extraction\">Extraction</dt><dd><p>Transfer of data out of a stream into a variable.</p></dd>", "a[href=\"#examplec2\"]": "<div class=\"code_example dropdown admonition\" id=\"examplec2\">\n<p class=\"admonition-title\">Code_Example (Extraction Failure)</p>\n<section id=\"code_example-content\">\n<p>Run this code which will work.</p>\n<div class=\"cell tag_remove-ouput tag_skip-execution docutils container\">\n<div class=\"cell_input docutils container\">\n<div class=\"highlight-C++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"n\">word</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Peter\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">myChar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"sc\">'a'</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"s\">\"Please enter a word followed by a number ..</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">word</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cin</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">word</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<ul class=\"simple\">\n<li><p>Find out what happens if you enter number followed by a word.</p></li>\n</ul>\n<div class=\"code_explanation dropdown admonition\" id=\"jupyternotebooks/input_and_output-code_explanation-8\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplec2\"> Code_Example (Extraction Failure)</a></p>\n<section id=\"code_explanation-content\">\n<p>Extraction fails if the input data does not match the type of the variable being extracted.</p>\n<p>If you entered an integer literal - <code class=\"docutils literal notranslate\"><span class=\"pre\">word</span></code> takes the number as a string - no problem.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">number</span></code> is reset to zero - overwriting any previous value because the extraction failed - only numeric characters can be extracted to an <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>.</p>\n<ul class=\"simple\">\n<li><p>Reverse the order of <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cin</span> <span class=\"pre\">&gt;&gt;</span> <span class=\"pre\">word;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cin</span> <span class=\"pre\">&gt;&gt;</span> <span class=\"pre\">number;</span></code> - then enter a word followed by a number.</p></li>\n</ul>\n<p>Now entering a string literal causes the extraction to fail and <code class=\"docutils literal notranslate\"><span class=\"pre\">number</span></code> is reset to the value 0.</p>\n<p>But <code class=\"docutils literal notranslate\"><span class=\"pre\">word</span></code> is unchanged with its original value, because when a previous extraction has failed, further extractions do not happen.</p>\n</section>\n</div>\n</section>\n</div>", "a[href=\"#examplec5\"]": "<div class=\"code_example dropdown admonition\" id=\"examplec5\">\n<p class=\"admonition-title\">Code_Example (print())</p>\n<section id=\"code_example-content\">\n<p>Try this code in Visual Studio - the Live Code editor does not have C++23.</p>\n<div class=\"highlight-c++ notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;print&gt;</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"{2} {1}{0}!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">23</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"C++\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Hello\"</span><span class=\"p\">);</span><span class=\"w\">  </span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<div class=\"code_explanation dropdown admonition\" id=\"explanationc5\">\n<p class=\"admonition-title\">Explanation of  <a class=\"reference internal\" href=\"#examplec5\"> Code_Example (print())</a></p>\n<section id=\"code_explanation-content\">\n<p>The first argument is the string to be printed.</p>\n<p>The numbers in the curly braces <code class=\"docutils literal notranslate\"><span class=\"pre\">{}</span></code> refer to the position of the subeseqent arguments in order, starting with the first argument after the string, which has index \u20180\u2019.</p>\n<p>The printed string will have those arguments inserted in the indicated corresponding position; e.g. {1} is replaced by the second argument following the string.</p>\n<p>Arguments can be used repeatedly and in any order.</p>\n</section>\n</div>\n<p>Prints, <code class=\"docutils literal notranslate\"><span class=\"pre\">Hello</span> <span class=\"pre\">C++23!</span></code></p>\n</section>\n</div>", "a[href=\"#new-print-only-in-c-23\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">New Print() - only in  C++23<a class=\"headerlink\" href=\"#new-print-only-in-c-23\" title=\"Permalink to this heading\">#</a></h2><p>There are several alternatives to <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> in C++. In C++23 a new <code class=\"docutils literal notranslate\"><span class=\"pre\">print()</span></code> was introduced.</p><p>Note: we are using C++20.</p>", "a[href=\"glossary.html#term-Print-Debugging\"]": "<dt id=\"term-Print-Debugging\">Print Debugging</dt><dd><p>Using strategically positioned print statements to follow the control flow of a program\u2019s execution. The print statements may just include an index to identify which statement produced it, or more detailed error/exception outputs.</p></dd>", "a[href=\"#print-debugging\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Print debugging<a class=\"headerlink\" href=\"#print-debugging\" title=\"Permalink to this heading\">#</a></h2><p>A good reason that <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> is taught before other IO methods is its simplicity - no, really! <code class=\"docutils literal notranslate\"><span class=\"pre\">std::cout</span></code> automatically formats the printed text based on the variable\u2019s type, and allows a quick and simple output immediately, when we just want to get started or for <a class=\"reference internal\" href=\"glossary.html#term-Print-Debugging\"><span class=\"xref std std-term\">print debugging</span></a>, by obviating any additional issues formatting different stings.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false, theme: 'material', duration: [200, 100], delay: [200, 0],

            });
        };
    };
    console.log("tippy tips loaded!");
};
